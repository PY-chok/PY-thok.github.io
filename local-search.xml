<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2024-Hgame-week1-wp-crypto</title>
    <link href="/2024/02/25/2024-Hgame-week1-wp-crypto/"/>
    <url>/2024/02/25/2024-Hgame-week1-wp-crypto/</url>
    
    <content type="html"><![CDATA[<h1 id="2024-Hgame-week1-wp-crypto"><a href="#2024-Hgame-week1-wp-crypto" class="headerlink" title="2024-Hgame-week1-wp-crypto"></a>2024-Hgame-week1-wp-crypto</h1><p>简单写写。</p><h3 id="ezRSA"><a href="#ezRSA" class="headerlink" title="ezRSA"></a>ezRSA</h3><p>题目描述：一个简单的RSA</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br>m=bytes_to_long(flag)<br>p=getPrime(<span class="hljs-number">1024</span>)<br>q=getPrime(<span class="hljs-number">1024</span>)<br>n=p*q<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>e=<span class="hljs-number">0x10001</span><br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br>leak1=<span class="hljs-built_in">pow</span>(p,q,n)<br>leak2=<span class="hljs-built_in">pow</span>(q,p,n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;leak1=<span class="hljs-subst">&#123;leak1&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;leak2=<span class="hljs-subst">&#123;leak2&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c=<span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">leak1=149127170073611271968182576751290331559018441805725310426095412837589227670757540743929865853650399839102838431507200744724939659463200158012469676979987696419050900842798225665861812331113632892438742724202916416060266581590169063867688299288985734104127632232175657352697898383441323477450658179727728908669</span><br><span class="hljs-string">leak2=116122992714670915381309916967490436489020001172880644167179915467021794892927977272080596641785569119134259037522388335198043152206150259103485574558816424740204736215551933482583941959994625356581201054534529395781744338631021423703171146456663432955843598548122593308782245220792018716508538497402576709461</span><br><span class="hljs-string">c=10529481867532520034258056773864074017027019578041866245400647840230251661652999709715919620810933437191661180003295923273655675729588558899592524235622728816065501918076120812236580344991140980991532347991252705288633014913479970610056845543523591324177567061948922552275235486615514913932125436543991642607028689762693617305246716492783116813070355512606971626645594961850567586340389705821314842096465631886812281289843132258131809773797777049358789182212570606252509790830994263132020094153646296793522975632191912463919898988349282284972919932761952603379733234575351624039162440021940592552768579639977713099971</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>$p$和$q$互素，所以由费马小定理<br>$$<br>p^{q-1} \equiv 1 \quad(\bmod q)<br>$$<br>转化一下。<br>$$<br>p^{q} \equiv p \quad(\bmod pq)<br>$$<br>所以leak1&#x3D;p， leak2&#x3D;q.</p><p>比较简单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>leak1=<span class="hljs-number">1491271700736112719681825767512903315590184418057253104260954128375892276</span><br><span class="hljs-number">7075754074392986585365039983910283843150720074472493965946320015801246967697998</span><br><span class="hljs-number">7696419050900842798225665861812331113632892438742724202916416060266581590169063</span><br><span class="hljs-number">867688299288985734104127632232175657352697898383441323477450658179727728908669</span><br>leak2=<span class="hljs-number">1161229927146709153813099169674904364890200011728806441671799154670217948</span><br><span class="hljs-number">9292797727208059664178556911913425903752238833519804315220615025910348557455881</span><br><span class="hljs-number">6424740204736215551933482583941959994625356581201054534529395781744338631021423</span><br><span class="hljs-number">703171146456663432955843598548122593308782245220792018716508538497402576709461</span><br>c=<span class="hljs-number">10529481867532520034258056773864074017027019578041866245400647840230251661652</span><br><span class="hljs-number">9997097159196208109334371916611800032959232736556757295885588995925242356227288</span><br><span class="hljs-number">1606550191807612081223658034499114098099153234799125270528863301491347997061005</span><br><span class="hljs-number">6845543523591324177567061948922552275235486615514913932125436543991642607028689</span><br><span class="hljs-number">7626936173052467164927831168130703555126069716266455949618505675863403897058213</span><br><span class="hljs-number">1484209646563188681228128984313225813180977379777704935878918221257060625250979</span><br>0830994263132020094153646296793522975632191912463919898988349282284972919932761<br><span class="hljs-number">952603379733234575351624039162440021940592552768579639977713099971</span><br>n=leak1*leak2<br>phi=(leak1-<span class="hljs-number">1</span>)*(leak2-<span class="hljs-number">1</span>)<br>d=inverse(<span class="hljs-number">0x10001</span>,phi)<br>flag=long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,n))<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h3 id="ezMath"><a href="#ezMath" class="headerlink" title="ezMath"></a>ezMath</h3><p>题目描述：一个简单的数学题</p><p>pell方程与连分数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> random,string<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag,y,x<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pad</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x+<span class="hljs-string">b&#x27;\x00&#x27;</span>*(<span class="hljs-number">16</span>-<span class="hljs-built_in">len</span>(x)%<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">KEY</span>):<br>    cipher= AES.new(KEY,AES.MODE_ECB)<br>    encrypted =cipher.encrypt(flag)<br>    <span class="hljs-keyword">return</span> encrypted<br>D = <span class="hljs-number">114514</span><br><span class="hljs-keyword">assert</span> x**<span class="hljs-number">2</span> - D * y**<span class="hljs-number">2</span> == <span class="hljs-number">1</span><br>flag=pad(flag)<br>key=pad(long_to_bytes(y))[:<span class="hljs-number">16</span>]<br>enc=encrypt(key)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;enc=<span class="hljs-subst">&#123;enc&#125;</span>&#x27;</span>)<br><span class="hljs-comment">#enc=b&quot;\xce\xf1\x94\x84\xe9m\x88\x04\xcb\x9ad\x9e\x08b\xbf\x8b\xd3\r\xe2\x81\x17g\x9c\xd7\x10\x19\x1a\xa6\xc3\x9d\xde\xe7\xe0h\xed/\x00\x95tz)1\\\t8:\xb1,U\xfe\xdec\xf2h\xab`\xe5&#x27;\x93\xf8\xde\xb2\x9a\x9a&quot;</span><br></code></pre></td></tr></table></figure><p>引用一下oiwiki。</p><p><a href="https://oi-wiki.org/math/number-theory/pell-equation/">Pell 方程 - OI Wiki (oi-wiki.org)</a></p><p>定理：记 $x^{2}-D y^{2}&#x3D;s$。如果有$|s|&lt;\sqrt{D}$，则$\frac{x}{y}$ 一定是$\sqrt{D}$的渐进分数。</p><p>证明：分情况讨论。</p><p>当$s&gt;0$时，根据，$x^{2}-D y^{2}&gt;0$，有$x&gt;y\sqrt{D}$。并且有<br>$$<br>\begin{aligned}\left|\frac xy-\sqrt{D}\right|&amp;&#x3D;\frac s{y(x+y\sqrt{D})}&lt;\frac s{2y^2\sqrt{D}}&lt;\frac1{2y^2}\end{aligned}<br>$$<br>此时根据勒让德判别法，$\frac{x}{y}$是$\sqrt{D}$的渐进分数。</p><p>#怎么判别的？</p><p><img src="/pic/8.png" alt="img"></p><p>摘自《公钥密码学的数学基础》。</p><p>所以直接在sagemath跑连分数即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br>enc=<span class="hljs-string">b&quot;\xce\xf1\x94\x84\xe9m\x88\x04\xcb\x9ad\x9e\x08b\xbf\x8b\xd3\r\xe2\x81\x17</span><br><span class="hljs-string">g\x9c\xd7\x10\x19\x1a\xa6\xc3\x9d\xde\xe7\xe0h\xed/\x00\x95tz)1\\\t8:\xb1,U\xfe</span><br><span class="hljs-string">\xdec\xf2h\xab`\xe5&#x27;\x93\xf8\xde\xb2\x9a\x9a&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve_pell</span>(<span class="hljs-params">N, num = <span class="hljs-number">100</span></span>):<br>c = continued_fraction(sqrt(N))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>y = c.denominator(i)<br>x = c.numerator(i)<br><span class="hljs-keyword">if</span> x^<span class="hljs-number">2</span> - N * y^<span class="hljs-number">2</span> == <span class="hljs-number">1</span>:<br><span class="hljs-keyword">return</span> x, y<br><span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pad</span>(<span class="hljs-params">x</span>):<br><span class="hljs-keyword">return</span> x+<span class="hljs-string">b&#x27;\x00&#x27;</span>*((<span class="hljs-number">16</span>-<span class="hljs-built_in">len</span>(x))%<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">KEY</span>):<br>cipher= AES.new(KEY,AES.MODE_ECB)<br>flag =cipher.decrypt(enc)<br><span class="hljs-keyword">return</span> flag<br>N = <span class="hljs-number">114514</span><br>x,y=solve_pell(N)<br><span class="hljs-built_in">print</span>(x,y)<br>y=pad(long_to_bytes(y))[:<span class="hljs-number">16</span>]<br>flag=decrypt(y)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h3 id="ezPRNG"><a href="#ezPRNG" class="headerlink" title="ezPRNG"></a>ezPRNG</h3><p>题目描述：一个简单的随机数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">PRNG</span>(<span class="hljs-params">R,mask</span>):<br>    nextR = (R &lt;&lt; <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xffffffff</span><br>    i=(R&amp;mask)&amp;<span class="hljs-number">0xffffffff</span><br>    nextbit=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i!=<span class="hljs-number">0</span>:<br>        nextbit^=(i%<span class="hljs-number">2</span>)<br>        i=i//<span class="hljs-number">2</span><br>    nextR^=nextbit <br>    <span class="hljs-keyword">return</span> (nextR,nextbit)<br><br>R=<span class="hljs-built_in">str</span>(uuid.uuid4())<br>flag=<span class="hljs-string">&#x27;hgame&#123;&#x27;</span>+R+<span class="hljs-string">&#x27;&#125;&#x27;</span><br><span class="hljs-built_in">print</span>(flag)<br>R=R.replace(<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>Rlist=[<span class="hljs-built_in">int</span>(R[i*<span class="hljs-number">8</span>:i*<span class="hljs-number">8</span>+<span class="hljs-number">8</span>],<span class="hljs-number">16</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br><br>mask=<span class="hljs-number">0b10001001000010000100010010001001</span><br>output=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    R=Rlist[i]<br>    out=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>        (R,nextbit)=PRNG(R,mask)<br>        out+=<span class="hljs-built_in">str</span>(nextbit)<br>    output.append(out)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;output=<span class="hljs-subst">&#123;output&#125;</span>&#x27;</span>)<br><span class="hljs-comment">#output=[&#xx27;, &#xx27;, &#xx27;, &#xx27;]</span><br></code></pre></td></tr></table></figure><p><a href="https://www.anquanke.com/post/id/181811">深入分析CTF中的LFSR类题目（一）-安全客 - 安全资讯平台 (anquanke.com)</a></p><p>几乎是原题。</p><p>上面的链接其实讲的很清楚了hh，我就不东施效颦了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>output=[<span class="hljs-string">&#xx27;</span>, <span class="hljs-string">&#xx27;</span>, <span class="hljs-string">&#x27;1110110110010001011100111110111110111001111101010011001111100100001000111001101011010100010111110101110101111010111100101100010011001001011101000101011000110111000010000101001000100111010110001010000111110110111000011001100010001101000010001111111100000101111000100101000000001001001001101110000100111001110001001011010111111010111101101101001110111010111110110011001000010001010100010010110110101011100000101111100100110011110001001001111100101111001111011011010111001001111010001100110001100001100000110000011111010100101111000000101011111010000111110000101111100010000010010111010110100101010101001111100101011100011001001011000101010101001101100010110000010001110011110011100111000110101010111010011010000001100001011000011101101000000011111000101111101011110011000011011000100100110111010011001111101100101100011000101001110101111001000010110010111101110110010101101000000101001011000000001110001110000100000001001111100011010011000000011011101111101001111110001011101100000010001001010011000001&#x27;</span>, <span class="hljs-string">&#xx27;</span>]<br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    R = <span class="hljs-string">&#x27;&#x27;</span><br>    key=(output[j])[:<span class="hljs-number">32</span>]<br>    temp=key<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        out = <span class="hljs-string">&#x27;?&#x27;</span>+key[:<span class="hljs-number">31</span>]<br>        ans=<span class="hljs-built_in">int</span>(temp[-<span class="hljs-number">1</span>-i])^<span class="hljs-built_in">int</span>(out[-<span class="hljs-number">1</span>])^<span class="hljs-built_in">int</span>(out[-<span class="hljs-number">4</span>])^<span class="hljs-built_in">int</span>(out[-<span class="hljs-number">8</span>])^<span class="hljs-built_in">int</span>(out[-<span class="hljs-number">11</span>])^<span class="hljs-built_in">int</span>(out[-<span class="hljs-number">15</span>])^<span class="hljs-built_in">int</span>(out[-<span class="hljs-number">20</span>])^<span class="hljs-built_in">int</span>(out[-<span class="hljs-number">25</span>])^<span class="hljs-built_in">int</span>(out[-<span class="hljs-number">28</span>])<br>        R += <span class="hljs-built_in">str</span>(ans)<br>        key = <span class="hljs-built_in">str</span>(ans) + key[:<span class="hljs-number">31</span>]<br>    R = <span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(R[::-<span class="hljs-number">1</span>],<span class="hljs-number">2</span>),<span class="hljs-string">&#x27;x&#x27;</span>)<br>    flag+=R<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hgame&#123;&#x27;</span>+flag+<span class="hljs-string">&#x27;&#125;&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="奇怪的图片"><a href="#奇怪的图片" class="headerlink" title="奇怪的图片"></a>奇怪的图片</h3><p>这题挺有意思，包括后面那个奇怪的图片plus，我觉得都很好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, ImageDraw, ImageFont<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> secrets<br><br><br>flag = <span class="hljs-string">&quot;hgame&#123;fake_flag&#125;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_random_image</span>(<span class="hljs-params">width, height</span>):<br>    image = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>, (width, height), <span class="hljs-string">&quot;white&quot;</span>)<br>    pixels = image.load()<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>            red = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)<br>            green = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)<br>            blue = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)<br>            pixels[x, y] = (red, green, blue)<br>    <span class="hljs-keyword">return</span> image<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">draw_text</span>(<span class="hljs-params">image, width, height, token</span>):<br>    font_size = random.randint(<span class="hljs-number">16</span>, <span class="hljs-number">40</span>)<br>    font = ImageFont.truetype(<span class="hljs-string">&quot;arial.ttf&quot;</span>, font_size)<br>    text_color = (random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>), random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>), random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>))<br>    x = random.randint(<span class="hljs-number">0</span>, width - font_size * <span class="hljs-built_in">len</span>(token))<br>    y = random.randint(<span class="hljs-number">0</span>, height - font_size)<br>    draw = ImageDraw.Draw(image)<br>    draw.text((x, y), token, font=font, fill=text_color)<br>    <span class="hljs-keyword">return</span> image<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor_images</span>(<span class="hljs-params">image1, image2</span>):<br>    <span class="hljs-keyword">if</span> image1.size != image2.size:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Images must have the same dimensions.&quot;</span>)<br>    xor_image = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>, image1.size)<br>    pixels1 = image1.load()<br>    pixels2 = image2.load()<br>    xor_pixels = xor_image.load()<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.size[<span class="hljs-number">0</span>]):<br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.size[<span class="hljs-number">1</span>]):<br>            r1, g1, b1 = pixels1[x, y]<br>            r2, g2, b2 = pixels2[x, y]<br>            xor_pixels[x, y] = (r1 ^ r2, g1 ^ g2, b1 ^ b2)<br>    <span class="hljs-keyword">return</span> xor_image<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_unique_strings</span>(<span class="hljs-params">n, length</span>):<br>    unique_strings = <span class="hljs-built_in">set</span>()<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(unique_strings) &lt; n:<br>        random_string = secrets.token_hex(length // <span class="hljs-number">2</span>)<br>        unique_strings.add(random_string)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(unique_strings)<br><br><br>random_strings = generate_unique_strings(<span class="hljs-built_in">len</span>(flag), <span class="hljs-number">8</span>)<br><br><br>current_image = generate_random_image(<span class="hljs-number">120</span>, <span class="hljs-number">80</span>)<br>key_image = generate_random_image(<span class="hljs-number">120</span>, <span class="hljs-number">80</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">random_time</span>(<span class="hljs-params">image, name</span>):<br>    time.sleep(random.random())<br>    image.save(<span class="hljs-string">&quot;.\\png_out\\&#123;&#125;.png&quot;</span>.<span class="hljs-built_in">format</span>(name))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>    current_image = draw_text(current_image, <span class="hljs-number">120</span>, <span class="hljs-number">80</span>, flag[i])<br>    threading.Thread(target=random_time, args=(xor_images(current_image, key_image), random_strings[i])).start()<br><br></code></pre></td></tr></table></figure><p>大概意思就是</p><p>一张图片，写上一个字，和未知的图片异或，输出。</p><p>然后这张写上一个字的图片，再写上一个字，再和未知图片异或，输出。</p><p>以此类推。</p><p>所以想破解就把一张图片和其他所有图片异或，观察字母的增减即可得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, ImageDraw, ImageFont<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> secrets<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor_images</span>(<span class="hljs-params">image1, image2</span>):<span class="hljs-comment">#图片异或？</span><br>    <span class="hljs-keyword">if</span> image1.size != image2.size:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Images must have the same dimensions.&quot;</span>)<br>    xor_image = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>, image1.size)<br>    pixels1 = image1.load()<br>    pixels2 = image2.load()<br>    xor_pixels = xor_image.load()<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.size[<span class="hljs-number">0</span>]):<br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.size[<span class="hljs-number">1</span>]):<br>            r1, g1, b1 = pixels1[x, y]<br>            r2, g2, b2 = pixels2[x, y]<br>            xor_pixels[x, y] = (r1 ^ r2, g1 ^ g2, b1 ^ b2)<br>    <span class="hljs-keyword">return</span> xor_image<br><span class="hljs-built_in">list</span> = []<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;2.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;3.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;4.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;5.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;6.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;7.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;8.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;9.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;10.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;11.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;12.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;13.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;14.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;15.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;16.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;17.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;18.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;19.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;20.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;21.png&#x27;</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">21</span>):<br>    xor_images(<span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>],<span class="hljs-built_in">list</span>[i]).save(<span class="hljs-string">&quot;1+&quot;</span>+<span class="hljs-built_in">str</span>(i+<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;.png&quot;</span>)<br></code></pre></td></tr></table></figure><p>这段代码就是一张图片和其他所有图片异或。</p><p>大概效果</p><p><img src="/pic/9.png" alt="img"></p><p>然后找出顺序，前后彼此异或，就能看到flag了，可能是反的，应该看的出来吧（</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, ImageDraw, ImageFont<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> secrets<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor_images</span>(<span class="hljs-params">image1, image2</span>):<span class="hljs-comment">#图片异或？</span><br>    <span class="hljs-keyword">if</span> image1.size != image2.size:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Images must have the same dimensions.&quot;</span>)<br>    xor_image = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>, image1.size)<br>    pixels1 = image1.load()<br>    pixels2 = image2.load()<br>    xor_pixels = xor_image.load()<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.size[<span class="hljs-number">0</span>]):<br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.size[<span class="hljs-number">1</span>]):<br>            r1, g1, b1 = pixels1[x, y]<br>            r2, g2, b2 = pixels2[x, y]<br>            xor_pixels[x, y] = (r1 ^ r2, g1 ^ g2, b1 ^ b2)<br>    <span class="hljs-keyword">return</span> xor_image<br><span class="hljs-built_in">list</span> = []<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;2.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;3.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;4.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;5.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;6.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;7.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;8.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;9.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;10.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;11.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;12.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;13.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;14.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;15.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;16.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;17.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;18.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;19.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;20.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;21.png&#x27;</span>))<br>numlist = [<span class="hljs-number">14</span>,<span class="hljs-number">11</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">8</span>,<span class="hljs-number">17</span>,<span class="hljs-number">5</span>,<span class="hljs-number">18</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>,<span class="hljs-number">16</span>,<span class="hljs-number">13</span>,<span class="hljs-number">19</span>,<span class="hljs-number">12</span>,<span class="hljs-number">9</span>,<span class="hljs-number">21</span>,<span class="hljs-number">15</span>,<span class="hljs-number">20</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>    xor_images(<span class="hljs-built_in">list</span>[numlist[i]-<span class="hljs-number">1</span>],<span class="hljs-built_in">list</span>[numlist[i+<span class="hljs-number">1</span>]-<span class="hljs-number">1</span>]).save(<span class="hljs-built_in">str</span>(numlist[i])+<span class="hljs-string">&quot;+&quot;</span>+<span class="hljs-built_in">str</span>(numlist[i+<span class="hljs-number">1</span>])+<span class="hljs-string">&quot;.png&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
      <tag>Web</tag>
      
      <tag>Misc</tag>
      
      <tag>Hgame</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录</title>
    <link href="/2024/02/24/%E6%9C%80%E8%BF%91/"/>
    <url>/2024/02/24/%E6%9C%80%E8%BF%91/</url>
    
    <content type="html"><![CDATA[<h1 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h1><p>本篇放一点碎碎念吧，太久没更新了，本文置顶。</p><h4 id="2024-2-24"><a href="#2024-2-24" class="headerlink" title="2024&#x2F;2&#x2F;24"></a>2024&#x2F;2&#x2F;24</h4><p>尝试hexoplusplus未能成功，发现hpp的时间可能还超过了静态部署的时间，故放弃了。</p><p>假期前雄心壮志地想写博客，但是也没人看啊，加上我自己也很懒，就没有写。</p><p>决定在这两周内给博客上个评论的功能。</p><p>预期会在hgame week4后更新一篇hgame crypto writeup。</p><h4 id="2024-2-25"><a href="#2024-2-25" class="headerlink" title="2024&#x2F;2&#x2F;25"></a>2024&#x2F;2&#x2F;25</h4><p>简单上个twikoo</p><p>决定把hgame分成四篇 这样推送会好看一些（XD</p><p>拙劣模仿一下我很喜欢的一个密码手的博客</p><p>更新了2024-Hgame-week1-wp-crypto</p>]]></content>
    
    
    
    <tags>
      
      <tag>live</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IEEE754协议之非数NaN——从一道活动题讲起</title>
    <link href="/2023/10/14/IEEE754%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%9D%9E%E6%95%B0NaN%E2%80%94%E2%80%94%E4%BB%8E%E4%B8%80%E9%81%93%E6%B4%BB%E5%8A%A8%E9%A2%98%E8%AE%B2%E8%B5%B7/"/>
    <url>/2023/10/14/IEEE754%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%9D%9E%E6%95%B0NaN%E2%80%94%E2%80%94%E4%BB%8E%E4%B8%80%E9%81%93%E6%B4%BB%E5%8A%A8%E9%A2%98%E8%AE%B2%E8%B5%B7/</url>
    
    <content type="html"><![CDATA[<h4 id="事情要从一道北邮百团大战的娱乐题讲起…"><a href="#事情要从一道北邮百团大战的娱乐题讲起…" class="headerlink" title="事情要从一道北邮百团大战的娱乐题讲起…."></a>事情要从一道北邮百团大战的娱乐题讲起….</h4><p><img src="/pic/1.png" alt="img"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> random<br>password = random.random()<br>val = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (val &gt; password) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> (val &lt; password):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome to my blog&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Access denied&quot;</span>)<br></code></pre></td></tr></table></figure><p>当时我心想，娱乐题而已，应该很简单吧，结果就是做了一个下午没想出来…</p><p>中途有过多种尝试…但是还是不行…</p><p>最后纯真学长告诉我去看ieee754，我这才幡然醒悟…</p><p>实在是符合我对百团活动脑筋急转弯的刻板印象，令人感叹。</p><p>引以为戒，另外网上对于NaN的资料比较零散，我的第一篇博客就献给ieee754吧。</p><p>作者水平有限，多多包涵。XD</p><h4 id="IEEE754是什么？"><a href="#IEEE754是什么？" class="headerlink" title="IEEE754是什么？"></a>IEEE754是什么？</h4><p>简而言之，IEEE754是一种用于二进制浮点数运算的标准，它定义了浮点数的表示方法、运算规则和格式。是美国电子和电气工程师协会（Institute of Electrical and Electronics Engineers，简称IEEE）制定的。</p><p>我们今天的主角NaN(not a number)非数，就来自于IEEE754。</p><p>IEEE 754标准定义了两种主要的浮点数格式：</p><ol><li>单精度（单精度浮点数）：使用32位二进制位表示一个浮点数，其中1位表示符号（正数或负数），8位表示指数（指数部分），剩下的23位表示尾数（尾数部分）。</li><li>双精度（双精度浮点数）：使用64位二进制位表示一个浮点数，其中1位表示符号，11位表示指数，剩下的52位表示尾数。</li></ol><p>关于IEEE754的移码，真值等详细规则，网上的大牛们已经写的很好了，我就不复制粘贴了…</p><p><a href="https://blog.csdn.net/weixin_47713503/article/details/108699001">clickme</a></p><h4 id="NaN是什么？"><a href="#NaN是什么？" class="headerlink" title="NaN是什么？"></a>NaN是什么？</h4><p>NaN是未定义或无法表示的数据类型的特定值。</p><p>例如0&#x2F;0通常无定义，就可以用NaN来表示。</p><p>实数域内负数平方根无解，负数对数结果复杂，反余弦&#x2F;正弦定义域小于-1或大于1，亦可用NaN表示。</p><p>正负无穷大，NaN参与计算时，计算结果常常用NaN来表示。</p><p>众所周知，两个实数之间只有小于，大于，等于三种可能关系，但是一旦一个操作数为NaN时，就必须引入所谓的<strong>无序</strong>关系。</p><p>下面给出NaN与任何浮点值，NaN，正负无穷的比较。</p><table><thead><tr><th align="center">比较</th><th align="left">NaN≥ x</th><th align="left">NaN ≤ <em>x</em></th><th>NaN &gt; <em>x</em></th><th>NaN &gt; <em>x</em></th><th>NaN &#x3D; <em>x</em></th><th>NaN ≠ <em>x</em></th></tr></thead><tbody><tr><td align="center">结果</td><td align="left">False</td><td align="left">False</td><td>False</td><td>False</td><td>False</td><td>True</td></tr></tbody></table><p>显然，这道脑筋急转弯就利用了NaN与任何数做大小比较都为False的特性。</p><p>同理，在IEEE754中，NaN也是唯一一个自身不等于自身的“数”，唯一一个不等于任何数的数，需注意，与常规数学定义不同的是，float“inf“（即无穷大）也等于自身。</p><p><strong>所以这题的答案即为NaN。</strong></p><p>一道知识面题，会的会，不会的不会，令人感叹。</p><p>下面给出INF（无穷大）的比较。</p><table><thead><tr><th align="center">比较</th><th>INF&gt;&#x3D;x(x≠INF)</th><th>INF&lt;&#x3D;x(x≠INF)</th><th>INF&gt;x(x≠INF)</th><th>INF&lt;x(x≠INF)</th><th>INF&#x3D;x(x≠INF)</th><th align="left">INF≠x(x≠INF)</th></tr></thead><tbody><tr><td align="center">结果</td><td>True</td><td>False</td><td>True</td><td>False</td><td>False</td><td align="left">True</td></tr><tr><td align="center">比较</td><td>INF&gt;&#x3D;INF</td><td>INF&lt;&#x3D;INF</td><td>INF&gt;INF</td><td>INF&lt;INF</td><td>INF&#x3D;INF</td><td align="left">INF≠INF</td></tr><tr><td align="center">结果</td><td>True</td><td>True</td><td>False</td><td>False</td><td>True</td><td align="left">False</td></tr></tbody></table><p><strong>持续写作，欢迎关注。</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
      <tag>Misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PYTHOK的writeup TSCTF-J 2023</title>
    <link href="/2023/09/25/PYTHOK%E7%9A%84writeup%20TSCTF-J%202023/"/>
    <url>/2023/09/25/PYTHOK%E7%9A%84writeup%20TSCTF-J%202023/</url>
    
    <content type="html"><![CDATA[<h1 id="PYTHOK的writeup-TSCTF-J-2023"><a href="#PYTHOK的writeup-TSCTF-J-2023" class="headerlink" title="PYTHOK的writeup TSCTF-J 2023"></a>PYTHOK的writeup TSCTF-J 2023</h1><p>本篇wp包括但不限于：</p><p>很菜很菜的密码技术 很守规矩的misc&#x2F;web 绞尽脑汁都想不出来的abstract 等等等等</p><p>感谢各位crypto大佬的狠狠鞭策 </p><p>明天还要上课实在没有时间 粗略写写wp 还望各位佬见谅qwq</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h4 id="尊嘟假嘟"><a href="#尊嘟假嘟" class="headerlink" title="尊嘟假嘟"></a>尊嘟假嘟</h4><p>听题目所给mp3音频，推测应为摩斯密码</p><p>丢进au看频谱图!<img src="/pic/6.png" alt="img"></p><p>打出摩斯密码转译</p><h4 id="异世相遇"><a href="#异世相遇" class="headerlink" title="异世相遇"></a>异世相遇</h4><h6 id=""><a href="#" class="headerlink" title=""></a></h6><p>看图知ifs国金中心 原神</p><p>搜索关键词得该活动地点位于长沙 角色为提那里 科莱（不玩原神真的知道吗</p><h4 id="白夜"><a href="#白夜" class="headerlink" title="白夜"></a>白夜</h4><p>等24小时（虔诚</p><p>似乎有什么修改器？但我不会（</p><h4 id="Violet"><a href="#Violet" class="headerlink" title="Violet"></a>Violet</h4><p>由<a href="https://www.cnblogs.com/xihui/p/11712662.html">hint</a>知其为纠错码</p><p>1到25换算为二进制 为1的就是对应的纠错码</p><p>比如23对应16+4+2+1即为10111说明16 4 2 1即为其纠错码</p><p>搓代码</p><p>但是不会写脚本 所以就手搓了100个…</p><h4 id="get-the-file-on-blockchain"><a href="#get-the-file-on-blockchain" class="headerlink" title="get the file on blockchain"></a>get the file on blockchain</h4><p>ipfs题 新东西的应用</p><p>将所给cid转码为base58</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base58<br>base58.b58encode_int(<span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;1220eb82ecca07c85628a9e6a56a76d6d2c18c93998a727a95c332ca09148a27cccb&quot;</span>, <span class="hljs-number">16</span>))<br></code></pre></td></tr></table></figure><p>运行结果为b’QmeBzJtRrENPMbsXmueBpA6KB9wgsioRPwLF3WVMdHZRz2’</p><p>丢进ipfs（正常的好像工作不了不知道为啥。。。</p><p><img src="/pic/2.png" alt="img"></p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h4 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h4><p>赶时间取巧了 第一个没做</p><p>最后一个为e与phi不互质的情况 取e的因数223与phin求逆元再乘3得d</p><p>倒数第三个为<a href="https://blog.csdn.net/weixin_45369385/article/details/109208109">给定dp情况</a> </p><p>倒数第二个为读代码知e较小且给定多组nc 低加密指数攻击（太懒了就不放代码了</p><h3 id="morethanonce"><a href="#morethanonce" class="headerlink" title="morethanonce"></a>morethanonce</h3><p>一个异或题 先打空格和给定密文异或得首字母必为“C” 推测五个元音，直到异或结果均不为乱码</p><p>得其为CO</p><p>然后单词之间常有空格 补全单词或者用空格异或可解出</p><h3 id="4k-1"><a href="#4k-1" class="headerlink" title="4k+1"></a>4k+1</h3><p>似乎是某种算法？由费马平方和定理知 在某个数是质数的情况下 其为4k+1是其能分解为两数平方和的充要条件 其实应该丢进factordb因式分解的… 但是我试了个网站。。。<img src="/pic/3.png" alt="img">找到pq得解</p><h3 id="Mathematics"><a href="#Mathematics" class="headerlink" title="Mathematics"></a>Mathematics</h3><p>给定ne方程</p><p>消去e 得<img src="/pic/7.png" alt="img"></p><p>因式分解得pq</p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h4 id="十年之约"><a href="#十年之约" class="headerlink" title="十年之约"></a>十年之约</h4><p>当然是手打的了（想方法花的时间可能更多</p><h4 id="must-be-bot"><a href="#must-be-bot" class="headerlink" title="must be bot"></a>must be bot</h4><p>提交第一次后发现post格式</p><p>敲代码提供post文本（需要用到eval函数</p><p>运行八次（因为不会写脚本</p><p><img src="/pic/4.png" alt="img"></p><p><img src="/pic/5.png" alt="img"></p><h2 id="REVERSE-PWN"><a href="#REVERSE-PWN" class="headerlink" title="REVERSE&amp;PWN"></a>REVERSE&amp;PWN</h2><p>笑死完全不会做</p><h3 id="ABSTRACT"><a href="#ABSTRACT" class="headerlink" title="ABSTRACT"></a>ABSTRACT</h3><p>抽象到窒息</p><h4 id="music"><a href="#music" class="headerlink" title="music"></a>music</h4><p>yjzzlzj, cxczlmy 北邮校歌</p><p>严谨在这里铸就 抽象从这里萌芽</p><h4 id="music-revenge"><a href="#music-revenge" class="headerlink" title="music_revenge"></a>music_revenge</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sxnsylmdhx</span><br></code></pre></td></tr></table></figure><p>搜索李诞 歌</p><p>得毛不易歌曲若有缘由最后一句 实现你所有浪漫的幻想</p><h4 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h4><p>人生得意须尽欢莫使金樽空对月</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">😆💲📈🎉<br>😭🍺  🌙<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
      <tag>Web</tag>
      
      <tag>Misc</tag>
      
      <tag>TSCTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
