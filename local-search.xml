<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2024-Hgame-week3-wp-crypto</title>
    <link href="/2024/02/25/2024-Hgame-week3-wp-crypto/"/>
    <url>/2024/02/25/2024-Hgame-week3-wp-crypto/</url>
    
    <content type="html"><![CDATA[<h1 id="2024-Hgame-week3-wp-crypto"><a href="#2024-Hgame-week3-wp-crypto" class="headerlink" title="2024-Hgame-week3-wp-crypto"></a>2024-Hgame-week3-wp-crypto</h1><p>没事干，所以再更一篇吧</p><p>非常坏格密码，使我sagemath旋转</p><h3 id="exRSA"><a href="#exRSA" class="headerlink" title="exRSA"></a>exRSA</h3><p>扩展维纳攻击，其实之前做到维纳攻击的时候有了解过但不深，今天也算是正式了解了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br>m=bytes_to_long(flag)<br>p=getStrongPrime(<span class="hljs-number">1024</span>)<br>q=getStrongPrime(<span class="hljs-number">1024</span>)<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>e1=inverse(getPrime(<span class="hljs-number">768</span>),phi)<br>e2=inverse(getPrime(<span class="hljs-number">768</span>),phi)<br>e3=inverse(getPrime(<span class="hljs-number">768</span>),phi)<br>n=p*q<br>c=<span class="hljs-built_in">pow</span>(m,<span class="hljs-number">0x10001</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e1=<span class="hljs-subst">&#123;e1&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e2=<span class="hljs-subst">&#123;e2&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e3=<span class="hljs-subst">&#123;e3&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c=<span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n=<span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">e1=5077048237811969427473111225370876122528967447056551899123613461792688002896788394304192917610564149766252232281576990293485239684145310876930997918960070816968829150376875953405420809586267153171717496198336861089523701832098322284501931142889817575816761705044951705530849327928849848158643030693363143757063220584714925893965587967042137557807261154117916358519477964645293471975063362050690306353627492980861008439765365837622657977958069853288056307253167509883258122949882277021665317807253308906355670472172346171177267688064959397186926103987259551586627965406979118193485527520976748490728460167949055289539</span><br><span class="hljs-string">e2=12526848298349005390520276923929132463459152574998625757208259297891115133654117648215782945332529081365273860316201130793306570777735076534772168999705895641207535303839455074003057687810381110978320988976011326106919940799160974228311824760046370273505511065619268557697182586259234379239410482784449815732335294395676302226416863709340032987612715151916084291821095462625821023133560415325824885347221391496937213246361736361270846741128557595603052713612528453709948403100711277679641218520429878897565655482086410576379971404789212297697553748292438183065500993375040031733825496692797699362421010271599510269401</span><br><span class="hljs-string">e3=12985940757578530810519370332063658344046688856605967474941014436872720360444040464644790980976991393970947023398357422203873284294843401144065013911463670501559888601145108651961098348250824166697665528417668374408814572959722789020110396245076275553505878565603509466220710219260037783849276475397283421068716088638186994778153542817681963059581651103563578804145156157584336712678882995685632615686853980176047683326974283896343322981521150211317597571554542488921290158122634140571148036732893808064119048328855134054709120877895941670166421664806186710346824494054783025733475898081247824887967550418509038276279</span><br><span class="hljs-string">c=1414176060152301842110497098024597189246259172019335414900127452098233943041825926028517437075316294943355323947458928010556912909139739282924255506647305696872907898950473108556417350199783145349691087255926287363286922011841143339530863300198239231490707393383076174791818994158815857391930802936280447588808440607415377391336604533440099793849237857247557582307391329320515996021820000355560514217505643587026994918588311127143566858036653315985177551963836429728515745646807123637193259859856630452155138986610272067480257330592146135108190083578873094133114440050860844192259441093236787002715737932342847147399</span><br><span class="hljs-string">n=17853303733838066173110417890593704464146824886316456780873352559969742615755294466664439529352718434399552818635352768033531948009737170697566286848710832800426311328560924133698481653594007727877031506265706341560810588064209681809146597572126173303463125668183837840427667101827234752823747483792944536893070188010357644478512143332014786539698535220139784440314481371464053954769822738407808161946943216714729685820896972467020893493349051243983390018762076812868678098172416465691550285372846402991995794349015838868221686216396597327273110165922789814315858462049706255254066724012925815100434953821856854529753</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><a href="https://ctf-wiki.org/crypto/asymmetric/rsa/d_attacks/rsa_extending_wiener/">扩展维纳攻击 - CTF Wiki (ctf-wiki.org)</a></p><p>ctfwiki写的实在很详尽，在此仅贴出构造矩阵和代码。<br>$$<br>L_3&#x3D;\begin{pmatrix}1&amp;-N&amp;0&amp;N^2&amp;0&amp;0&amp;0&amp;-N^3\\<br>0&amp;e_1&amp;-e_1&amp;-Ne_1&amp;-e_1&amp;0&amp;Ne_1&amp;N^2e_1\\<br>0&amp;0&amp;e_2&amp;-Ne_2&amp;0&amp;Ne_2&amp;0&amp;N^2e_2\\<br>0&amp;0&amp;0&amp;e_1e_2&amp;0&amp;-e_1e_2&amp;-e_1e_2&amp;-Ne_1e_2\\<br>0&amp;0&amp;0&amp;0&amp;e_3&amp;-Ne_3&amp;-Ne_3&amp;N^2e_3\\<br>0&amp;0&amp;0&amp;0&amp;0&amp;e_1e_3&amp;0&amp;-Ne_1e_3\\<br>0&amp;0&amp;0&amp;0&amp;0&amp;0&amp;e_2e_3&amp;-Ne_2e_3\\<br>0&amp;0&amp;0&amp;0&amp;0&amp;0&amp;0&amp;e_1e_2e_3\\<br>\end{pmatrix}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br>e1=<span class="hljs-number">5077048237811969427473111225370876122528967447056551899123613461792688002896788394304192917610564149766252232281576990293485239684145310876930997918960070816968829150376875953405420809586267153171717496198336861089523701832098322284501931142889817575816761705044951705530849327928849848158643030693363143757063220584714925893965587967042137557807261154117916358519477964645293471975063362050690306353627492980861008439765365837622657977958069853288056307253167509883258122949882277021665317807253308906355670472172346171177267688064959397186926103987259551586627965406979118193485527520976748490728460167949055289539</span><br>e2=<span class="hljs-number">12526848298349005390520276923929132463459152574998625757208259297891115133654117648215782945332529081365273860316201130793306570777735076534772168999705895641207535303839455074003057687810381110978320988976011326106919940799160974228311824760046370273505511065619268557697182586259234379239410482784449815732335294395676302226416863709340032987612715151916084291821095462625821023133560415325824885347221391496937213246361736361270846741128557595603052713612528453709948403100711277679641218520429878897565655482086410576379971404789212297697553748292438183065500993375040031733825496692797699362421010271599510269401</span><br>e3=<span class="hljs-number">12985940757578530810519370332063658344046688856605967474941014436872720360444040464644790980976991393970947023398357422203873284294843401144065013911463670501559888601145108651961098348250824166697665528417668374408814572959722789020110396245076275553505878565603509466220710219260037783849276475397283421068716088638186994778153542817681963059581651103563578804145156157584336712678882995685632615686853980176047683326974283896343322981521150211317597571554542488921290158122634140571148036732893808064119048328855134054709120877895941670166421664806186710346824494054783025733475898081247824887967550418509038276279</span><br>c=<span class="hljs-number">1414176060152301842110497098024597189246259172019335414900127452098233943041825926028517437075316294943355323947458928010556912909139739282924255506647305696872907898950473108556417350199783145349691087255926287363286922011841143339530863300198239231490707393383076174791818994158815857391930802936280447588808440607415377391336604533440099793849237857247557582307391329320515996021820000355560514217505643587026994918588311127143566858036653315985177551963836429728515745646807123637193259859856630452155138986610272067480257330592146135108190083578873094133114440050860844192259441093236787002715737932342847147399</span><br>N=<span class="hljs-number">17853303733838066173110417890593704464146824886316456780873352559969742615755294466664439529352718434399552818635352768033531948009737170697566286848710832800426311328560924133698481653594007727877031506265706341560810588064209681809146597572126173303463125668183837840427667101827234752823747483792944536893070188010357644478512143332014786539698535220139784440314481371464053954769822738407808161946943216714729685820896972467020893493349051243983390018762076812868678098172416465691550285372846402991995794349015838868221686216396597327273110165922789814315858462049706255254066724012925815100434953821856854529753</span><br><br>a  = <span class="hljs-number">0.374</span><span class="hljs-comment">#731./2049</span><br>M1=N**<span class="hljs-number">0.5</span><br>M2= N **(a+<span class="hljs-number">1</span>)<br>D = diagonal_matrix(ZZ,[N**(<span class="hljs-number">1.5</span>),N,N**(a+<span class="hljs-number">1.5</span>),N**(<span class="hljs-number">0.5</span>),N**(a+<span class="hljs-number">1.5</span>),N **(a+<span class="hljs-number">1</span>),N **(a+<span class="hljs-number">1</span>),<span class="hljs-number">1</span>])<br>M=matrix(ZZ,[[<span class="hljs-number">1</span>,-N, <span class="hljs-number">0</span> ,N**<span class="hljs-number">2</span> , <span class="hljs-number">0</span> ,<span class="hljs-number">0</span>,  <span class="hljs-number">0</span> ,  -N**<span class="hljs-number">3</span>],<br>             [<span class="hljs-number">0</span>,e1,-e1,-e1*N,-e1,<span class="hljs-number">0</span>,N*e1,N**<span class="hljs-number">2</span>*e1],<br>             [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,e2,-e2*N,<span class="hljs-number">0</span>,e2*N,<span class="hljs-number">0</span>,N**<span class="hljs-number">2</span>*e2],<br>             [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,e1*e2,<span class="hljs-number">0</span>,-e1*e2,-e1*e2,-N*e1*e2],<br>             [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,e3,-N*e3,-N*e3,N**<span class="hljs-number">2</span>*e3],<br>             [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,e1*e3,<span class="hljs-number">0</span>,-N*e1*e3],<br>             [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,e2*e3,-N*e2*e3],<br>             [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,e1*e2*e3],])*D<br>L=M.LLL()<br>t=vector(ZZ,L[<span class="hljs-number">0</span>])<br>x=t*M**(-<span class="hljs-number">1</span>)<br>phi = <span class="hljs-built_in">int</span>(x[<span class="hljs-number">1</span>]/x[<span class="hljs-number">0</span>]*e1)<br>d = inverse(<span class="hljs-number">65537</span>,phi)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(c,d,N))))<br></code></pre></td></tr></table></figure><p>据说某些情况LLL跑不出来？并没有深究</p><h3 id="HNP"><a href="#HNP" class="headerlink" title="HNP"></a>HNP</h3><p>题如其名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">m,p,t</span>):<br>    <span class="hljs-keyword">return</span> [(ti*m)%p <span class="hljs-keyword">for</span> ti <span class="hljs-keyword">in</span> t]<br><br>m=bytes_to_long(flag[:<span class="hljs-number">63</span>])<br>length=m.bit_length()+<span class="hljs-number">8</span><br>p=getStrongPrime(length)<br>n=<span class="hljs-number">32</span><br>t=[getRandomRange(<span class="hljs-number">0</span>,p) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>enc=encrypt(m,p,t)<br>res=[i%(<span class="hljs-number">2</span>**n+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> enc]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;p=<span class="hljs-subst">&#123;p&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;t=<span class="hljs-subst">&#123;t&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;res=<span class="hljs-subst">&#123;res&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">p=11306299241774950053269547103284637414407835125777245204069367567691021928864773207548731051592853515206232365901169778048084146520829032339328263913558053</span><br><span class="hljs-string">t=[3322008555255129336821309701482996933045379792432532251579564581211072677403244970423357912298444457457306659801200188166569132560659008356952740599371688, 8276764260264858811845211578415023343942634613522088631021199433066924291049858607045960690574035761370394263154981351728494309737901121703288822616367266, 9872291736922974456420418463601129094227231979218385985149661132792467621940722580745327835405374826293791332815176458750548942757024017382881517284991646, 4021521745142535813153669961146457406640791935844796005344073886289668464885011415887755787903927824762833158130615018326666118383128627535623639046817799, 24569151076141700493541155834378165089870615699969211988778938492838766214386066952596557490584021813819164202001474086538804476667616708172536787956586, 3218501156520848572861458831123822689702035242514803505049101779996231750875036344564322600086861361414609201214822262908428091097382781770850929067404210, 3563405987398375076327633444036492163004958714828685846202818610320439306396912425420391070117069875583786819323173342951172594046652017297552813501557159, 4914709045693863038598225124534515048993310770286105070725513667435983789847547225180024824321458761262390817487861675595466513538901373422149236133926354, 10800566112999947911006702454427389510409658644419749067440812458744391509925306994806187389406032718319773665587324010542068486131582672363925769248595266, 623364920052209790798128731089194813138909691039137935275037339503622126325928773037501254722851684318024014108149525215083265733712809162344553998427324, 4918421097628430613801265525870561041230011029818851291086862970508621529074497601678774921285912745589840510459677522074887576152015356984592589649844431, 7445733357215847370070696136653689748718028080364812263947785747353258936968978183471549706166364243148972154215055224857918834937707555053246184822095602, 9333534755049225627530284249388438694002602645047933865453159836796667198966058177988500184073454386184080934727537200575457598976121667373801441395932440, 5010854803179970445838791575321127911278311635230076639023411571148488903400610121248617307773872612743228998892986200202713496570375447255258630932158822, 6000645068462569819648461070140557521144801013490106632356836325002546400871463957228581143954591005398533252218429970486115490535584071786260818773166324, 8007260909124669381862034901556111245780505987082990804380814797200322228942432673939944693062470178256867366602331612363176408356304641672459456517978560, 10179739175373883376929532026389135792129233730601278687507041429438945598523995700184622359660605910932803141785598758326254886448481046307666042835829725, 8390072767717395701926289779433055672863880336031837009119103448675232362942223633129328309118158273835961567436591234922783953373319767835877266849545292, 7875011911562967874676113680693929230283866841475641162854665293111344467709424408623198370942797099964625447512797138192853009126888853283526034411007513, 5293772811020012501020124775214770193234655210319343058648675411115210453680753070042821835082619634341500680892323002118953557746116918093661769464642068, 2613797279426774540306461931319193657999892129844832159658771717387120246795689678231275371499556522396061591882431426310841974713419974045883021613987705, 9658126012133217804126630005236073513485215390812977974660029053522665282550965040288256074945246850744694519543358777252929661561636241161575937061521711, 2982535220844977621775139406357528876019349385634811795480230677982345697183586203669094998039995683973939721644887543907494963824968042199353945120367505, 107289984878191849357180490850397539311037762262082755398160292401340078782643246498566039415279868796667596686125847400130898160017838981308638814854641, 120993130590874228473811314869823704699012435303134640953201808807618070048912918046616664677916248813062043597607873728870402493717351447905456920806865, 2253040652771796284266254261719805768102740653097446325869783812201171144150768875885963729324915714812719138247784194752636928267712344736198611708630089, 8650007272154283057350664311505887535841268767424545016901418989555620869091145651216448723200240914143882774616678968725523914310965356875681207295242434, 9628747829107584650014156079928108801687158029086221730883999749044532846489666115473993005442192859171931882795973774131309900021287319059216105939670757, 10846936951522093706092027908131679912432689712451920718439096706435533926996215766191967052667966065917006691565771695772798711202812180782901250249613072, 1606865651227988736664127021678689299989045439998336603562232908863405778474520915170766771811336319655792746590981740617823564813573118410064976081989237, 6239063657591721097735049409610872941214078699330136826592958549212481802973973104374548555184907929255031570525343007518434357690480429981016781110249612, 1855365916387114620581029939707053701062476745235578683558063796604744448050278138954359506922875967537567359575662394297579958372107484276360920567730458]</span><br><span class="hljs-string">res=[2150646508, 1512876052, 2420557546, 2504482055, 892924885, 213721693, 2708081441, 1242578136, 717552493, 3210536920, 2868728798, 1873446451, 645647556, 2863150833, 2481560171, 2518043272, 3183116112, 3032464437, 934713925, 470165267, 1104983992, 194502564, 1621769687, 3844589346, 21450588, 2520267465, 2516176644, 3290591307, 3605562914, 140915309, 3690380156, 3646976628]</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>每个enc泄露32位，总共32个enc，要求的m大概在600位左右，是可以求的。</p><p>注意到enc泄露的是低位，所以这么构造<br>$$<br>T_im\equiv D*ENC_i+res_i\quad\text{(mod}p)<br>$$<br>其中$m$是密文，$D&#x3D;2^{32}+1$ ，$ENC_i$是未知高位。</p><p>然后继续构造<br>$$<br>m\equiv T_0^{-1}(D*ENC_0+res_0)\quad\mathrm{(mod}p)<br>$$<br>两个式子联立消m 然后把$ENC_i$提出来<br>$$<br>(DT_0)^{-1}(T_ires_0-T_0res_i)+(T_0^{-1}T_i)ENC_0\equiv ENC_i\quad\text{(mod}p)<br>$$<br>这样子在这个式子中$ENC_0$和$ENC_i$都暴露出来了，换元然后构造矩阵直接格基约化。</p><p>令$D_{i}\equiv(DT_{0})^{-1}(T_{i}res_{0}-T_{0}res_{i})(\mathrm{mod}p),E_{i}\equiv(T_{0}^{-1}T_{i})(\mathrm{mod}p).$</p><p>展开。<br>$$<br>D_i+E_i*ENC_0-k_ip&#x3D;ENC_i<br>$$<br>我草这个元设的真丑吧</p><p>但是我懒得改了</p><p>令$R&#x3D;2^{m-s}$，构造矩阵<br>$$<br>B&#x3D;\begin{bmatrix}-p &amp;  &amp;  &amp;  &amp;  &amp;  &amp;  &amp; \\<br>&amp; -p &amp;  &amp;  &amp;  &amp;  &amp;  &amp; \\<br>&amp;  &amp; \ddots &amp;  &amp;  &amp;  &amp;  &amp; \\<br>&amp;  &amp;  &amp; -p &amp;  &amp;  &amp;  &amp; \\<br>E_1 &amp; E_2 &amp; E_{n-1} &amp;  &amp; 1 &amp;  &amp;  &amp; \\<br>D_1 &amp; D_2 &amp; D_{n-1} &amp;  &amp;  &amp; R &amp;  &amp; \\<br>\end{bmatrix}_{(n+1)*(n+1)}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><br>m = <span class="hljs-number">512</span><br>s = <span class="hljs-number">32</span><br>n = <span class="hljs-number">32</span><br>q=<span class="hljs-number">11306299241774950053269547103284637414407835125777245204069367567691021928864773207548731051592853515206232365901169778048084146520829032339328263913558053</span><br>A=[<span class="hljs-number">3322008555255129336821309701482996933045379792432532251579564581211072677403244970423357912298444457457306659801200188166569132560659008356952740599371688</span>, <span class="hljs-number">8276764260264858811845211578415023343942634613522088631021199433066924291049858607045960690574035761370394263154981351728494309737901121703288822616367266</span>, <span class="hljs-number">9872291736922974456420418463601129094227231979218385985149661132792467621940722580745327835405374826293791332815176458750548942757024017382881517284991646</span>, <span class="hljs-number">4021521745142535813153669961146457406640791935844796005344073886289668464885011415887755787903927824762833158130615018326666118383128627535623639046817799</span>, <span class="hljs-number">24569151076141700493541155834378165089870615699969211988778938492838766214386066952596557490584021813819164202001474086538804476667616708172536787956586</span>, <span class="hljs-number">3218501156520848572861458831123822689702035242514803505049101779996231750875036344564322600086861361414609201214822262908428091097382781770850929067404210</span>, <span class="hljs-number">3563405987398375076327633444036492163004958714828685846202818610320439306396912425420391070117069875583786819323173342951172594046652017297552813501557159</span>, <span class="hljs-number">4914709045693863038598225124534515048993310770286105070725513667435983789847547225180024824321458761262390817487861675595466513538901373422149236133926354</span>, <span class="hljs-number">10800566112999947911006702454427389510409658644419749067440812458744391509925306994806187389406032718319773665587324010542068486131582672363925769248595266</span>, <span class="hljs-number">623364920052209790798128731089194813138909691039137935275037339503622126325928773037501254722851684318024014108149525215083265733712809162344553998427324</span>, <span class="hljs-number">4918421097628430613801265525870561041230011029818851291086862970508621529074497601678774921285912745589840510459677522074887576152015356984592589649844431</span>, <span class="hljs-number">7445733357215847370070696136653689748718028080364812263947785747353258936968978183471549706166364243148972154215055224857918834937707555053246184822095602</span>, <span class="hljs-number">9333534755049225627530284249388438694002602645047933865453159836796667198966058177988500184073454386184080934727537200575457598976121667373801441395932440</span>, <span class="hljs-number">5010854803179970445838791575321127911278311635230076639023411571148488903400610121248617307773872612743228998892986200202713496570375447255258630932158822</span>, <span class="hljs-number">6000645068462569819648461070140557521144801013490106632356836325002546400871463957228581143954591005398533252218429970486115490535584071786260818773166324</span>, <span class="hljs-number">8007260909124669381862034901556111245780505987082990804380814797200322228942432673939944693062470178256867366602331612363176408356304641672459456517978560</span>, <span class="hljs-number">10179739175373883376929532026389135792129233730601278687507041429438945598523995700184622359660605910932803141785598758326254886448481046307666042835829725</span>, <span class="hljs-number">8390072767717395701926289779433055672863880336031837009119103448675232362942223633129328309118158273835961567436591234922783953373319767835877266849545292</span>, <span class="hljs-number">7875011911562967874676113680693929230283866841475641162854665293111344467709424408623198370942797099964625447512797138192853009126888853283526034411007513</span>, <span class="hljs-number">5293772811020012501020124775214770193234655210319343058648675411115210453680753070042821835082619634341500680892323002118953557746116918093661769464642068</span>, <span class="hljs-number">2613797279426774540306461931319193657999892129844832159658771717387120246795689678231275371499556522396061591882431426310841974713419974045883021613987705</span>, <span class="hljs-number">9658126012133217804126630005236073513485215390812977974660029053522665282550965040288256074945246850744694519543358777252929661561636241161575937061521711</span>, <span class="hljs-number">2982535220844977621775139406357528876019349385634811795480230677982345697183586203669094998039995683973939721644887543907494963824968042199353945120367505</span>, <span class="hljs-number">107289984878191849357180490850397539311037762262082755398160292401340078782643246498566039415279868796667596686125847400130898160017838981308638814854641</span>, <span class="hljs-number">120993130590874228473811314869823704699012435303134640953201808807618070048912918046616664677916248813062043597607873728870402493717351447905456920806865</span>, <span class="hljs-number">2253040652771796284266254261719805768102740653097446325869783812201171144150768875885963729324915714812719138247784194752636928267712344736198611708630089</span>, <span class="hljs-number">8650007272154283057350664311505887535841268767424545016901418989555620869091145651216448723200240914143882774616678968725523914310965356875681207295242434</span>, <span class="hljs-number">9628747829107584650014156079928108801687158029086221730883999749044532846489666115473993005442192859171931882795973774131309900021287319059216105939670757</span>, <span class="hljs-number">10846936951522093706092027908131679912432689712451920718439096706435533926996215766191967052667966065917006691565771695772798711202812180782901250249613072</span>, <span class="hljs-number">1606865651227988736664127021678689299989045439998336603562232908863405778474520915170766771811336319655792746590981740617823564813573118410064976081989237</span>, <span class="hljs-number">6239063657591721097735049409610872941214078699330136826592958549212481802973973104374548555184907929255031570525343007518434357690480429981016781110249612</span>, <span class="hljs-number">1855365916387114620581029939707053701062476745235578683558063796604744448050278138954359506922875967537567359575662394297579958372107484276360920567730458</span>]<br>b=[<span class="hljs-number">2150646508</span>, <span class="hljs-number">1512876052</span>, <span class="hljs-number">2420557546</span>, <span class="hljs-number">2504482055</span>, <span class="hljs-number">892924885</span>, <span class="hljs-number">213721693</span>, <span class="hljs-number">2708081441</span>, <span class="hljs-number">1242578136</span>, <span class="hljs-number">717552493</span>, <span class="hljs-number">3210536920</span>, <span class="hljs-number">2868728798</span>, <span class="hljs-number">1873446451</span>, <span class="hljs-number">645647556</span>, <span class="hljs-number">2863150833</span>, <span class="hljs-number">2481560171</span>, <span class="hljs-number">2518043272</span>, <span class="hljs-number">3183116112</span>, <span class="hljs-number">3032464437</span>, <span class="hljs-number">934713925</span>, <span class="hljs-number">470165267</span>, <span class="hljs-number">1104983992</span>, <span class="hljs-number">194502564</span>, <span class="hljs-number">1621769687</span>, <span class="hljs-number">3844589346</span>, <span class="hljs-number">21450588</span>, <span class="hljs-number">2520267465</span>, <span class="hljs-number">2516176644</span>, <span class="hljs-number">3290591307</span>, <span class="hljs-number">3605562914</span>, <span class="hljs-number">140915309</span>, <span class="hljs-number">3690380156</span>, <span class="hljs-number">3646976628</span>]<br>T = <span class="hljs-number">2</span>^s+<span class="hljs-number">1</span><br>Ti = T.inverse_mod(q)<br><span class="hljs-keyword">for</span> choice <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    A0 = A[choice]<br>    S = <span class="hljs-number">2</span>^(m-<span class="hljs-number">1</span>)<br>    b0 = b[choice]<br>    b = [x  <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> b]<br>    A0i = inverse(A[choice],q)<br>    Mt = matrix(ZZ, n+<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>):<br>        Mt[i, i]  = -q<br>        Mt[-<span class="hljs-number">2</span>, i] = A0i*A[i+<span class="hljs-number">1</span>] % q<br>        Mt[-<span class="hljs-number">1</span>, i] = A0i*Ti*(A[i+<span class="hljs-number">1</span>]*b0 - A0*b[i+<span class="hljs-number">1</span>]) % q<br>    Mt[-<span class="hljs-number">2</span>, -<span class="hljs-number">2</span>] = <span class="hljs-number">1</span><br>    R = <span class="hljs-number">2</span>^(m-<span class="hljs-number">19</span>)<br>    Mt[-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>] = R<br>    L = Mt.BKZ(block_size=Mt.rank())<br>    <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> L:<br>        <span class="hljs-keyword">if</span> l[-<span class="hljs-number">1</span>] == R:<br>            B0 = l[-<span class="hljs-number">2</span>]<br>            x0 = (T*B0+b0) * A0i % q<br>            <span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(x0)))<br></code></pre></td></tr></table></figure><h3 id="matrix-equation"><a href="#matrix-equation" class="headerlink" title="matrix_equation"></a><strong>matrix_equation</strong></h3><p>简单的格构造，其实本该想到的，但是笔者一意孤行认为是丢番图方程…</p><p>卡了一会，当然最后还是做出来了。</p><p>简单说说。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> p,q,r<br>k1=getPrime(<span class="hljs-number">256</span>)<br>k2=getPrime(<span class="hljs-number">256</span>)<br>temp=p*<span class="hljs-number">2</span>**<span class="hljs-number">256</span>+q*k1+r*k2<br>hint=<span class="hljs-built_in">len</span>(<span class="hljs-built_in">bin</span>(temp)[<span class="hljs-number">2</span>:])<br>flag=<span class="hljs-string">&#x27;hgame&#123;&#x27;</span>+hashlib.sha256(<span class="hljs-built_in">str</span>(p+q+r).encode()).hexdigest()+<span class="hljs-string">&#x27;&#125;&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;hint=<span class="hljs-subst">&#123;hint&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;k1=<span class="hljs-subst">&#123;k1&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;k2=<span class="hljs-subst">&#123;k2&#125;</span>&#x27;</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">83</span><br><span class="hljs-string">k1=73715329877215340145951238343247156282165705396074786483256699817651255709671</span><br><span class="hljs-string">k2=61361970662269869738270328523897765408443907198313632410068454223717824276837</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>题面很简单，实际上也应该联想到要构造矩阵去做。</p><p>目标是构造矩阵M使得（p,q,r）*M&#x3D;(temp,q,r)，并且(temp,q,r)应为最短向量。</p><p>故可构造<br>$$<br>B&#x3D;\begin{bmatrix}2^{256} &amp; 0 &amp; 0 \\<br>k_1 &amp; 1 &amp; 0  \\<br>k_2 &amp; 0 &amp; 1 \\<br>\end{bmatrix}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve_pqr</span>(<span class="hljs-params">k1,k2</span>):<br>M = matrix(ZZ, [[<span class="hljs-number">2</span>^<span class="hljs-number">256</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],<br>[k1,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],<br>[k2,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]])<br>Msub = M.LLL()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">bin</span>(Msub[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>])))<br>v = M.solve_left(Msub[<span class="hljs-number">0</span>])<br>p, q,r = v[<span class="hljs-number">0</span>], v[<span class="hljs-number">1</span>],v[<span class="hljs-number">2</span>]<br><span class="hljs-keyword">return</span> p, q,r<br>k1=<span class="hljs-number">7371532987721534014595123834324715628216570539607478648325669981765125570967</span><br><span class="hljs-number">1</span><br>k2=<span class="hljs-number">6136197066226986973827032852389776540844390719831363241006845422371782427683</span><br><span class="hljs-number">7</span><br>p,q,r=solve_pqr(k1,k2)<br><span class="hljs-built_in">print</span>(p,q,r)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
      <tag>Web</tag>
      
      <tag>Misc</tag>
      
      <tag>Hgame</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-Hgame-week2-wp-crypto</title>
    <link href="/2024/02/25/2024-Hgame-week2-wp-crypto/"/>
    <url>/2024/02/25/2024-Hgame-week2-wp-crypto/</url>
    
    <content type="html"><![CDATA[<h1 id="2024-Hgame-week2-wp-crypto"><a href="#2024-Hgame-week2-wp-crypto" class="headerlink" title="2024-Hgame-week2-wp-crypto"></a>2024-Hgame-week2-wp-crypto</h1><p>奇怪的图片plus很有意思。</p><h3 id="midRSA"><a href="#midRSA" class="headerlink" title="midRSA"></a><strong>midRSA</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br>m=bytes_to_long(flag)<br>p=getPrime(<span class="hljs-number">1024</span>)<br>q=getPrime(<span class="hljs-number">1024</span>)<br>e=<span class="hljs-number">5</span><br>n=p*q<br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br>m0=m&gt;&gt;<span class="hljs-number">128</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n=<span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c=<span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;m0=<span class="hljs-subst">&#123;m0&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">n=27814334728135671995890378154778822687713875269624843122353458059697288888640572922486287556431241786461159513236128914176680497775619694684903498070577307810263677280294114135929708745988406963307279767028969515305895207028282193547356414827419008393701158467818535109517213088920890236300281646288761697842280633285355376389468360033584102258243058885174812018295460196515483819254913183079496947309574392848378504246991546781252139861876509894476420525317251695953355755164789878602945615879965709871975770823484418665634050103852564819575756950047691205355599004786541600213204423145854859214897431430282333052121</span><br><span class="hljs-string">c=456221314115867088638207203034494636244706611111621723577848729096069230067958132663018625661447131501758684502639383208332844681939698124459188571813527149772292464139530736717619741704945926075632064072125361516435631121845753186559297993355270779818057702973783391589851159114029310296551701456748698914231344835187917559305440269560613326893204748127999254902102919605370363889581136724164096879573173870280806620454087466970358998654736755257023225078147018537101</span><br><span class="hljs-string">m0=9999900281003357773420310681169330823266532533803905637</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br></code></pre></td></tr></table></figure><p>一眼coppersmith，没什么好说的，真要说这里也装不下（</p><p>直接上脚本了</p><p>sagemath是个好东西</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><br><br>n=<span class="hljs-number">27814334728135671995890378154778822687713875269624843122353458059697288888640572922486287556431241786461159513236128914176680497775619694684903498070577307810263677280294114135929708745988406963307279767028969515305895207028282193547356414827419008393701158467818535109517213088920890236300281646288761697842280633285355376389468360033584102258243058885174812018295460196515483819254913183079496947309574392848378504246991546781252139861876509894476420525317251695953355755164789878602945615879965709871975770823484418665634050103852564819575756950047691205355599004786541600213204423145854859214897431430282333052121</span><br>c=<span class="hljs-number">456221314115867088638207203034494636244706611111621723577848729096069230067958132663018625661447131501758684502639383208332844681939698124459188571813527149772292464139530736717619741704945926075632064072125361516435631121845753186559297993355270779818057702973783391589851159114029310296551701456748698914231344835187917559305440269560613326893204748127999254902102919605370363889581136724164096879573173870280806620454087466970358998654736755257023225078147018537101</span><br>m0=<span class="hljs-number">9999900281003357773420310681169330823266532533803905637</span><br>m = m0&lt;&lt;<span class="hljs-number">128</span><br><br>PR.&lt;x&gt; = PolynomialRing(Zmod(n))<br>f = (m + x)^<span class="hljs-number">5</span> - c<br>f = f.monic()<br>roots = f.small_roots(X = <span class="hljs-number">2</span>^<span class="hljs-number">128</span>,beta = <span class="hljs-number">0.4</span>)<br><br>m = m + <span class="hljs-built_in">int</span>(roots[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><br></code></pre></td></tr></table></figure><h3 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag,e<br>m=bytes_to_long(flag)<br>p=getPrime(<span class="hljs-number">64</span>)<br>q=getPrime(<span class="hljs-number">256</span>)<br>n=p**<span class="hljs-number">4</span>*q<br>k=getPrime(<span class="hljs-number">16</span>)<br>gift=<span class="hljs-built_in">pow</span>(e+<span class="hljs-number">114514</span>+p**k,<span class="hljs-number">0x10001</span>,p)<br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;p=<span class="hljs-subst">&#123;p&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;q=<span class="hljs-subst">&#123;q&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c=<span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;gift=<span class="hljs-subst">&#123;gift&#125;</span>&#x27;</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">p=14213355454944773291</span><br><span class="hljs-string">q=61843562051620700386348551175371930486064978441159200765618339743764001033297</span><br><span class="hljs-string">c=105002138722466946495936638656038214000043475751639025085255113965088749272461906892586616250264922348192496597986452786281151156436229574065193965422841</span><br><span class="hljs-string">gift=9751789326354522940</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br></code></pre></td></tr></table></figure><p>这一题我是爆破出的e，但实际上稍微想一想，用逆元是完全可以做的。</p><p>但是从时间角度考虑的话，用爆破也无可厚非，但是关键的是要想到如果e大到没法爆破该怎么办，所以还是学一学为好。</p><h5 id=""><a href="#" class="headerlink" title=""></a></h5><p>众所周知$e$和$p$互素，那么有<br>$$<br>e^{p-1} \equiv 1 \quad(\bmod p)<br>$$<br>那么就有一种可能使得<br>$$<br>e^{65537x} \equiv e \quad(\bmod p)<br>$$<br>此时$65537x&#x3D;1+k(p-1)$</p><p>这个形式很接近逆元的形式 转换一下 $65537x&#x3D;1(\bmod p-1)$</p><p>65537对$p-1$求逆元就可以了</p><p>（题解里面为什么会对phi求逆元呢，虽然也是对的但是不明白思路</p><p>然后就是一个域下开高次根，比较模板</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br>p=<span class="hljs-number">14213355454944773291</span><br>q=<span class="hljs-number">61843562051620700386348551175371930486064978441159200765618339743764001033297</span><br>c=<span class="hljs-number">105002138722466946495936638656038214000043475751639025085255113965088749272461906892586616250264922348192496597986452786281151156436229574065193965422841</span><br>phi=p^<span class="hljs-number">3</span>*(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>gift=<span class="hljs-number">9751789326354522940</span><br>d1=inverse(<span class="hljs-number">0x10001</span>,p-<span class="hljs-number">1</span>)<br>e=<span class="hljs-built_in">pow</span>(gift,d1,p)-<span class="hljs-number">114514</span><br>n=p^<span class="hljs-number">4</span>*q<br>K=Zmod(n)<br>x=K(c).nth_root(e,<span class="hljs-built_in">all</span>=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(x):<br>m=long_to_bytes(<span class="hljs-built_in">int</span>(i))<br><span class="hljs-keyword">if</span> <span class="hljs-string">b&quot;hgame&quot;</span> <span class="hljs-keyword">in</span> m:<br><span class="hljs-built_in">print</span>(m)<br><span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h3 id="Backpack"><a href="#Backpack" class="headerlink" title="Backpack"></a>Backpack</h3><p>一个构造LLL的背包密码题，比较模板，不多赘述</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> hashlib<br><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>c = <span class="hljs-number">1202548196826013899006527314947</span><br>a = [<span class="hljs-number">74763079510261699126345525979</span>, <span class="hljs-number">51725049470068950810478487507</span>, <span class="hljs-number">47190309269514609005045330671</span>, <span class="hljs-number">64955989640650139818348214927</span>, <span class="hljs-number">68559937238623623619114065917</span>, <span class="hljs-number">72311339170112185401496867001</span>, <span class="hljs-number">70817336064254781640273354039</span>, <span class="hljs-number">70538108826539785774361605309</span>, <span class="hljs-number">43782530942481865621293381023</span>, <span class="hljs-number">58234328186578036291057066237</span>, <span class="hljs-number">68808271265478858570126916949</span>, <span class="hljs-number">61660200470938153836045483887</span>, <span class="hljs-number">63270726981851544620359231307</span>, <span class="hljs-number">42904776486697691669639929229</span>, <span class="hljs-number">41545637201787531637427603339</span>, <span class="hljs-number">74012839055649891397172870891</span>, <span class="hljs-number">56943794795641260674953676827</span>, <span class="hljs-number">51737391902187759188078687453</span>, <span class="hljs-number">49264368999561659986182883907</span>, <span class="hljs-number">60044221237387104054597861973</span>, <span class="hljs-number">63847046350260520761043687817</span>, <span class="hljs-number">62128146699582180779013983561</span>, <span class="hljs-number">65109313423212852647930299981</span>, <span class="hljs-number">66825635869831731092684039351</span>, <span class="hljs-number">67763265147791272083780752327</span>, <span class="hljs-number">61167844083999179669702601647</span>, <span class="hljs-number">55116015927868756859007961943</span>, <span class="hljs-number">52344488518055672082280377551</span>, <span class="hljs-number">52375877891942312320031803919</span>, <span class="hljs-number">69659035941564119291640404791</span>, <span class="hljs-number">52563282085178646767814382889</span>, <span class="hljs-number">56810627312286420494109192029</span>, <span class="hljs-number">49755877799006889063882566549</span>, <span class="hljs-number">43858901672451756754474845193</span>, <span class="hljs-number">67923743615154983291145624523</span>, <span class="hljs-number">51689455514728547423995162637</span>, <span class="hljs-number">67480131151707155672527583321</span>, <span class="hljs-number">59396212248330580072184648071</span>, <span class="hljs-number">63410528875220489799475249207</span>, <span class="hljs-number">48011409288550880229280578149</span>, <span class="hljs-number">62561969260391132956818285937</span>, <span class="hljs-number">44826158664283779410330615971</span>, <span class="hljs-number">70446218759976239947751162051</span>, <span class="hljs-number">56509847379836600033501942537</span>, <span class="hljs-number">50154287971179831355068443153</span>, <span class="hljs-number">49060507116095861174971467149</span>, <span class="hljs-number">54236848294299624632160521071</span>, <span class="hljs-number">64186626428974976108467196869</span>]<br>n = <span class="hljs-built_in">len</span>(a)<br>L = Matrix(ZZ, n+<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    L[i,i] = <span class="hljs-number">2</span><br>    L[i,-<span class="hljs-number">1</span>] = a[i]<br>    L[-<span class="hljs-number">1</span>,i] = <span class="hljs-number">1</span><br>L[-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>] = c<br><br>res = L.LLL()<br>a = <span class="hljs-built_in">list</span>(res[<span class="hljs-number">0</span>])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    <span class="hljs-keyword">if</span> a[i] == -<span class="hljs-number">1</span>:<br>        a[i] = <span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(a)<br><br><br>a = <span class="hljs-number">0b111101000010110101010001010011000111000100100001</span><br>n = <span class="hljs-number">0</span><br>alist = [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<br>anum=[<span class="hljs-number">74763079510261699126345525979</span>, <span class="hljs-number">51725049470068950810478487507</span>, <span class="hljs-number">47190309269514609005045330671</span>, <span class="hljs-number">64955989640650139818348214927</span>, <span class="hljs-number">68559937238623623619114065917</span>, <span class="hljs-number">72311339170112185401496867001</span>, <span class="hljs-number">70817336064254781640273354039</span>, <span class="hljs-number">70538108826539785774361605309</span>, <span class="hljs-number">43782530942481865621293381023</span>, <span class="hljs-number">58234328186578036291057066237</span>, <span class="hljs-number">68808271265478858570126916949</span>, <span class="hljs-number">61660200470938153836045483887</span>, <span class="hljs-number">63270726981851544620359231307</span>, <span class="hljs-number">42904776486697691669639929229</span>, <span class="hljs-number">41545637201787531637427603339</span>, <span class="hljs-number">74012839055649891397172870891</span>, <span class="hljs-number">56943794795641260674953676827</span>, <span class="hljs-number">51737391902187759188078687453</span>, <span class="hljs-number">49264368999561659986182883907</span>, <span class="hljs-number">60044221237387104054597861973</span>, <span class="hljs-number">63847046350260520761043687817</span>, <span class="hljs-number">62128146699582180779013983561</span>, <span class="hljs-number">65109313423212852647930299981</span>, <span class="hljs-number">66825635869831731092684039351</span>, <span class="hljs-number">67763265147791272083780752327</span>, <span class="hljs-number">61167844083999179669702601647</span>, <span class="hljs-number">55116015927868756859007961943</span>, <span class="hljs-number">52344488518055672082280377551</span>, <span class="hljs-number">52375877891942312320031803919</span>, <span class="hljs-number">69659035941564119291640404791</span>, <span class="hljs-number">52563282085178646767814382889</span>, <span class="hljs-number">56810627312286420494109192029</span>, <span class="hljs-number">49755877799006889063882566549</span>, <span class="hljs-number">43858901672451756754474845193</span>, <span class="hljs-number">67923743615154983291145624523</span>, <span class="hljs-number">51689455514728547423995162637</span>, <span class="hljs-number">67480131151707155672527583321</span>, <span class="hljs-number">59396212248330580072184648071</span>, <span class="hljs-number">63410528875220489799475249207</span>, <span class="hljs-number">48011409288550880229280578149</span>, <span class="hljs-number">62561969260391132956818285937</span>, <span class="hljs-number">44826158664283779410330615971</span>, <span class="hljs-number">70446218759976239947751162051</span>, <span class="hljs-number">56509847379836600033501942537</span>, <span class="hljs-number">50154287971179831355068443153</span>, <span class="hljs-number">49060507116095861174971467149</span>, <span class="hljs-number">54236848294299624632160521071</span>, <span class="hljs-number">64186626428974976108467196869</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">48</span>):<br>    n+=alist[i]*anum[i]<br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(a))<br>flag=<span class="hljs-string">&#x27;hgame&#123;&#x27;</span>+hashlib.sha256(<span class="hljs-built_in">str</span>(a).encode()).hexdigest()+<span class="hljs-string">&#x27;&#125;&#x27;</span><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>#但是我就是想问为什么这么做啊？</p><p>详见《格理论与密码学》5.3.4 基于格的背包密码学分析，笔者水平有限 T-T</p><h3 id="奇怪的图片plus"><a href="#奇怪的图片plus" class="headerlink" title="奇怪的图片plus"></a>奇怪的图片plus</h3><p>这也是hgame2024四周以来做出人数最少的密码题</p><p>题目太长，抓不到重点，笔者也是反反复复看了四天才发现破解方法，其实没有什么技术上的难度，只不过是思路不好把握。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#client.py</span><br><span class="hljs-keyword">import</span> websocket <span class="hljs-comment"># pip install websocket-client</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image <span class="hljs-comment"># pip install pillow</span><br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">import</span> threading<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">image_to_bytes</span>(<span class="hljs-params">image</span>):<br>    width, height = image.size<br>    pixel_bytes = []<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>            pixel = image.getpixel((x, y))<br>            pixel_bytes.extend(struct.pack(<span class="hljs-string">&#x27;BBB&#x27;</span>, *pixel))<br>    image_bytes = <span class="hljs-built_in">bytes</span>(pixel_bytes)<br>    <span class="hljs-keyword">return</span> image_bytes<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_input</span>(<span class="hljs-params">ws</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            message = <span class="hljs-built_in">input</span>()<br>            <span class="hljs-keyword">if</span> message.lower() == <span class="hljs-string">&#x27;exit&#x27;</span>:<br>                ws.close()<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">elif</span> message.lower() == <span class="hljs-string">&#x27;help&#x27;</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;send_img: send_img &lt;path_to_img_1&gt; &lt;path_to_img_2&gt;&quot;</span>)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;check: check&quot;</span>)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;help: help&quot;</span>)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;exit: exit&quot;</span>)<br>            <span class="hljs-keyword">elif</span> message[:<span class="hljs-number">8</span>] == <span class="hljs-string">&#x27;send_img&#x27;</span>:<br>                <span class="hljs-keyword">try</span>:<br>                    pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;\s(.*?)\s(.*?)$&#x27;</span>)<br>                    <span class="hljs-keyword">match</span> = pattern.search(message)<br>                    <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>:<br>                        path_1 = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>)<br>                        path_2 = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>)<br>                        image_1 = Image.<span class="hljs-built_in">open</span>(path_1)<br>                        image_2 = Image.<span class="hljs-built_in">open</span>(path_2)<br>                        ws.send_binary(<span class="hljs-string">b&quot;B1&quot;</span> + image_1.width.to_bytes(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;big&quot;</span>) + image_1.height.to_bytes(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;big&quot;</span>) + image_to_bytes(image_1))<br>                        ws.send_binary(<span class="hljs-string">b&quot;B2&quot;</span> + image_2.width.to_bytes(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;big&quot;</span>) + image_2.height.to_bytes(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;big&quot;</span>) + image_to_bytes(image_2))<br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-keyword">raise</span> FileNotFoundError(<span class="hljs-string">&quot;Command format error&quot;</span>)<br>                <span class="hljs-keyword">except</span> FileNotFoundError <span class="hljs-keyword">as</span> err:<br>                    <span class="hljs-built_in">print</span>(err)<br>            <span class="hljs-keyword">elif</span> message == <span class="hljs-string">&#x27;check&#x27;</span>:<br>                ws.send_binary(<span class="hljs-string">b&quot;B3&quot;</span>)<br>    <span class="hljs-keyword">except</span> websocket.WebSocketException <span class="hljs-keyword">as</span> err:<br>        <span class="hljs-built_in">print</span>(err)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_recv</span>(<span class="hljs-params">ws</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            msg = ws.recv()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Msg from server: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(msg))<br>    <span class="hljs-keyword">except</span> websocket.WebSocketException <span class="hljs-keyword">as</span> err:<br>        <span class="hljs-built_in">print</span>(err)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># uri = &quot;ws://localhost:10002&quot;</span><br>    uri = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;input uri: &quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;type &#x27;help&#x27; to get help&quot;</span>)<br>    ws = websocket.create_connection(uri)<br>    input_thread = threading.Thread(target=handle_input, args=(ws,), daemon=<span class="hljs-literal">True</span>)<br>    recv_thread = threading.Thread(target=handle_recv, args=(ws,), daemon=<span class="hljs-literal">True</span>)<br>    recv_thread.start()<br>    input_thread.start()<br>    recv_thread.join()<br>    input_thread.join()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#encryption.py</span><br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, ImageFont, ImageDraw<br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">import</span> random<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">image_to_bytes</span>(<span class="hljs-params">image</span>):<br>    width, height = image.size<br>    pixel_bytes = []<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>            pixel = image.getpixel((x, y))<br>            pixel_bytes.extend(struct.pack(<span class="hljs-string">&#x27;BBB&#x27;</span>, *pixel))<br>    image_bytes = <span class="hljs-built_in">bytes</span>(pixel_bytes)<br>    <span class="hljs-keyword">return</span> image_bytes<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bytes_to_image</span>(<span class="hljs-params">image_bytes, width, height</span>):<br>    pixel_bytes = <span class="hljs-built_in">list</span>(image_bytes)<br>    reconstructed_image = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>, (width, height))<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>            start = (y * width + x) * <span class="hljs-number">3</span><br>            pixel = struct.unpack(<span class="hljs-string">&#x27;BBB&#x27;</span>, <span class="hljs-built_in">bytes</span>(pixel_bytes[start:start + <span class="hljs-number">3</span>]))<br>            reconstructed_image.putpixel((x, y), pixel)<br>    <span class="hljs-keyword">return</span> reconstructed_image<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">draw_text</span>(<span class="hljs-params">image, width, height, token</span>):<br>    font_size = <span class="hljs-number">20</span><br>    font = ImageFont.truetype(<span class="hljs-string">&quot;arial.ttf&quot;</span>, font_size)<br>    text_color = (<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>)<br>    x = <span class="hljs-number">0</span><br>    y = (height // <span class="hljs-number">2</span>) - <span class="hljs-number">10</span><br>    draw = ImageDraw.Draw(image)<br>    draw.text((x, y), token, font=font, fill=text_color)<br>    pixels = image.load()<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>            <span class="hljs-keyword">if</span> pixels[x, y] != (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>):<br>                pixels[x, y] = (random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>), random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>), random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>))<br>    <span class="hljs-keyword">return</span> image<br><br><br>flag = <span class="hljs-string">&quot;hgame&#123;fake_flag&#125;&quot;</span><br>flag_image = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>, (<span class="hljs-number">200</span>, <span class="hljs-number">150</span>), <span class="hljs-string">&quot;black&quot;</span>)<br>flag_image = draw_text(flag_image, <span class="hljs-number">200</span>, <span class="hljs-number">150</span>, flag[<span class="hljs-number">6</span>:-<span class="hljs-number">1</span>])<br>key = os.urandom(<span class="hljs-number">16</span>) <span class="hljs-comment"># gift</span><br>iv = os.urandom(<span class="hljs-number">16</span>)<br>F = AES.new(key=key, mode=AES.MODE_OFB, iv=iv)<br>m = pad(image_to_bytes(flag_image), F.block_size)<br>c = F.encrypt(m)<br>encrypted_image = bytes_to_image(c, <span class="hljs-number">200</span>, <span class="hljs-number">150</span>)<br>encrypted_image.save(<span class="hljs-string">&quot;encrypted_flag.png&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#server.py</span><br><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> websockets<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><br><br>gift = <span class="hljs-string">b&#x27;&#x27;</span>.<span class="hljs-built_in">hex</span>() <span class="hljs-comment"># hide here</span><br>pos_list = [] <span class="hljs-comment"># hide here</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bytes_to_image</span>(<span class="hljs-params">image_bytes, width, height</span>):<br>    pixel_bytes = <span class="hljs-built_in">list</span>(image_bytes)<br>    reconstructed_image = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>, (width, height))<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>            start = (y * width + x) * <span class="hljs-number">3</span><br>            pixel = struct.unpack(<span class="hljs-string">&#x27;BBB&#x27;</span>, <span class="hljs-built_in">bytes</span>(pixel_bytes[start:start + <span class="hljs-number">3</span>]))<br>            reconstructed_image.putpixel((x, y), pixel)<br>    <span class="hljs-keyword">return</span> reconstructed_image<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor_images</span>(<span class="hljs-params">image1, image2</span>):<br>    <span class="hljs-keyword">if</span> image1.size != image2.size:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Images must have the same dimensions&quot;</span>)<br>    xor_image = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>, image1.size)<br>    pixels1 = image1.load()<br>    pixels2 = image2.load()<br>    xor_pixels = xor_image.load()<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.size[<span class="hljs-number">0</span>]):<br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.size[<span class="hljs-number">1</span>]):<br>            r1, g1, b1 = pixels1[x, y]<br>            r2, g2, b2 = pixels2[x, y]<br>            xor_pixels[x, y] = (r1 ^ r2, g1 ^ g2, b1 ^ b2)<br>    <span class="hljs-keyword">return</span> xor_image<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_pixels</span>(<span class="hljs-params">image, positions</span>):<br>    pixels = image.load()<br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image.size[<span class="hljs-number">0</span>]):<br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image.size[<span class="hljs-number">1</span>]):<br>            <span class="hljs-keyword">if</span> (x, y) <span class="hljs-keyword">in</span> positions:<br>                <span class="hljs-keyword">if</span> pixels[x, y] != (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>):<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> pixels[x, y] == (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>):<br>                    count += <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">if</span> count == <span class="hljs-number">10</span>:<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_client</span>(<span class="hljs-params">websocket</span>):<br>    <span class="hljs-keyword">await</span> websocket.send(<span class="hljs-string">&quot;Pls send two images that meet the following conditions&quot;</span>)<br>    <span class="hljs-keyword">await</span> websocket.send(<span class="hljs-string">&quot;The black pixels in &#x27;xor_images(image_1, image_2)&#x27; should match those in &#x27;target&#x27;&quot;</span>)<br>    <span class="hljs-keyword">await</span> websocket.send(<span class="hljs-string">&quot;Note: The server has scaling function during validation! XD&quot;</span>)<br>    image_1, image_2 = <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br>    image_1_w, image_1_h, image_2_w, image_2_h = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">for</span> message_raw <span class="hljs-keyword">in</span> websocket:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> message_raw[:<span class="hljs-number">2</span>] == <span class="hljs-string">b&quot;B1&quot;</span>:<br>                image_1_w = <span class="hljs-built_in">int</span>.from_bytes(message_raw[<span class="hljs-number">2</span>:<span class="hljs-number">6</span>], <span class="hljs-string">&quot;big&quot;</span>)<br>                image_1_h = <span class="hljs-built_in">int</span>.from_bytes(message_raw[<span class="hljs-number">6</span>:<span class="hljs-number">10</span>], <span class="hljs-string">&quot;big&quot;</span>)<br>                image_1 = message_raw[<span class="hljs-number">6</span>:]<br>                <span class="hljs-keyword">await</span> websocket.send(<span class="hljs-string">&quot;Image_1 received&quot;</span>)<br>            <span class="hljs-keyword">elif</span> message_raw[:<span class="hljs-number">2</span>] == <span class="hljs-string">b&quot;B2&quot;</span>:<br>                image_2_w = <span class="hljs-built_in">int</span>.from_bytes(message_raw[<span class="hljs-number">2</span>:<span class="hljs-number">6</span>], <span class="hljs-string">&quot;big&quot;</span>)<br>                image_2_h = <span class="hljs-built_in">int</span>.from_bytes(message_raw[<span class="hljs-number">6</span>:<span class="hljs-number">10</span>], <span class="hljs-string">&quot;big&quot;</span>)<br>                image_2 = message_raw[<span class="hljs-number">6</span>:]<br>                <span class="hljs-keyword">await</span> websocket.send(<span class="hljs-string">&quot;Image_2 received&quot;</span>)<br>            <span class="hljs-keyword">elif</span> message_raw[:<span class="hljs-number">2</span>] == <span class="hljs-string">b&quot;B3&quot;</span>:<br>                <span class="hljs-keyword">if</span> image_1 <span class="hljs-keyword">and</span> image_2:<br>                    F = AES.new(key=os.urandom(<span class="hljs-number">16</span>), mode=AES.MODE_ECB)<br>                    image_1_encrypted = bytes_to_image(F.encrypt(pad(image_1, F.block_size)), image_1_w, image_1_h)<br>                    image_2_encrypted = bytes_to_image(F.encrypt(pad(image_2, F.block_size)), image_2_w, image_2_h)<br>                    xor_image = xor_images(image_1_encrypted, image_2_encrypted)<br>                    xor_image = xor_image.resize((<span class="hljs-number">16</span>, <span class="hljs-number">9</span>), Image.NEAREST)<br>                    xor_image.show()<br>                    <span class="hljs-keyword">if</span> check_pixels(xor_image, pos_list):<br>                        <span class="hljs-keyword">await</span> websocket.send(<span class="hljs-string">&quot;Here is your gift: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(gift))<br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-keyword">await</span> websocket.send(<span class="hljs-string">&quot;Verification failed&quot;</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">await</span> websocket.send(<span class="hljs-string">&quot;Pls send two images first!!&quot;</span>)<br>        <span class="hljs-keyword">except</span> ValueError <span class="hljs-keyword">as</span> err:<br>            <span class="hljs-keyword">await</span> websocket.send(err)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    server = <span class="hljs-keyword">await</span> websockets.serve(handle_client, <span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">10002</span>)<br>    <span class="hljs-keyword">await</span> server.wait_closed()<br><br><br>asyncio.run(main())<br><br></code></pre></td></tr></table></figure><p>到底要让我们干什么呢？</p><p>上传两张图片给服务器，服务器会先AES-ECB加密两张图片，然后异或两张加密图片(指异或图片的像素)，最后把得到的图片恢复成16*9，如果这张图片中的黑色像素和target.png完全对应，那么就会给你一个在encryption.py中用到的key，最后用这个key去破解flag。</p><p>突破点是什么？</p><p>其实看来看去，没有什么地方不严谨，最有问题的地方就是用了ecb分块，那就试试从ecb分块入手。</p><p>如果是ecb分块的话，那就意味着原始图片中相同的块加密的结果一定相同，它采用16字节分块，也就意味着每5个像素又一个字节为一组。</p><p>如果是异或图片，那最后的异或结果其实只能是黑色，其他颜色都是不可控的，这也在题目中有所提示，只要求黑色像素对应。</p><p>仔细揣摩一番我们会发现，若想让位置不同但颜⾊相同的像素在加密后都得到相同的结果，我们就要把一个像素扩大为至少六个像素(16个字节)，所以只要上传扩大到800*9的纯黑色图片和同样扩大之后的target.png，经过服务器的resize()，就可以拿到key。</p><p>（贴个官方解吧，我的脚本不见了）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, ImageDraw<br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor</span>(<span class="hljs-params">a, b</span>):<br>result = <span class="hljs-built_in">bytes</span>(x ^ y <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a, b))<br><span class="hljs-keyword">return</span> result<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor_images</span>(<span class="hljs-params">image1, image2</span>):<br><span class="hljs-keyword">if</span> image1.size != image2.size:<br><span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Images must have the same dimensions.&quot;</span>)<br>    xor_image = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>, image1.size)<br>    pixels1 = image1.load()<br>    pixels2 = image2.load()<br>    xor_pixels = xor_image.load()<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.size[<span class="hljs-number">0</span>]):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.size[<span class="hljs-number">1</span>]):<br>    r1, g1, b1 = pixels1[x, y]<br>    r2, g2, b2 = pixels2[x, y]<br>    xor_pixels[x, y] = (r1 ^ r2, g1 ^ g2, b1 ^ b2)<br>    <span class="hljs-keyword">return</span> xor_image<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">image_to_bytes</span>(<span class="hljs-params">image</span>):<br>    width, height = image.size<br>    pixel_bytes = []<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>    pixel = image.getpixel((x, y))<br>    pixel_bytes.extend(struct.pack(<span class="hljs-string">&#x27;BBB&#x27;</span>, *pixel))<br>    image_bytes = <span class="hljs-built_in">bytes</span>(pixel_bytes)<br>    <span class="hljs-keyword">return</span> image_bytes<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bytes_to_image</span>(<span class="hljs-params">image_bytes, width, height</span>):<br>pixel_bytes = <span class="hljs-built_in">list</span>(image_bytes)<br>reconstructed_image = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>, (width, height))<br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>start = (y * width + x) * <span class="hljs-number">3</span><br>pixel = struct.unpack(<span class="hljs-string">&#x27;BBB&#x27;</span>, <span class="hljs-built_in">bytes</span>(pixel_bytes[start:start + <span class="hljs-number">3</span>]))<br>reconstructed_image.putpixel((x, y), pixel)<br><span class="hljs-keyword">return</span> reconstructed_image<br><span class="hljs-comment"># black pixels in target.png</span><br>pos_list = [(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">5</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">6</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">7</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">1</span>),<br>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">5</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">6</span>), (<span class="hljs-number">4</span>,<br><span class="hljs-number">7</span>), (<span class="hljs-number">6</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">6</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">6</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">6</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">6</span>, <span class="hljs-number">5</span>), (<span class="hljs-number">6</span>, <span class="hljs-number">6</span>), (<span class="hljs-number">6</span>, <span class="hljs-number">7</span>), (<span class="hljs-number">7</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">7</span>, <span class="hljs-number">4</span>),<br>(<span class="hljs-number">7</span>, <span class="hljs-number">7</span>), (<span class="hljs-number">8</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">8</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">8</span>, <span class="hljs-number">7</span>), (<span class="hljs-number">9</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">9</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">9</span>, <span class="hljs-number">7</span>), (<span class="hljs-number">11</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">11</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">11</span>,<br><span class="hljs-number">7</span>), (<span class="hljs-number">12</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">12</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">12</span>, <span class="hljs-number">7</span>), (<span class="hljs-number">13</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">13</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">13</span>, <span class="hljs-number">7</span>), (<span class="hljs-number">14</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">14</span>, <span class="hljs-number">5</span>),<br>(<span class="hljs-number">14</span>, <span class="hljs-number">6</span>)]<br>image_1 = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>, (<span class="hljs-number">16</span>, <span class="hljs-number">9</span>), <span class="hljs-string">&quot;black&quot;</span>)<br>image_2 = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>, (<span class="hljs-number">16</span>, <span class="hljs-number">9</span>), <span class="hljs-string">&quot;white&quot;</span>)<br>draw_1 = ImageDraw.Draw(image_1)<br>draw_2 = ImageDraw.Draw(image_2)<br><span class="hljs-keyword">for</span> pos <span class="hljs-keyword">in</span> pos_list:<br>draw_1.point(pos, (<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>))<br>draw_2.point(pos, (<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>))<br>image_1 = image_1.resize((<span class="hljs-number">48</span> * <span class="hljs-number">16</span>, <span class="hljs-number">48</span> * <span class="hljs-number">9</span>), Image.NEAREST)<br>image_2 = image_2.resize((<span class="hljs-number">48</span> * <span class="hljs-number">16</span>, <span class="hljs-number">48</span> * <span class="hljs-number">9</span>), Image.NEAREST)<br>image_1.save(<span class="hljs-string">&quot;image_1.png&quot;</span>)<br>image_2.save(<span class="hljs-string">&quot;image_2.png&quot;</span>)<br></code></pre></td></tr></table></figure><p>Msg from server: Here is your gift: 8693346e81fa05d8817fd2550455cdf6</p><p>第二步就相对简单很多</p><p><img src="/pic/10.png" alt="img"></p><p>由ofb模式我们发现，我们已知部分明文，那么将明文前16字节和密文前16字节异或就是加密一次的iv向量，且key已知，我们就有办法解密出原始的iv向量。</p><p>还是上官方解，，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor</span>(<span class="hljs-params">a, b</span>):<br>    result = <span class="hljs-built_in">bytes</span>(x ^ y <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a, b))<br>    <span class="hljs-keyword">return</span> result<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">image_to_bytes</span>(<span class="hljs-params">image</span>):<br>    width, height = image.size<br>    pixel_bytes = []<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>    pixel = image.getpixel((x, y))<br>    pixel_bytes.extend(struct.pack(<span class="hljs-string">&#x27;BBB&#x27;</span>, *pixel))<br>    image_bytes = <span class="hljs-built_in">bytes</span>(pixel_bytes)<br>    <span class="hljs-keyword">return</span> image_bytes<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bytes_to_image</span>(<span class="hljs-params">image_bytes, width, height</span>):<br>    pixel_bytes = <span class="hljs-built_in">list</span>(image_bytes)<br>    reconstructed_image = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>, (width, height))<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>    start = (y * width + x) * <span class="hljs-number">3</span><br>    pixel = struct.unpack(<span class="hljs-string">&#x27;BBB&#x27;</span>, <span class="hljs-built_in">bytes</span>(pixel_bytes[start:start + <span class="hljs-number">3</span>]))<br>    reconstructed_image.putpixel((x, y), pixel)<br>    <span class="hljs-keyword">return</span> reconstructed_image<br>key = <span class="hljs-string">b&#x27;\x86\x934n\x81\xfa\x05\xd8\x81\x7f\xd2U\x04U\xcd\xf6&#x27;</span> <span class="hljs-comment"># gift</span><br>encrypted_image = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;encrypted_flag.png&quot;</span>)<br>c = image_to_bytes(encrypted_image)<br>iv_ = xor(c[:<span class="hljs-number">16</span>], <span class="hljs-string">b&quot;\x00&quot;</span> * <span class="hljs-number">16</span>)<br>F = AES.new(key=key, mode=AES.MODE_OFB, iv=iv_)<br>m_ = F.decrypt(c[<span class="hljs-number">16</span>:])<br>bytes_to_image((<span class="hljs-string">b&quot;\x00&quot;</span> * <span class="hljs-number">16</span>) + m_, <span class="hljs-number">200</span>, <span class="hljs-number">150</span>).show()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
      <tag>Web</tag>
      
      <tag>Misc</tag>
      
      <tag>Hgame</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-Hgame-week1-wp-crypto</title>
    <link href="/2024/02/25/2024-Hgame-week1-wp-crypto/"/>
    <url>/2024/02/25/2024-Hgame-week1-wp-crypto/</url>
    
    <content type="html"><![CDATA[<h1 id="2024-Hgame-week1-wp-crypto"><a href="#2024-Hgame-week1-wp-crypto" class="headerlink" title="2024-Hgame-week1-wp-crypto"></a>2024-Hgame-week1-wp-crypto</h1><p>简单写写。</p><h3 id="ezRSA"><a href="#ezRSA" class="headerlink" title="ezRSA"></a>ezRSA</h3><p>题目描述：一个简单的RSA</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br>m=bytes_to_long(flag)<br>p=getPrime(<span class="hljs-number">1024</span>)<br>q=getPrime(<span class="hljs-number">1024</span>)<br>n=p*q<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>e=<span class="hljs-number">0x10001</span><br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br>leak1=<span class="hljs-built_in">pow</span>(p,q,n)<br>leak2=<span class="hljs-built_in">pow</span>(q,p,n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;leak1=<span class="hljs-subst">&#123;leak1&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;leak2=<span class="hljs-subst">&#123;leak2&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c=<span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">leak1=149127170073611271968182576751290331559018441805725310426095412837589227670757540743929865853650399839102838431507200744724939659463200158012469676979987696419050900842798225665861812331113632892438742724202916416060266581590169063867688299288985734104127632232175657352697898383441323477450658179727728908669</span><br><span class="hljs-string">leak2=116122992714670915381309916967490436489020001172880644167179915467021794892927977272080596641785569119134259037522388335198043152206150259103485574558816424740204736215551933482583941959994625356581201054534529395781744338631021423703171146456663432955843598548122593308782245220792018716508538497402576709461</span><br><span class="hljs-string">c=10529481867532520034258056773864074017027019578041866245400647840230251661652999709715919620810933437191661180003295923273655675729588558899592524235622728816065501918076120812236580344991140980991532347991252705288633014913479970610056845543523591324177567061948922552275235486615514913932125436543991642607028689762693617305246716492783116813070355512606971626645594961850567586340389705821314842096465631886812281289843132258131809773797777049358789182212570606252509790830994263132020094153646296793522975632191912463919898988349282284972919932761952603379733234575351624039162440021940592552768579639977713099971</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>$p$和$q$互素，所以由费马小定理<br>$$<br>p^{q-1} \equiv 1 \quad(\bmod q)<br>$$<br>转化一下。<br>$$<br>p^{q} \equiv p \quad(\bmod pq)<br>$$<br>所以leak1&#x3D;p， leak2&#x3D;q.</p><p>比较简单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>leak1=<span class="hljs-number">1491271700736112719681825767512903315590184418057253104260954128375892276</span><br><span class="hljs-number">7075754074392986585365039983910283843150720074472493965946320015801246967697998</span><br><span class="hljs-number">7696419050900842798225665861812331113632892438742724202916416060266581590169063</span><br><span class="hljs-number">867688299288985734104127632232175657352697898383441323477450658179727728908669</span><br>leak2=<span class="hljs-number">1161229927146709153813099169674904364890200011728806441671799154670217948</span><br><span class="hljs-number">9292797727208059664178556911913425903752238833519804315220615025910348557455881</span><br><span class="hljs-number">6424740204736215551933482583941959994625356581201054534529395781744338631021423</span><br><span class="hljs-number">703171146456663432955843598548122593308782245220792018716508538497402576709461</span><br>c=<span class="hljs-number">10529481867532520034258056773864074017027019578041866245400647840230251661652</span><br><span class="hljs-number">9997097159196208109334371916611800032959232736556757295885588995925242356227288</span><br><span class="hljs-number">1606550191807612081223658034499114098099153234799125270528863301491347997061005</span><br><span class="hljs-number">6845543523591324177567061948922552275235486615514913932125436543991642607028689</span><br><span class="hljs-number">7626936173052467164927831168130703555126069716266455949618505675863403897058213</span><br><span class="hljs-number">1484209646563188681228128984313225813180977379777704935878918221257060625250979</span><br>0830994263132020094153646296793522975632191912463919898988349282284972919932761<br><span class="hljs-number">952603379733234575351624039162440021940592552768579639977713099971</span><br>n=leak1*leak2<br>phi=(leak1-<span class="hljs-number">1</span>)*(leak2-<span class="hljs-number">1</span>)<br>d=inverse(<span class="hljs-number">0x10001</span>,phi)<br>flag=long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,n))<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h3 id="ezMath"><a href="#ezMath" class="headerlink" title="ezMath"></a>ezMath</h3><p>题目描述：一个简单的数学题</p><p>pell方程与连分数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> random,string<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag,y,x<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pad</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x+<span class="hljs-string">b&#x27;\x00&#x27;</span>*(<span class="hljs-number">16</span>-<span class="hljs-built_in">len</span>(x)%<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">KEY</span>):<br>    cipher= AES.new(KEY,AES.MODE_ECB)<br>    encrypted =cipher.encrypt(flag)<br>    <span class="hljs-keyword">return</span> encrypted<br>D = <span class="hljs-number">114514</span><br><span class="hljs-keyword">assert</span> x**<span class="hljs-number">2</span> - D * y**<span class="hljs-number">2</span> == <span class="hljs-number">1</span><br>flag=pad(flag)<br>key=pad(long_to_bytes(y))[:<span class="hljs-number">16</span>]<br>enc=encrypt(key)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;enc=<span class="hljs-subst">&#123;enc&#125;</span>&#x27;</span>)<br><span class="hljs-comment">#enc=b&quot;\xce\xf1\x94\x84\xe9m\x88\x04\xcb\x9ad\x9e\x08b\xbf\x8b\xd3\r\xe2\x81\x17g\x9c\xd7\x10\x19\x1a\xa6\xc3\x9d\xde\xe7\xe0h\xed/\x00\x95tz)1\\\t8:\xb1,U\xfe\xdec\xf2h\xab`\xe5&#x27;\x93\xf8\xde\xb2\x9a\x9a&quot;</span><br></code></pre></td></tr></table></figure><p>引用一下oiwiki。</p><p><a href="https://oi-wiki.org/math/number-theory/pell-equation/">Pell 方程 - OI Wiki (oi-wiki.org)</a></p><p>定理：记 $x^{2}-D y^{2}&#x3D;s$。如果有$|s|&lt;\sqrt{D}$，则$\frac{x}{y}$ 一定是$\sqrt{D}$的渐进分数。</p><p>证明：分情况讨论。</p><p>当$s&gt;0$时，根据，$x^{2}-D y^{2}&gt;0$，有$x&gt;y\sqrt{D}$。并且有<br>$$<br>\begin{aligned}\left|\frac xy-\sqrt{D}\right|&amp;&#x3D;\frac s{y(x+y\sqrt{D})}&lt;\frac s{2y^2\sqrt{D}}&lt;\frac1{2y^2}\end{aligned}<br>$$<br>此时根据勒让德判别法，$\frac{x}{y}$是$\sqrt{D}$的渐进分数。</p><p>#怎么判别的？</p><p><img src="/pic/8.png" alt="img"></p><p>摘自《公钥密码学的数学基础》。</p><p>所以直接在sagemath跑连分数即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br>enc=<span class="hljs-string">b&quot;\xce\xf1\x94\x84\xe9m\x88\x04\xcb\x9ad\x9e\x08b\xbf\x8b\xd3\r\xe2\x81\x17</span><br><span class="hljs-string">g\x9c\xd7\x10\x19\x1a\xa6\xc3\x9d\xde\xe7\xe0h\xed/\x00\x95tz)1\\\t8:\xb1,U\xfe</span><br><span class="hljs-string">\xdec\xf2h\xab`\xe5&#x27;\x93\xf8\xde\xb2\x9a\x9a&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve_pell</span>(<span class="hljs-params">N, num = <span class="hljs-number">100</span></span>):<br>c = continued_fraction(sqrt(N))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>y = c.denominator(i)<br>x = c.numerator(i)<br><span class="hljs-keyword">if</span> x^<span class="hljs-number">2</span> - N * y^<span class="hljs-number">2</span> == <span class="hljs-number">1</span>:<br><span class="hljs-keyword">return</span> x, y<br><span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pad</span>(<span class="hljs-params">x</span>):<br><span class="hljs-keyword">return</span> x+<span class="hljs-string">b&#x27;\x00&#x27;</span>*((<span class="hljs-number">16</span>-<span class="hljs-built_in">len</span>(x))%<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">KEY</span>):<br>cipher= AES.new(KEY,AES.MODE_ECB)<br>flag =cipher.decrypt(enc)<br><span class="hljs-keyword">return</span> flag<br>N = <span class="hljs-number">114514</span><br>x,y=solve_pell(N)<br><span class="hljs-built_in">print</span>(x,y)<br>y=pad(long_to_bytes(y))[:<span class="hljs-number">16</span>]<br>flag=decrypt(y)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h3 id="ezPRNG"><a href="#ezPRNG" class="headerlink" title="ezPRNG"></a>ezPRNG</h3><p>题目描述：一个简单的随机数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">PRNG</span>(<span class="hljs-params">R,mask</span>):<br>    nextR = (R &lt;&lt; <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xffffffff</span><br>    i=(R&amp;mask)&amp;<span class="hljs-number">0xffffffff</span><br>    nextbit=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i!=<span class="hljs-number">0</span>:<br>        nextbit^=(i%<span class="hljs-number">2</span>)<br>        i=i//<span class="hljs-number">2</span><br>    nextR^=nextbit <br>    <span class="hljs-keyword">return</span> (nextR,nextbit)<br><br>R=<span class="hljs-built_in">str</span>(uuid.uuid4())<br>flag=<span class="hljs-string">&#x27;hgame&#123;&#x27;</span>+R+<span class="hljs-string">&#x27;&#125;&#x27;</span><br><span class="hljs-built_in">print</span>(flag)<br>R=R.replace(<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>Rlist=[<span class="hljs-built_in">int</span>(R[i*<span class="hljs-number">8</span>:i*<span class="hljs-number">8</span>+<span class="hljs-number">8</span>],<span class="hljs-number">16</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br><br>mask=<span class="hljs-number">0b10001001000010000100010010001001</span><br>output=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    R=Rlist[i]<br>    out=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>        (R,nextbit)=PRNG(R,mask)<br>        out+=<span class="hljs-built_in">str</span>(nextbit)<br>    output.append(out)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;output=<span class="hljs-subst">&#123;output&#125;</span>&#x27;</span>)<br><span class="hljs-comment">#output=[&#xx27;, &#xx27;, &#xx27;, &#xx27;]</span><br></code></pre></td></tr></table></figure><p><a href="https://www.anquanke.com/post/id/181811">深入分析CTF中的LFSR类题目（一）-安全客 - 安全资讯平台 (anquanke.com)</a></p><p>几乎是原题。</p><p>上面的链接其实讲的很清楚了hh，我就不东施效颦了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>output=[<span class="hljs-string">&#xx27;</span>, <span class="hljs-string">&#xx27;</span>, <span class="hljs-string">&#xx27;</span>, <span class="hljs-string">&#xx27;</span>]<br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    R = <span class="hljs-string">&#x27;&#x27;</span><br>    key=(output[j])[:<span class="hljs-number">32</span>]<br>    temp=key<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        out = <span class="hljs-string">&#x27;?&#x27;</span>+key[:<span class="hljs-number">31</span>]<br>        ans=<span class="hljs-built_in">int</span>(temp[-<span class="hljs-number">1</span>-i])^<span class="hljs-built_in">int</span>(out[-<span class="hljs-number">1</span>])^<span class="hljs-built_in">int</span>(out[-<span class="hljs-number">4</span>])^<span class="hljs-built_in">int</span>(out[-<span class="hljs-number">8</span>])^<span class="hljs-built_in">int</span>(out[-<span class="hljs-number">11</span>])^<span class="hljs-built_in">int</span>(out[-<span class="hljs-number">15</span>])^<span class="hljs-built_in">int</span>(out[-<span class="hljs-number">20</span>])^<span class="hljs-built_in">int</span>(out[-<span class="hljs-number">25</span>])^<span class="hljs-built_in">int</span>(out[-<span class="hljs-number">28</span>])<br>        R += <span class="hljs-built_in">str</span>(ans)<br>        key = <span class="hljs-built_in">str</span>(ans) + key[:<span class="hljs-number">31</span>]<br>    R = <span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(R[::-<span class="hljs-number">1</span>],<span class="hljs-number">2</span>),<span class="hljs-string">&#x27;x&#x27;</span>)<br>    flag+=R<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hgame&#123;&#x27;</span>+flag+<span class="hljs-string">&#x27;&#125;&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="奇怪的图片"><a href="#奇怪的图片" class="headerlink" title="奇怪的图片"></a>奇怪的图片</h3><p>这题挺有意思，包括后面那个奇怪的图片plus，我觉得都很好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, ImageDraw, ImageFont<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> secrets<br><br><br>flag = <span class="hljs-string">&quot;hgame&#123;fake_flag&#125;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_random_image</span>(<span class="hljs-params">width, height</span>):<br>    image = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>, (width, height), <span class="hljs-string">&quot;white&quot;</span>)<br>    pixels = image.load()<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>            red = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)<br>            green = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)<br>            blue = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)<br>            pixels[x, y] = (red, green, blue)<br>    <span class="hljs-keyword">return</span> image<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">draw_text</span>(<span class="hljs-params">image, width, height, token</span>):<br>    font_size = random.randint(<span class="hljs-number">16</span>, <span class="hljs-number">40</span>)<br>    font = ImageFont.truetype(<span class="hljs-string">&quot;arial.ttf&quot;</span>, font_size)<br>    text_color = (random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>), random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>), random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>))<br>    x = random.randint(<span class="hljs-number">0</span>, width - font_size * <span class="hljs-built_in">len</span>(token))<br>    y = random.randint(<span class="hljs-number">0</span>, height - font_size)<br>    draw = ImageDraw.Draw(image)<br>    draw.text((x, y), token, font=font, fill=text_color)<br>    <span class="hljs-keyword">return</span> image<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor_images</span>(<span class="hljs-params">image1, image2</span>):<br>    <span class="hljs-keyword">if</span> image1.size != image2.size:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Images must have the same dimensions.&quot;</span>)<br>    xor_image = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>, image1.size)<br>    pixels1 = image1.load()<br>    pixels2 = image2.load()<br>    xor_pixels = xor_image.load()<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.size[<span class="hljs-number">0</span>]):<br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.size[<span class="hljs-number">1</span>]):<br>            r1, g1, b1 = pixels1[x, y]<br>            r2, g2, b2 = pixels2[x, y]<br>            xor_pixels[x, y] = (r1 ^ r2, g1 ^ g2, b1 ^ b2)<br>    <span class="hljs-keyword">return</span> xor_image<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_unique_strings</span>(<span class="hljs-params">n, length</span>):<br>    unique_strings = <span class="hljs-built_in">set</span>()<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(unique_strings) &lt; n:<br>        random_string = secrets.token_hex(length // <span class="hljs-number">2</span>)<br>        unique_strings.add(random_string)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(unique_strings)<br><br><br>random_strings = generate_unique_strings(<span class="hljs-built_in">len</span>(flag), <span class="hljs-number">8</span>)<br><br><br>current_image = generate_random_image(<span class="hljs-number">120</span>, <span class="hljs-number">80</span>)<br>key_image = generate_random_image(<span class="hljs-number">120</span>, <span class="hljs-number">80</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">random_time</span>(<span class="hljs-params">image, name</span>):<br>    time.sleep(random.random())<br>    image.save(<span class="hljs-string">&quot;.\\png_out\\&#123;&#125;.png&quot;</span>.<span class="hljs-built_in">format</span>(name))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>    current_image = draw_text(current_image, <span class="hljs-number">120</span>, <span class="hljs-number">80</span>, flag[i])<br>    threading.Thread(target=random_time, args=(xor_images(current_image, key_image), random_strings[i])).start()<br><br></code></pre></td></tr></table></figure><p>大概意思就是</p><p>一张图片，写上一个字，和未知的图片异或，输出。</p><p>然后这张写上一个字的图片，再写上一个字，再和未知图片异或，输出。</p><p>以此类推。</p><p>所以想破解就把一张图片和其他所有图片异或，观察字母的增减即可得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, ImageDraw, ImageFont<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> secrets<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor_images</span>(<span class="hljs-params">image1, image2</span>):<span class="hljs-comment">#图片异或？</span><br>    <span class="hljs-keyword">if</span> image1.size != image2.size:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Images must have the same dimensions.&quot;</span>)<br>    xor_image = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>, image1.size)<br>    pixels1 = image1.load()<br>    pixels2 = image2.load()<br>    xor_pixels = xor_image.load()<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.size[<span class="hljs-number">0</span>]):<br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.size[<span class="hljs-number">1</span>]):<br>            r1, g1, b1 = pixels1[x, y]<br>            r2, g2, b2 = pixels2[x, y]<br>            xor_pixels[x, y] = (r1 ^ r2, g1 ^ g2, b1 ^ b2)<br>    <span class="hljs-keyword">return</span> xor_image<br><span class="hljs-built_in">list</span> = []<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;2.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;3.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;4.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;5.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;6.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;7.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;8.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;9.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;10.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;11.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;12.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;13.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;14.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;15.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;16.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;17.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;18.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;19.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;20.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;21.png&#x27;</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">21</span>):<br>    xor_images(<span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>],<span class="hljs-built_in">list</span>[i]).save(<span class="hljs-string">&quot;1+&quot;</span>+<span class="hljs-built_in">str</span>(i+<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;.png&quot;</span>)<br></code></pre></td></tr></table></figure><p>这段代码就是一张图片和其他所有图片异或。</p><p>大概效果</p><p><img src="/pic/9.png" alt="img"></p><p>然后找出顺序，前后彼此异或，就能看到flag了，可能是反的，应该看的出来吧（</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, ImageDraw, ImageFont<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> secrets<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor_images</span>(<span class="hljs-params">image1, image2</span>):<span class="hljs-comment">#图片异或？</span><br>    <span class="hljs-keyword">if</span> image1.size != image2.size:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Images must have the same dimensions.&quot;</span>)<br>    xor_image = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>, image1.size)<br>    pixels1 = image1.load()<br>    pixels2 = image2.load()<br>    xor_pixels = xor_image.load()<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.size[<span class="hljs-number">0</span>]):<br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.size[<span class="hljs-number">1</span>]):<br>            r1, g1, b1 = pixels1[x, y]<br>            r2, g2, b2 = pixels2[x, y]<br>            xor_pixels[x, y] = (r1 ^ r2, g1 ^ g2, b1 ^ b2)<br>    <span class="hljs-keyword">return</span> xor_image<br><span class="hljs-built_in">list</span> = []<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;2.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;3.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;4.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;5.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;6.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;7.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;8.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;9.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;10.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;11.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;12.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;13.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;14.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;15.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;16.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;17.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;18.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;19.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;20.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;21.png&#x27;</span>))<br>numlist = [<span class="hljs-number">14</span>,<span class="hljs-number">11</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">8</span>,<span class="hljs-number">17</span>,<span class="hljs-number">5</span>,<span class="hljs-number">18</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>,<span class="hljs-number">16</span>,<span class="hljs-number">13</span>,<span class="hljs-number">19</span>,<span class="hljs-number">12</span>,<span class="hljs-number">9</span>,<span class="hljs-number">21</span>,<span class="hljs-number">15</span>,<span class="hljs-number">20</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>    xor_images(<span class="hljs-built_in">list</span>[numlist[i]-<span class="hljs-number">1</span>],<span class="hljs-built_in">list</span>[numlist[i+<span class="hljs-number">1</span>]-<span class="hljs-number">1</span>]).save(<span class="hljs-built_in">str</span>(numlist[i])+<span class="hljs-string">&quot;+&quot;</span>+<span class="hljs-built_in">str</span>(numlist[i+<span class="hljs-number">1</span>])+<span class="hljs-string">&quot;.png&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
      <tag>Web</tag>
      
      <tag>Misc</tag>
      
      <tag>Hgame</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录</title>
    <link href="/2024/02/24/%E6%9C%80%E8%BF%91/"/>
    <url>/2024/02/24/%E6%9C%80%E8%BF%91/</url>
    
    <content type="html"><![CDATA[<h1 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h1><p>本篇放一点碎碎念吧，太久没更新了，本文置顶。</p><h4 id="2024-2-24"><a href="#2024-2-24" class="headerlink" title="2024&#x2F;2&#x2F;24"></a>2024&#x2F;2&#x2F;24</h4><p>尝试hexoplusplus未能成功，发现hpp的时间可能还超过了静态部署的时间，故放弃了。</p><p>假期前雄心壮志地想写博客，但是也没人看啊，加上我自己也很懒，就没有写。</p><p>决定在这两周内给博客上个评论的功能。</p><p>预期会在hgame week4后更新一篇hgame crypto writeup。</p><h4 id="2024-2-25"><a href="#2024-2-25" class="headerlink" title="2024&#x2F;2&#x2F;25"></a>2024&#x2F;2&#x2F;25</h4><p>简单上个twikoo</p><p>决定把hgame分成四篇 这样推送会好看一些（XD</p><p>拙劣模仿一下我很喜欢的一个密码手的博客</p><p>更新了2024-Hgame-week1-wp-crypto</p><p>最近要出道适中难度的题目，，</p><p>更新了2024-Hgame-week2-wp-crypto</p><p>更新了2024-Hgame-week3-wp-crypto</p>]]></content>
    
    
    
    <tags>
      
      <tag>live</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IEEE754协议之非数NaN——从一道活动题讲起</title>
    <link href="/2023/10/14/IEEE754%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%9D%9E%E6%95%B0NaN%E2%80%94%E2%80%94%E4%BB%8E%E4%B8%80%E9%81%93%E6%B4%BB%E5%8A%A8%E9%A2%98%E8%AE%B2%E8%B5%B7/"/>
    <url>/2023/10/14/IEEE754%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%9D%9E%E6%95%B0NaN%E2%80%94%E2%80%94%E4%BB%8E%E4%B8%80%E9%81%93%E6%B4%BB%E5%8A%A8%E9%A2%98%E8%AE%B2%E8%B5%B7/</url>
    
    <content type="html"><![CDATA[<h4 id="事情要从一道北邮百团大战的娱乐题讲起…"><a href="#事情要从一道北邮百团大战的娱乐题讲起…" class="headerlink" title="事情要从一道北邮百团大战的娱乐题讲起…."></a>事情要从一道北邮百团大战的娱乐题讲起….</h4><p><img src="/pic/1.png" alt="img"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> random<br>password = random.random()<br>val = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (val &gt; password) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> (val &lt; password):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome to my blog&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Access denied&quot;</span>)<br></code></pre></td></tr></table></figure><p>当时我心想，娱乐题而已，应该很简单吧，结果就是做了一个下午没想出来…</p><p>中途有过多种尝试…但是还是不行…</p><p>最后纯真学长告诉我去看ieee754，我这才幡然醒悟…</p><p>实在是符合我对百团活动脑筋急转弯的刻板印象，令人感叹。</p><p>引以为戒，另外网上对于NaN的资料比较零散，我的第一篇博客就献给ieee754吧。</p><p>作者水平有限，多多包涵。XD</p><h4 id="IEEE754是什么？"><a href="#IEEE754是什么？" class="headerlink" title="IEEE754是什么？"></a>IEEE754是什么？</h4><p>简而言之，IEEE754是一种用于二进制浮点数运算的标准，它定义了浮点数的表示方法、运算规则和格式。是美国电子和电气工程师协会（Institute of Electrical and Electronics Engineers，简称IEEE）制定的。</p><p>我们今天的主角NaN(not a number)非数，就来自于IEEE754。</p><p>IEEE 754标准定义了两种主要的浮点数格式：</p><ol><li>单精度（单精度浮点数）：使用32位二进制位表示一个浮点数，其中1位表示符号（正数或负数），8位表示指数（指数部分），剩下的23位表示尾数（尾数部分）。</li><li>双精度（双精度浮点数）：使用64位二进制位表示一个浮点数，其中1位表示符号，11位表示指数，剩下的52位表示尾数。</li></ol><p>关于IEEE754的移码，真值等详细规则，网上的大牛们已经写的很好了，我就不复制粘贴了…</p><p><a href="https://blog.csdn.net/weixin_47713503/article/details/108699001">clickme</a></p><h4 id="NaN是什么？"><a href="#NaN是什么？" class="headerlink" title="NaN是什么？"></a>NaN是什么？</h4><p>NaN是未定义或无法表示的数据类型的特定值。</p><p>例如0&#x2F;0通常无定义，就可以用NaN来表示。</p><p>实数域内负数平方根无解，负数对数结果复杂，反余弦&#x2F;正弦定义域小于-1或大于1，亦可用NaN表示。</p><p>正负无穷大，NaN参与计算时，计算结果常常用NaN来表示。</p><p>众所周知，两个实数之间只有小于，大于，等于三种可能关系，但是一旦一个操作数为NaN时，就必须引入所谓的<strong>无序</strong>关系。</p><p>下面给出NaN与任何浮点值，NaN，正负无穷的比较。</p><table><thead><tr><th align="center">比较</th><th align="left">NaN≥ x</th><th align="left">NaN ≤ <em>x</em></th><th>NaN &gt; <em>x</em></th><th>NaN &gt; <em>x</em></th><th>NaN &#x3D; <em>x</em></th><th>NaN ≠ <em>x</em></th></tr></thead><tbody><tr><td align="center">结果</td><td align="left">False</td><td align="left">False</td><td>False</td><td>False</td><td>False</td><td>True</td></tr></tbody></table><p>显然，这道脑筋急转弯就利用了NaN与任何数做大小比较都为False的特性。</p><p>同理，在IEEE754中，NaN也是唯一一个自身不等于自身的“数”，唯一一个不等于任何数的数，需注意，与常规数学定义不同的是，float“inf“（即无穷大）也等于自身。</p><p><strong>所以这题的答案即为NaN。</strong></p><p>一道知识面题，会的会，不会的不会，令人感叹。</p><p>下面给出INF（无穷大）的比较。</p><table><thead><tr><th align="center">比较</th><th>INF&gt;&#x3D;x(x≠INF)</th><th>INF&lt;&#x3D;x(x≠INF)</th><th>INF&gt;x(x≠INF)</th><th>INF&lt;x(x≠INF)</th><th>INF&#x3D;x(x≠INF)</th><th align="left">INF≠x(x≠INF)</th></tr></thead><tbody><tr><td align="center">结果</td><td>True</td><td>False</td><td>True</td><td>False</td><td>False</td><td align="left">True</td></tr><tr><td align="center">比较</td><td>INF&gt;&#x3D;INF</td><td>INF&lt;&#x3D;INF</td><td>INF&gt;INF</td><td>INF&lt;INF</td><td>INF&#x3D;INF</td><td align="left">INF≠INF</td></tr><tr><td align="center">结果</td><td>True</td><td>True</td><td>False</td><td>False</td><td>True</td><td align="left">False</td></tr></tbody></table><p><strong>持续写作，欢迎关注。</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
      <tag>Misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PYTHOK的writeup TSCTF-J 2023</title>
    <link href="/2023/09/25/PYTHOK%E7%9A%84writeup%20TSCTF-J%202023/"/>
    <url>/2023/09/25/PYTHOK%E7%9A%84writeup%20TSCTF-J%202023/</url>
    
    <content type="html"><![CDATA[<h1 id="PYTHOK的writeup-TSCTF-J-2023"><a href="#PYTHOK的writeup-TSCTF-J-2023" class="headerlink" title="PYTHOK的writeup TSCTF-J 2023"></a>PYTHOK的writeup TSCTF-J 2023</h1><p>本篇wp包括但不限于：</p><p>很菜很菜的密码技术 很守规矩的misc&#x2F;web 绞尽脑汁都想不出来的abstract 等等等等</p><p>感谢各位crypto大佬的狠狠鞭策 </p><p>明天还要上课实在没有时间 粗略写写wp 还望各位佬见谅qwq</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h4 id="尊嘟假嘟"><a href="#尊嘟假嘟" class="headerlink" title="尊嘟假嘟"></a>尊嘟假嘟</h4><p>听题目所给mp3音频，推测应为摩斯密码</p><p>丢进au看频谱图!<img src="/pic/6.png" alt="img"></p><p>打出摩斯密码转译</p><h4 id="异世相遇"><a href="#异世相遇" class="headerlink" title="异世相遇"></a>异世相遇</h4><h6 id=""><a href="#" class="headerlink" title=""></a></h6><p>看图知ifs国金中心 原神</p><p>搜索关键词得该活动地点位于长沙 角色为提那里 科莱（不玩原神真的知道吗</p><h4 id="白夜"><a href="#白夜" class="headerlink" title="白夜"></a>白夜</h4><p>等24小时（虔诚</p><p>似乎有什么修改器？但我不会（</p><h4 id="Violet"><a href="#Violet" class="headerlink" title="Violet"></a>Violet</h4><p>由<a href="https://www.cnblogs.com/xihui/p/11712662.html">hint</a>知其为纠错码</p><p>1到25换算为二进制 为1的就是对应的纠错码</p><p>比如23对应16+4+2+1即为10111说明16 4 2 1即为其纠错码</p><p>搓代码</p><p>但是不会写脚本 所以就手搓了100个…</p><h4 id="get-the-file-on-blockchain"><a href="#get-the-file-on-blockchain" class="headerlink" title="get the file on blockchain"></a>get the file on blockchain</h4><p>ipfs题 新东西的应用</p><p>将所给cid转码为base58</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base58<br>base58.b58encode_int(<span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;1220eb82ecca07c85628a9e6a56a76d6d2c18c93998a727a95c332ca09148a27cccb&quot;</span>, <span class="hljs-number">16</span>))<br></code></pre></td></tr></table></figure><p>运行结果为b’QmeBzJtRrENPMbsXmueBpA6KB9wgsioRPwLF3WVMdHZRz2’</p><p>丢进ipfs（正常的好像工作不了不知道为啥。。。</p><p><img src="/pic/2.png" alt="img"></p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h4 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h4><p>赶时间取巧了 第一个没做</p><p>最后一个为e与phi不互质的情况 取e的因数223与phin求逆元再乘3得d</p><p>倒数第三个为<a href="https://blog.csdn.net/weixin_45369385/article/details/109208109">给定dp情况</a> </p><p>倒数第二个为读代码知e较小且给定多组nc 低加密指数攻击（太懒了就不放代码了</p><h3 id="morethanonce"><a href="#morethanonce" class="headerlink" title="morethanonce"></a>morethanonce</h3><p>一个异或题 先打空格和给定密文异或得首字母必为“C” 推测五个元音，直到异或结果均不为乱码</p><p>得其为CO</p><p>然后单词之间常有空格 补全单词或者用空格异或可解出</p><h3 id="4k-1"><a href="#4k-1" class="headerlink" title="4k+1"></a>4k+1</h3><p>似乎是某种算法？由费马平方和定理知 在某个数是质数的情况下 其为4k+1是其能分解为两数平方和的充要条件 其实应该丢进factordb因式分解的… 但是我试了个网站。。。<img src="/pic/3.png" alt="img">找到pq得解</p><h3 id="Mathematics"><a href="#Mathematics" class="headerlink" title="Mathematics"></a>Mathematics</h3><p>给定ne方程</p><p>消去e 得<img src="/pic/7.png" alt="img"></p><p>因式分解得pq</p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h4 id="十年之约"><a href="#十年之约" class="headerlink" title="十年之约"></a>十年之约</h4><p>当然是手打的了（想方法花的时间可能更多</p><h4 id="must-be-bot"><a href="#must-be-bot" class="headerlink" title="must be bot"></a>must be bot</h4><p>提交第一次后发现post格式</p><p>敲代码提供post文本（需要用到eval函数</p><p>运行八次（因为不会写脚本</p><p><img src="/pic/4.png" alt="img"></p><p><img src="/pic/5.png" alt="img"></p><h2 id="REVERSE-PWN"><a href="#REVERSE-PWN" class="headerlink" title="REVERSE&amp;PWN"></a>REVERSE&amp;PWN</h2><p>笑死完全不会做</p><h3 id="ABSTRACT"><a href="#ABSTRACT" class="headerlink" title="ABSTRACT"></a>ABSTRACT</h3><p>抽象到窒息</p><h4 id="music"><a href="#music" class="headerlink" title="music"></a>music</h4><p>yjzzlzj, cxczlmy 北邮校歌</p><p>严谨在这里铸就 抽象从这里萌芽</p><h4 id="music-revenge"><a href="#music-revenge" class="headerlink" title="music_revenge"></a>music_revenge</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sxnsylmdhx</span><br></code></pre></td></tr></table></figure><p>搜索李诞 歌</p><p>得毛不易歌曲若有缘由最后一句 实现你所有浪漫的幻想</p><h4 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h4><p>人生得意须尽欢莫使金樽空对月</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">😆💲📈🎉<br>😭🍺  🌙<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
      <tag>Web</tag>
      
      <tag>Misc</tag>
      
      <tag>TSCTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
