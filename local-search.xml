<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2024-TSCTF-J-partWP-crypto</title>
    <link href="/2024/09/24/2024-TSCTF-J-partWP-crypto/"/>
    <url>/2024/09/24/2024-TSCTF-J-partWP-crypto/</url>
    
    <content type="html"><![CDATA[<h1 id="2024-TSCTF-J-partWP-crypto"><a href="#2024-TSCTF-J-partWP-crypto" class="headerlink" title="2024-TSCTF-J-partWP-crypto"></a>2024-TSCTF-J-partWP-crypto</h1><p>出了五道入门密码题，非常荣幸，写一下题解。</p><h2 id="ezRSA"><a href="#ezRSA" class="headerlink" title="ezRSA"></a>ezRSA</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">import</span> os<br>encoded_flag = base64.b64encode(flag)<br>part_length = <span class="hljs-built_in">len</span>(encoded_flag) // <span class="hljs-number">4</span><br>parts = [encoded_flag[i:i + part_length] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(encoded_flag), part_length)]<br><br><span class="hljs-comment">#part1</span><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>n = p * q<br>phi = (p-<span class="hljs-number">1</span>) * (q-<span class="hljs-number">1</span>)<br>d = getPrime(<span class="hljs-number">250</span>)<br>e = inverse(d, phi)<br>c = <span class="hljs-built_in">pow</span>(bytes_to_long(parts[<span class="hljs-number">0</span>]), e, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e = <span class="hljs-subst">&#123;e&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 124695452995031270645183837267530422032624508784074534979189655228220709056309638648794696369835930482818980808128467814617220810217534821336503942838791498456112882717378013827550680516551959078234339477401303759763506487676709408813412867364414651706461400252466842182365340612883444737530603407481042520627</span><br><span class="hljs-string">e = 38587713366842463962841747677614707312145479235042165803103947138237921458583509748629042842505955223421671992698976799249425980974893271454942323501453571320592126625468760278770909411858284131095166550317734018153286242950401311537208914820833671566620645882329390747892971373265592565291598852744678229891</span><br><span class="hljs-string">c = 75650426098322108299742769179799276679353245586432433359812352366165787480762021753671012472067826915659840541954505167382050569833945309043431554352347482992118091659840982421987700648585142917347916194810259117115753813661282178558428786374835684668840019166776178494086580424196110694158066034697988927644</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment">#part2</span><br>p = getPrime(<span class="hljs-number">80</span>)<br>q = getPrime(<span class="hljs-number">80</span>)<br>n = p * q<br>e = <span class="hljs-number">2</span><br>c = <span class="hljs-built_in">pow</span>(bytes_to_long(parts[<span class="hljs-number">1</span>]), e, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;p,q = <span class="hljs-subst">&#123;p,q&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 649329048322675374317593820985753646586809799201</span><br><span class="hljs-string">c = 283668420132846011615755415362202578109404366325</span><br><span class="hljs-string">p,q = (647260709632957671018359, 1003195526406802286444839)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment">#part3</span><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>n = p * q<br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-built_in">pow</span>(bytes_to_long(parts[<span class="hljs-number">2</span>]), e, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;p^q = <span class="hljs-subst">&#123;p^q&#125;</span>&#x27;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 85836893651204560884454211125508692415276042143801480450535044733242333318334455339451808653755272841343378345709375676280488068099971805717946097641116078266013229365158341178806480395974457905053516603153056936745020102883744430977333247681929718298626185526512756702624513738698825219177049538628421559753</span><br><span class="hljs-string">c = 75578834548096799626696300881096262997184146142305165096930004492293642496308047534319034721187289042138332386120962890635270628767192988167590315544321566944902760623837249074921079890026503778053466720161607743010204269544291059577848021218234039433294700788160167294093796603060247381385159054508170520277</span><br><span class="hljs-string">p^q = 5068548570505625142069285468439450186210992627026138517591800598908379828953823253346928574075223127205617451260708785889033493211347183583859669806824864</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment">#part4</span><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>n = p * q<br>e = <span class="hljs-number">3</span><br>m = bytes_to_long(os.urandom(<span class="hljs-number">32</span>)+parts[<span class="hljs-number">3</span>])<br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;mleak = <span class="hljs-subst">&#123;m&gt;&gt;<span class="hljs-number">128</span>&#125;</span>&#x27;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 136909292741753142871542219643510188168311518562065789353531367466023357011784735447560466352669948897633633920102617017949126915203615330337196942328793619163571419292670395849251337340787480297972818664454785647844715189207055430597030032696044932960884594660634280475822683286430432169515120767378120972393</span><br><span class="hljs-string">c = 14763067643592454478187771324072634160297758439803081056226124797870386993054732731754324146768654813122274647054179017048620683751626439261028839186682159969656271385676822426489416369402998625865982105676257668946313225156476831065481561281126267398712822218497384996243578386630794573662378684549962709522</span><br><span class="hljs-string">mleak = 287621732882458207416007037901690948810437972193283953524078189541847647258</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><br></code></pre></td></tr></table></figure><p>板子题，维纳攻击，Rabin，pq异或剪枝，coppersmith已知部分m</p><p>具体的都可以在网上找到非常非常详细的解释，这题确实也是为了让大家学会搜索而出的题目。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> gmpy2<br><br><span class="hljs-comment">#part1 wiener attack</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">transform</span>(<span class="hljs-params">x,y</span>):       <span class="hljs-comment">#使用辗转相处将分数 x/y 转为连分数的形式</span><br>    res=[]<br>    <span class="hljs-keyword">while</span> y:<br>        res.append(x//y)<br>        x,y=y,x%y<br>    <span class="hljs-keyword">return</span> res<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">continued_fraction</span>(<span class="hljs-params">sub_res</span>):<br>    numerator,denominator=<span class="hljs-number">1</span>,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> sub_res[::-<span class="hljs-number">1</span>]:      <span class="hljs-comment">#从sublist的后面往前循环</span><br>        denominator,numerator=numerator,i*numerator+denominator<br>    <span class="hljs-keyword">return</span> denominator,numerator   <span class="hljs-comment">#得到渐进分数的分母和分子，并返回</span><br><br>    <br><span class="hljs-comment">#求解每个渐进分数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub_fraction</span>(<span class="hljs-params">x,y</span>):<br>    res=transform(x,y)<br>    res=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(continued_fraction,(res[<span class="hljs-number">0</span>:i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(res)))))  <span class="hljs-comment">#将连分数的结果逐一截取以求渐进分数</span><br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_pq</span>(<span class="hljs-params">a,b,c</span>):      <span class="hljs-comment">#由p+q和pq的值通过维达定理来求解p和q</span><br>    par=gmpy2.isqrt(b*b-<span class="hljs-number">4</span>*a*c)   <span class="hljs-comment">#由上述可得，开根号一定是整数，因为有解</span><br>    x1,x2=(-b+par)//(<span class="hljs-number">2</span>*a),(-b-par)//(<span class="hljs-number">2</span>*a)<br>    <span class="hljs-keyword">return</span> x1,x2<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wienerAttack</span>(<span class="hljs-params">e,n</span>):<br>    <span class="hljs-keyword">for</span> (d,k) <span class="hljs-keyword">in</span> sub_fraction(e,n):  <span class="hljs-comment">#用一个for循环来注意试探e/n的连续函数的渐进分数，直到找到一个满足条件的渐进分数</span><br>        <span class="hljs-keyword">if</span> k==<span class="hljs-number">0</span>:                     <span class="hljs-comment">#可能会出现连分数的第一个为0的情况，排除</span><br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> (e*d-<span class="hljs-number">1</span>)%k!=<span class="hljs-number">0</span>:             <span class="hljs-comment">#ed=1 (mod φ(n)) 因此如果找到了d的话，(ed-1)会整除φ(n),也就是存在k使得(e*d-1)//k=φ(n)</span><br>            <span class="hljs-keyword">continue</span><br>        <br>        phi=(e*d-<span class="hljs-number">1</span>)//k               <span class="hljs-comment">#这个结果就是 φ(n)</span><br>        px,qy=get_pq(<span class="hljs-number">1</span>,n-phi+<span class="hljs-number">1</span>,n)<br>        <span class="hljs-keyword">if</span> px*qy==n:<br>            p,q=<span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(px)),<span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(qy))     <span class="hljs-comment">#可能会得到两个负数，负负得正未尝不会出现</span><br>            d=gmpy2.invert(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))     <span class="hljs-comment">#求ed=1 (mod  φ(n))的结果，也就是e关于 φ(n)的乘法逆元d</span><br>            <span class="hljs-keyword">return</span> d<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该方法不适用&quot;</span>)<br>    <br>    <br>n = <span class="hljs-number">124695452995031270645183837267530422032624508784074534979189655228220709056309638648794696369835930482818980808128467814617220810217534821336503942838791498456112882717378013827550680516551959078234339477401303759763506487676709408813412867364414651706461400252466842182365340612883444737530603407481042520627</span><br>e = <span class="hljs-number">38587713366842463962841747677614707312145479235042165803103947138237921458583509748629042842505955223421671992698976799249425980974893271454942323501453571320592126625468760278770909411858284131095166550317734018153286242950401311537208914820833671566620645882329390747892971373265592565291598852744678229891</span><br>d=wienerAttack(e,n)<br>c = <span class="hljs-number">75650426098322108299742769179799276679353245586432433359812352366165787480762021753671012472067826915659840541954505167382050569833945309043431554352347482992118091659840982421987700648585142917347916194810259117115753813661282178558428786374835684668840019166776178494086580424196110694158066034697988927644</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;d=&quot;</span>,d)<br>part1 = long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,n))<br><span class="hljs-built_in">print</span>(part1) <span class="hljs-comment">#b&#x27;VFNDVEYtSnsiclN&#x27;</span><br><br><span class="hljs-comment">#part2 rabinRSA</span><br>n = <span class="hljs-number">649329048322675374317593820985753646586809799201</span><br>c = <span class="hljs-number">283668420132846011615755415362202578109404366325</span><br>p,q = (<span class="hljs-number">647260709632957671018359</span>, <span class="hljs-number">1003195526406802286444839</span>)<br>mp = <span class="hljs-built_in">pow</span>(c,(p+<span class="hljs-number">1</span>)//<span class="hljs-number">4</span>,p)<br>mq = <span class="hljs-built_in">pow</span>(c,(q+<span class="hljs-number">1</span>)//<span class="hljs-number">4</span>,q)<br><span class="hljs-comment">#   sp+tq=1  </span><br>s = gmpy2.invert(p,q)   <span class="hljs-comment"># (p^-1) mod q </span><br>t = gmpy2.invert(q,p)   <span class="hljs-comment"># (q^-1) mod p</span><br>x = (t*q*mp+s*p*mq)%n<br>y = (t*q*mp-s*p*mq)%n<br> <br><span class="hljs-built_in">print</span>([long_to_bytes(v%n) <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> [x,-x,y,-y]])<span class="hljs-comment">#b&#x27;hXzFzX2MwbXBMZX&#x27;</span><br><br><span class="hljs-comment">#part3 p^q</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_pq</span>(<span class="hljs-params">n, x</span>):<br>    a = [<span class="hljs-number">0</span>]<br>    b = [<span class="hljs-number">0</span>]<br>    maskx = <span class="hljs-number">1</span><br>    maskn = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1024</span>):<br>        xbit = (x &amp; maskx) &gt;&gt; i<br>        nbit = n % maskn<br>        t_a = []<br>        t_b = []<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>            <span class="hljs-keyword">for</span> aa <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>                <span class="hljs-keyword">for</span> bb <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>                    <span class="hljs-keyword">if</span> aa ^ bb == xbit:<br>                        tmp2 = n % maskn<br>                        tmp1 = (aa * maskn // <span class="hljs-number">2</span> + a[j]) * (bb * maskn // <span class="hljs-number">2</span> + b[j]) % maskn<br>                        <span class="hljs-keyword">if</span> tmp1 == tmp2:<br>                            t_a.append(aa * maskn // <span class="hljs-number">2</span> + a[j])<br>                            t_b.append(bb * maskn // <span class="hljs-number">2</span> + b[j])<br>        maskx *= <span class="hljs-number">2</span><br>        maskn *= <span class="hljs-number">2</span><br>        a = t_a<br>        b = t_b<br>    <span class="hljs-keyword">for</span> a1, b1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a, b):<br>        <span class="hljs-keyword">if</span> a1 * b1 == n:<br>            <span class="hljs-keyword">return</span> a1, b1<br>n = <span class="hljs-number">85836893651204560884454211125508692415276042143801480450535044733242333318334455339451808653755272841343378345709375676280488068099971805717946097641116078266013229365158341178806480395974457905053516603153056936745020102883744430977333247681929718298626185526512756702624513738698825219177049538628421559753</span><br>c = <span class="hljs-number">75578834548096799626696300881096262997184146142305165096930004492293642496308047534319034721187289042138332386120962890635270628767192988167590315544321566944902760623837249074921079890026503778053466720161607743010204269544291059577848021218234039433294700788160167294093796603060247381385159054508170520277</span><br>pq = <span class="hljs-number">5068548570505625142069285468439450186210992627026138517591800598908379828953823253346928574075223127205617451260708785889033493211347183583859669806824864</span><br><span class="hljs-comment">#print(get_pq(n,pq))</span><br>p,q = (<span class="hljs-number">7071885161396583396463096463625209044303327972167708438066857001830332768701746624020834805511703081047126757150658001950574691764834038852771215770021517</span>, <span class="hljs-number">12137766902630692204014930687092692421705024861458681276005451698346350903669687744428609039166970461294162324174541673034447500506353559460507837247083309</span>)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,gmpy2.invert(<span class="hljs-number">65537</span>,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)),n)))<span class="hljs-comment">#b&#x27;hfQnVUX0V6X3QwX&#x27;</span><br><br><span class="hljs-comment">#part4 coppersmith **in sagemath**</span><br>n = <span class="hljs-number">136909292741753142871542219643510188168311518562065789353531367466023357011784735447560466352669948897633633920102617017949126915203615330337196942328793619163571419292670395849251337340787480297972818664454785647844715189207055430597030032696044932960884594660634280475822683286430432169515120767378120972393</span><br>c = <span class="hljs-number">14763067643592454478187771324072634160297758439803081056226124797870386993054732731754324146768654813122274647054179017048620683751626439261028839186682159969656271385676822426489416369402998625865982105676257668946313225156476831065481561281126267398712822218497384996243578386630794573662378684549962709522</span><br>mleak = <span class="hljs-number">287621732882458207416007037901690948810437972193283953524078189541847647258</span><br>m = mleak&lt;&lt;<span class="hljs-number">128</span><br>PR.&lt;x&gt; = PolynomialRing(Zmod(n))<br>f = (m + x)^<span class="hljs-number">3</span> - c<br>f = f.monic()<br>roots = f.small_roots(X = <span class="hljs-number">2</span>^<span class="hljs-number">130</span>,beta = <span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">print</span>(roots)<br><span class="hljs-comment">#2E3N0Fjay4ifQ==</span><br><br>flag = base64.b64decode(<span class="hljs-string">b&#x27;VFNDVEYtSnsiclNhXzFzX2MwbXBMZXhfQnVUX0V6X3QwX2E3N0Fjay4ifQ==&#x27;</span>)<br><span class="hljs-comment">#TSCTF-J&#123;&quot;rSa_1s_c0mpLex_BuT_Ez_t0_a77Ack.&quot;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="ezNumberTheory"><a href="#ezNumberTheory" class="headerlink" title="ezNumberTheory"></a>ezNumberTheory</h2><p>数论题说一说。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><br>len_flag = <span class="hljs-built_in">len</span>(flag)<br>part_len = len_flag // <span class="hljs-number">3</span><br><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>n = p * q<br>e = <span class="hljs-number">65537</span><br>gift = <span class="hljs-built_in">pow</span>(p+q,q,n)-p<br>m = bytes_to_long(flag[:part_len])<br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n =&quot;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;gift =&quot;</span>,gift)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c =&quot;</span>,c)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 153749014523272882821671256288576182883718734206948338123440154330232438242352336326118817670175226476534419932398245087292627065992859219251558541981607900566708988825176882241536176428735420764037541259367530815704062276822697487906043999849153755370263421198613012659150765667474910110820544552092107031781</span><br><span class="hljs-string">gift = 76218149244790410743569002423226144020409783424589996364309157429636313386270394325935494179180434848562020007440982517518325492418962399435213235272019771298535452987091692532725153721656317290106122504427984096181862152616628997041852783959323592498903124919040540241487104709669308107880042302524373888077</span><br><span class="hljs-string">c = 46558926426389199704619860270058438799459155807709114710099109767026527431762127212078246374751784253888010671466257603403362846003452574724946328999962166843277258945336648937599901438703087848711983624581691213172327778561524496310162493835352841739939581338334972221480380062931473554118130953244351923526</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>n = p * q<br>e = <span class="hljs-number">65537</span><br>m = bytes_to_long(flag[part_len:<span class="hljs-number">2</span>*part_len])<br>gift = <span class="hljs-built_in">pow</span>(n-<span class="hljs-number">1</span>,m,n**<span class="hljs-number">2</span>)<br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n =&quot;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;gift =&quot;</span>,gift)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c =&quot;</span>,c)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 101825028937892274755066568298675753051915211984336844010001051946487425488926444636462308770518438066690807207349397829434761111870976777194195377994066094978667372161712559828354279213717904934626695765400184018995342438568172381388749973725572499090794995578069624189552411881722996041605959223833931977161</span><br><span class="hljs-string">gift = 10368336518202599155478611962986419931032852827247241544520944151147424100095888793813818133261771295138537638975002709013348196763698154979511238402220870231916534915445557931918512473116396709289462544729254616655147690181935999744990349056920271954901882532521970967307761055252723712876050094383313331140406445004997917905258680326374893836686879404331037481540004243801858344196072242572121743245711481444665694028492376994909442739868671793792049626000877294534619734785195159330183197692177383792865340479971388526007871832995878259364333594949083550807440342049213394072558604884076160696389453987350453566282</span><br><span class="hljs-string">c = 6206002756473719752481539026703107851866702754011241324450943403363532188346664095512595594879972008741307201868011790850666619709952602312346601585431717191460826191100496612662950423560204126590072745286069584415447406165328489464592884522745095517397118876988652114937810284710552486235169949976593170616</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = next_prime(p)<br>r = getPrime(<span class="hljs-number">512</span>)<br>n = p * q<br>e = <span class="hljs-number">65537</span><br>m = bytes_to_long(flag[<span class="hljs-number">2</span>*part_len:])<br>gift = (<span class="hljs-built_in">pow</span>(<span class="hljs-number">1</span>+m*n,<span class="hljs-number">1</span>,n**<span class="hljs-number">2</span>)*<span class="hljs-built_in">pow</span>(r,n,n**<span class="hljs-number">2</span>))%(n**<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n =&quot;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;gift =&quot;</span>,gift)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p =&quot;</span>,p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;q =&quot;</span>,q)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 120085278656547434097495160698983440086977117014813250068332400723955573086081539793659925690983763612644098938270646361630753175121916904514302168476109276991065963359696653413330575343172587757112308794397643577457876878076258704713342584783867357600427211623403743168388707834963362860793081706620920977197</span><br><span class="hljs-string">gift = 755365096368274234067764643236574524026724653923904235465391689910808113641191521577417355583242717443863451427293486428108305560959934240539916731737071269870765365812729624798503913486014927177398814766178335408644263304959990001131184599054858122656321624816269434361664736002888774514548687701448375859895656340630928111228145226768972365422917506757004452665088879334351527814068349598913876771933729841797767944898598495453091334481416909244894797229851139025287531257727280929467263018600829848751441007477417666581057493947789435287529403836954674188989033519154270698877075630430517874818318137411379414838</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="part1"><a href="#part1" class="headerlink" title="part1"></a>part1</h3><p>$gift+p &#x3D; (p+q)^q \text{(mod n)}$</p><p>$gift+p &#x3D; p^q+q^q \text{(mod q)}$</p><p>$gift+p &#x3D; p^p \text{(mod q)}$</p><p>根据费马小定理我们知道</p><p>$p &#x3D; p^p \text{(mod q)}$</p><p>$gift + p &#x3D; p \text{(modq)}$</p><p>$gift &#x3D; kq$</p><p>$q &#x3D; gcd(gift,n)$</p><p>得q易解</p><h3 id="part2"><a href="#part2" class="headerlink" title="part2"></a>part2</h3><p>$gift &#x3D; (n-1)^m\text{ mod(n*n)}$</p><p>$gift &#x3D; (-1)^m\text{ mod(n)}$</p><p>代入发现</p><p>$gift &#x3D; 1\text{ mod(n)}$</p><p>n为奇数则m为偶数</p><p>$gift &#x3D; -mn+1\text{ mod(n*n)}$</p><p>显然-mn+1为负数 而gift为正数，二者显然差一个n^2</p><p>所以$m &#x3D; \frac{n^2-gift+1}{n}$</p><h3 id="part3"><a href="#part3" class="headerlink" title="part3"></a>part3</h3><p>比较难的CRT 第二题考到这个程度确实超模了 给大家道歉</p><p>$gift &#x3D; (1+mn)<em>(r^n)\text{ mod(n</em>n)}$</p><p>先余n</p><p>$gift &#x3D; (r^n)\text{ mod(n)}$</p><p>显然不能用费马小定理</p><p>尝试模p q</p><p>$gift &#x3D; (r^{pq})\text{ mod(p)}$</p><p>$gift &#x3D; (r^{pq})\text{ mod(q)}$</p><p>似乎可以做了</p><p>不妨设$d_1 &#x3D; q^{-1}\text{ mod( p-1)}$</p><p>$d_2 &#x3D; p^{-1}\text{ mod( q-1)}$</p><p>此时$gift^{d_1} &#x3D; (r^{pqd_1}) &#x3D; (r^{p(k(p-1)+1)}) &#x3D; r\text{ mod(p)}$</p><p>$gift^{d_2} &#x3D; (r^{pqd_2}) &#x3D; (r^{q(k(q-1)+1)}) &#x3D; r\text{ mod(q)}$</p><p>接下来就是CRT了 不多说</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>n = <span class="hljs-number">153749014523272882821671256288576182883718734206948338123440154330232438242352336326118817670175226476534419932398245087292627065992859219251558541981607900566708988825176882241536176428735420764037541259367530815704062276822697487906043999849153755370263421198613012659150765667474910110820544552092107031781</span><br>gift = <span class="hljs-number">76218149244790410743569002423226144020409783424589996364309157429636313386270394325935494179180434848562020007440982517518325492418962399435213235272019771298535452987091692532725153721656317290106122504427984096181862152616628997041852783959323592498903124919040540241487104709669308107880042302524373888077</span><br>c = <span class="hljs-number">46558926426389199704619860270058438799459155807709114710099109767026527431762127212078246374751784253888010671466257603403362846003452574724946328999962166843277258945336648937599901438703087848711983624581691213172327778561524496310162493835352841739939581338334972221480380062931473554118130953244351923526</span><br>q = GCD(gift,n)<br>p = n//q<br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d = inverse(<span class="hljs-number">65537</span>,phi)<br>m = <span class="hljs-built_in">pow</span>(c,d,n)<br>m1 = long_to_bytes(m)<br><br>n = <span class="hljs-number">101825028937892274755066568298675753051915211984336844010001051946487425488926444636462308770518438066690807207349397829434761111870976777194195377994066094978667372161712559828354279213717904934626695765400184018995342438568172381388749973725572499090794995578069624189552411881722996041605959223833931977161</span><br>gift = <span class="hljs-number">10368336518202599155478611962986419931032852827247241544520944151147424100095888793813818133261771295138537638975002709013348196763698154979511238402220870231916534915445557931918512473116396709289462544729254616655147690181935999744990349056920271954901882532521970967307761055252723712876050094383313331140406445004997917905258680326374893836686879404331037481540004243801858344196072242572121743245711481444665694028492376994909442739868671793792049626000877294534619734785195159330183197692177383792865340479971388526007871832995878259364333594949083550807440342049213394072558604884076160696389453987350453566282</span><br>c = <span class="hljs-number">6206002756473719752481539026703107851866702754011241324450943403363532188346664095512595594879972008741307201868011790850666619709952602312346601585431717191460826191100496612662950423560204126590072745286069584415447406165328489464592884522745095517397118876988652114937810284710552486235169949976593170616</span><br>m = (n**<span class="hljs-number">2</span>-gift+<span class="hljs-number">1</span>)//n<br>m2 = (long_to_bytes(m))<br><br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">import</span> sys<br>n = <span class="hljs-number">120085278656547434097495160698983440086977117014813250068332400723955573086081539793659925690983763612644098938270646361630753175121916904514302168476109276991065963359696653413330575343172587757112308794397643577457876878076258704713342584783867357600427211623403743168388707834963362860793081706620920977197</span><br>gift = <span class="hljs-number">755365096368274234067764643236574524026724653923904235465391689910808113641191521577417355583242717443863451427293486428108305560959934240539916731737071269870765365812729624798503913486014927177398814766178335408644263304959990001131184599054858122656321624816269434361664736002888774514548687701448375859895656340630928111228145226768972365422917506757004452665088879334351527814068349598913876771933729841797767944898598495453091334481416909244894797229851139025287531257727280929467263018600829848751441007477417666581057493947789435287529403836954674188989033519154270698877075630430517874818318137411379414838</span><br>p = <span class="hljs-number">10958342879128551619874835419448048277580939097878816484360833645482922440402046497462064248113450404198411413413202604271893981525662958975161222777207829</span><br>q = <span class="hljs-number">10958342879128551619874835419448048277580939097878816484360833645482922440402046497462064248113450404198411413413202604271893981525662958975161222777207993</span><br>rn = gift % n<br><br>x1 = rn % p<br>d1 = inverse(q, p-<span class="hljs-number">1</span>)<br>r1 = <span class="hljs-built_in">pow</span>(x1, d1, p)<br><br>x2 = rn % q<br>d2 = inverse(p, q-<span class="hljs-number">1</span>)<br>r2 = <span class="hljs-built_in">pow</span>(x2, d2, q)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">CRT</span>(<span class="hljs-params">m, a</span>):<br>    Num = <span class="hljs-built_in">len</span>(m)<br>    M = reduce(<span class="hljs-keyword">lambda</span> x, y: x*y, m)<br>    Mi = [M//i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> m]<br>    t = [inverse(Mi[i], m[i]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(Num)]<br>    x = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(Num):<br>        x += a[i]*t[i]*Mi[i]<br>    <span class="hljs-keyword">return</span> x % M<br><br><br>r = CRT([p, q], [r1, r2])<br><br>R = <span class="hljs-built_in">pow</span>(r, n, n*n)<br><span class="hljs-built_in">print</span>(r)<br>R_inv = inverse(R, n*n)<br>mn = (gift*R_inv) % (n*n)<br>m = (mn-<span class="hljs-number">1</span>)//n<br>m3 = long_to_bytes(m)<br><br><span class="hljs-built_in">print</span>(m1+m2+m3)<br><br></code></pre></td></tr></table></figure><p>两道更比七道强！</p><h2 id="ezPwntools"><a href="#ezPwntools" class="headerlink" title="ezPwntools"></a>ezPwntools</h2><p>此题十分简单，会pwntools就会做</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Callable</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    flag = f.read().strip()<br><br>length = <span class="hljs-number">128</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LCG</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, length=<span class="hljs-number">128</span></span>):<br>        self.length = length<br>        self.setparam()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setparam</span>(<span class="hljs-params">self</span>):<br>        self.m = getPrime(length+<span class="hljs-number">1</span>)<br>        self.a = getPrime(length)<br>        self.b = getPrime(length)<br>        self.seed = random.randint(<span class="hljs-number">0</span>, self.m - <span class="hljs-number">1</span>)<br>        self.begin = self.seed<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">generate</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>            self.seed = (self.a * self.seed + self.b) % self.m<br>        seed_list = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>            self.seed = (self.a * self.seed + self.b) % self.m<br>            seed_list.append(self.seed)<br>        <span class="hljs-keyword">return</span> seed_list<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.begin<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">challenge</span>(<span class="hljs-params"><span class="hljs-built_in">input</span>:<span class="hljs-type">Callable</span>[[<span class="hljs-built_in">str</span>],<span class="hljs-literal">None</span>], <span class="hljs-built_in">print</span>:<span class="hljs-type">Callable</span>[[<span class="hljs-built_in">str</span>],<span class="hljs-literal">None</span>]</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome to TSCTF-J! If you can recover the seed, you will get the flag!&quot;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">512</span>):<br>        lcg = LCG()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Here is your gift:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(lcg.generate()))<br>        i = <span class="hljs-built_in">input</span>(<span class="hljs-string">f&quot;Give me the seed: &quot;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(i) != lcg():<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Oh, you are wrong!&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Congurations!<span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>我们发现给定五个更新完的seed，显然这里可以解同余方程把参数爆出来，但是由于要交互512次，所以这里肯定会存在几次得到的参数有小因子的情况，只需要再写一个除小因子的脚本即可。</p><p>$x_5-x_4 &#x3D; a(x_4-x_3)\text{ mod(m)}$</p><p>$x_4-x_3 &#x3D; a(x_3-x_2)\text{ mod(m)}$</p><p>交叉相乘把a消掉</p><p>$(x_4-x_3)^2 &#x3D; (x_5-x_4)(x_3-x_2)\text{ mod(m)}$</p><p>然后不难发现</p><p>$m | (x_4-x_3)^2 - (x_5-x_4)(x_3-x_2)$</p><p>再来一个x4321的，求gcd再消掉小因子</p><p>得到m，ab都容易得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> ast<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> trange<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove_small_primes</span>(<span class="hljs-params">m</span>):<br>    small_primes = [<br>        <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">17</span>, <span class="hljs-number">19</span>, <span class="hljs-number">23</span>, <span class="hljs-number">29</span>, <span class="hljs-number">31</span>, <span class="hljs-number">37</span>, <span class="hljs-number">41</span>, <span class="hljs-number">43</span>, <span class="hljs-number">47</span>, <span class="hljs-number">53</span>, <span class="hljs-number">59</span>, <span class="hljs-number">61</span>, <span class="hljs-number">67</span>, <span class="hljs-number">71</span>, <span class="hljs-number">73</span>, <span class="hljs-number">79</span>, <span class="hljs-number">83</span>, <span class="hljs-number">89</span>, <span class="hljs-number">97</span>,<br>        <span class="hljs-number">101</span>, <span class="hljs-number">103</span>, <span class="hljs-number">107</span>, <span class="hljs-number">109</span>, <span class="hljs-number">113</span>, <span class="hljs-number">127</span>, <span class="hljs-number">131</span>, <span class="hljs-number">137</span>, <span class="hljs-number">139</span>, <span class="hljs-number">149</span>, <span class="hljs-number">151</span>, <span class="hljs-number">157</span>, <span class="hljs-number">163</span>, <span class="hljs-number">167</span>, <span class="hljs-number">173</span>, <span class="hljs-number">179</span>, <span class="hljs-number">181</span>, <span class="hljs-number">191</span>, <span class="hljs-number">193</span>,<br>        <span class="hljs-number">197</span>, <span class="hljs-number">199</span>, <span class="hljs-number">211</span>, <span class="hljs-number">223</span>, <span class="hljs-number">227</span>, <span class="hljs-number">229</span>, <span class="hljs-number">233</span>, <span class="hljs-number">239</span>, <span class="hljs-number">241</span>, <span class="hljs-number">251</span>, <span class="hljs-number">257</span>, <span class="hljs-number">263</span>, <span class="hljs-number">269</span>, <span class="hljs-number">271</span>, <span class="hljs-number">277</span>, <span class="hljs-number">281</span>, <span class="hljs-number">283</span>, <span class="hljs-number">293</span>, <span class="hljs-number">307</span>,<br>        <span class="hljs-number">311</span>, <span class="hljs-number">313</span>, <span class="hljs-number">317</span>, <span class="hljs-number">331</span>, <span class="hljs-number">337</span>, <span class="hljs-number">347</span>, <span class="hljs-number">349</span>, <span class="hljs-number">353</span>, <span class="hljs-number">359</span>, <span class="hljs-number">367</span>, <span class="hljs-number">373</span>, <span class="hljs-number">379</span>, <span class="hljs-number">383</span>, <span class="hljs-number">389</span>, <span class="hljs-number">397</span>, <span class="hljs-number">401</span>, <span class="hljs-number">409</span>, <span class="hljs-number">419</span>, <span class="hljs-number">421</span>,<br>        <span class="hljs-number">431</span>, <span class="hljs-number">433</span>, <span class="hljs-number">439</span>, <span class="hljs-number">443</span>, <span class="hljs-number">449</span>, <span class="hljs-number">457</span>, <span class="hljs-number">461</span>, <span class="hljs-number">463</span>, <span class="hljs-number">467</span>, <span class="hljs-number">479</span>, <span class="hljs-number">487</span>, <span class="hljs-number">491</span>, <span class="hljs-number">499</span>, <span class="hljs-number">503</span>, <span class="hljs-number">509</span>, <span class="hljs-number">521</span>, <span class="hljs-number">523</span>, <span class="hljs-number">541</span>, <span class="hljs-number">547</span>,<br>        <span class="hljs-number">557</span>, <span class="hljs-number">563</span>, <span class="hljs-number">569</span>, <span class="hljs-number">571</span>, <span class="hljs-number">577</span>, <span class="hljs-number">587</span>, <span class="hljs-number">593</span>, <span class="hljs-number">599</span>, <span class="hljs-number">601</span>, <span class="hljs-number">607</span>, <span class="hljs-number">613</span>, <span class="hljs-number">617</span>, <span class="hljs-number">619</span>, <span class="hljs-number">631</span>, <span class="hljs-number">641</span>, <span class="hljs-number">643</span>, <span class="hljs-number">647</span>, <span class="hljs-number">653</span>, <span class="hljs-number">659</span>,<br>        <span class="hljs-number">661</span>, <span class="hljs-number">673</span>, <span class="hljs-number">677</span>, <span class="hljs-number">683</span>, <span class="hljs-number">691</span>, <span class="hljs-number">701</span>, <span class="hljs-number">709</span>, <span class="hljs-number">719</span>, <span class="hljs-number">727</span>, <span class="hljs-number">733</span>, <span class="hljs-number">739</span>, <span class="hljs-number">743</span>, <span class="hljs-number">751</span>, <span class="hljs-number">757</span>, <span class="hljs-number">761</span>, <span class="hljs-number">769</span>, <span class="hljs-number">773</span>, <span class="hljs-number">787</span>, <span class="hljs-number">797</span>,<br>        <span class="hljs-number">809</span>, <span class="hljs-number">811</span>, <span class="hljs-number">821</span>, <span class="hljs-number">823</span>, <span class="hljs-number">827</span>, <span class="hljs-number">829</span>, <span class="hljs-number">839</span>, <span class="hljs-number">853</span>, <span class="hljs-number">857</span>, <span class="hljs-number">859</span>, <span class="hljs-number">863</span>, <span class="hljs-number">877</span>, <span class="hljs-number">881</span>, <span class="hljs-number">883</span>, <span class="hljs-number">887</span>, <span class="hljs-number">907</span>, <span class="hljs-number">911</span>, <span class="hljs-number">919</span>, <span class="hljs-number">929</span>,<br>        <span class="hljs-number">937</span>, <span class="hljs-number">941</span>, <span class="hljs-number">947</span>, <span class="hljs-number">953</span>, <span class="hljs-number">967</span>, <span class="hljs-number">971</span>, <span class="hljs-number">977</span>, <span class="hljs-number">983</span>, <span class="hljs-number">991</span>, <span class="hljs-number">997</span>, <span class="hljs-number">1009</span>, <span class="hljs-number">1013</span>, <span class="hljs-number">1019</span>, <span class="hljs-number">1021</span><br>    ]<br>    <span class="hljs-keyword">for</span> prime <span class="hljs-keyword">in</span> small_primes:<br>        <span class="hljs-keyword">while</span> m % prime == <span class="hljs-number">0</span>:<br>            m //= prime<br>    <span class="hljs-keyword">return</span> m<br><br>io = remote(<span class="hljs-string">&#x27;challenges.hazmat.buptmerak.cn&#x27;</span>, <span class="hljs-number">21764</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> trange(<span class="hljs-number">512</span>):<br>    io.recvuntil(<span class="hljs-string">b&#x27;Here is your gift:&#x27;</span>)<br>    c = io.recvuntil(<span class="hljs-string">b&#x27;]\n&#x27;</span>)<br>    decoded_str = c.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    x = ast.literal_eval(decoded_str)<br>    m = remove_small_primes(GCD((x[<span class="hljs-number">3</span>]-x[<span class="hljs-number">2</span>])*(x[<span class="hljs-number">1</span>]-x[<span class="hljs-number">0</span>])-(x[<span class="hljs-number">2</span>]-x[<span class="hljs-number">1</span>])*(x[<span class="hljs-number">2</span>]-x[<span class="hljs-number">1</span>]), (x[<span class="hljs-number">4</span>]-x[<span class="hljs-number">3</span>])*(x[<span class="hljs-number">2</span>]-x[<span class="hljs-number">1</span>])-(x[<span class="hljs-number">3</span>]-x[<span class="hljs-number">2</span>])*(x[<span class="hljs-number">3</span>]-x[<span class="hljs-number">2</span>])))<br>    <span class="hljs-keyword">assert</span>(isPrime(m))<br>    a = ((x[<span class="hljs-number">2</span>]-x[<span class="hljs-number">1</span>])*inverse((x[<span class="hljs-number">1</span>]-x[<span class="hljs-number">0</span>]), m)) % m<br>    <span class="hljs-keyword">assert</span>(isPrime(a))<br>    b = (x[<span class="hljs-number">1</span>] - a*x[<span class="hljs-number">0</span>]) % m<br>    <span class="hljs-keyword">assert</span>(isPrime(b))<br>    seed = x[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">11</span>):<br>        seed = ((seed-b)*inverse(a, m)) % m<br>    io.sendline(<span class="hljs-built_in">str</span>(seed))<br><span class="hljs-built_in">print</span>(io.recvline())<br></code></pre></td></tr></table></figure><h2 id="ezECC"><a href="#ezECC" class="headerlink" title="ezECC"></a>ezECC</h2><p>为什么这题那么烂呢，因为这题是我去年出的</p><p>当时是给冬季招新用的，结果当时一个人没做出来，想着今年给复用了。</p><p>（小故事里也提到了 冬日的战斗）</p><p>其实也是为了奖励是不是真的有复盘冬季招新的人</p><p>确实挺烂的，早知道高手这么多，我就再加个曲线映射了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br>msg = <span class="hljs-string">b&#x27;???&#x27;</span><br>flag = <span class="hljs-string">b&#x27;TSCTF-J&#123;&#x27;</span>+msg+<span class="hljs-string">b&#x27;&#125;&#x27;</span><br>m = bytes_to_long(flag)<br>(p,a,b) = (getPrime(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">bin</span>(bytes_to_long(flag)))) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>))<br>E = EllipticCurve(GF(p),[a,b])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    <span class="hljs-built_in">print</span>(E.random_point())<br>e = <span class="hljs-number">114514</span><br>K = E.lift_x(m+<span class="hljs-number">1</span>)<br>eK = e*K<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;eK=<span class="hljs-subst">&#123;eK&#125;</span>&quot;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">(121542556343240612458886464797113519174471159973947349739843570016310276547868092596053087152046638137671892191449161589255393370014868931365353180578227117593735, 98840327394835055943257602264613388284774639725847294267402852043945104193135363216749971927532657727021952911622427228151863672295675502233797082353097959401869)</span><br><span class="hljs-string">(99873546068894326234875062311058443230105529641172112880280159410919160848811689840010700811925066814781044568587853533466146854172381759747204462070834544581290, 54021704113721739503680080012966661376438637715420865450114718929076757346120207862947548620569435334895396324086781218017455445315421875871714429627637052871264)</span><br><span class="hljs-string">(157617948261622464254152314994703598559915540865514420750304511730242939622181332932412360735409968696715108030369878546783001121709970056186086411214753185288604, 172554749510163658517336910991986476106096485848063383199885085041705448141288872247307505628175707155625972718684398442883637022240936050198926361252214588735919 )</span><br><span class="hljs-string">(35601692031837010013294196210817440996871532774395053520652383520080490377765688796593595849840043210266473831404618732851470643297944496494254634489110294026906, 83109137089012676168973029782730032714034653700896174331183408691033951856596721848482516578501834370646437639802694578133409539742068584938899820955422945845189 )</span><br><span class="hljs-string">eK=(148943471114336569351357302344843611917995236697008317506292328720097140911033713257363114040728547610446354966023690433690295644571622343830380563979394775174929, 5570936030363753742907439216925560949272269404612411400083981446597152991432704283038752432067099389895408182978262946903003923985122728700021027170168725851130 )</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>给定域 $GF(p)$，椭圆曲线 $E_p: y^2 &#x3D; x^3 + ax + b$ 上任意 $4$ 点 $A_1,A_2,A_3,A_4$，与 $e$ 倍基点 $K(m+1, y_{lift_x})$，$eK$ 的坐标，求 $m$。</p><p>对于点 $A_i(x_i, y_i)$ 有</p><p>$$y_i^2 \equiv x_i^3 + ax_i + b (\text{mod } p)$$</p><p>一样是先消去 $b$，用 $a$ 联立两个方程得到 $p$，然后解出 $a, b$。</p><p>利用 <code>sage</code> 自带的求椭圆曲线阶的函数 <code>E.order()</code>，求得阶为 $P$，这个题就转化为了：</p><p>$K$ 为椭圆曲线 $E_p$ 上一点，已知 $eK$，$e$，求 $K$。</p><p>求出 $e$ 关于阶 $P$ 的逆元即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-built_in">list</span>=[]<br>(x1,y1)=(<span class="hljs-number">121542556343240612458886464797113519174471159973947349739843570016310276547868092596053087152046638137671892191449161589255393370014868931365353180578227117593735</span>, <span class="hljs-number">98840327394835055943257602264613388284774639725847294267402852043945104193135363216749971927532657727021952911622427228151863672295675502233797082353097959401869</span>)<br>(x2,y2)=(<span class="hljs-number">99873546068894326234875062311058443230105529641172112880280159410919160848811689840010700811925066814781044568587853533466146854172381759747204462070834544581290</span>, <span class="hljs-number">54021704113721739503680080012966661376438637715420865450114718929076757346120207862947548620569435334895396324086781218017455445315421875871714429627637052871264</span>)<br>(x3,y3)=(<span class="hljs-number">157617948261622464254152314994703598559915540865514420750304511730242939622181332932412360735409968696715108030369878546783001121709970056186086411214753185288604</span>, <span class="hljs-number">172554749510163658517336910991986476106096485848063383199885085041705448141288872247307505628175707155625972718684398442883637022240936050198926361252214588735919</span> )<br>(x4,y4)=(<span class="hljs-number">35601692031837010013294196210817440996871532774395053520652383520080490377765688796593595849840043210266473831404618732851470643297944496494254634489110294026906</span>, <span class="hljs-number">83109137089012676168973029782730032714034653700896174331183408691033951856596721848482516578501834370646437639802694578133409539742068584938899820955422945845189</span> )<br>eK=(<span class="hljs-number">148943471114336569351357302344843611917995236697008317506292328720097140911033713257363114040728547610446354966023690433690295644571622343830380563979394775174929</span>, <span class="hljs-number">5570936030363753742907439216925560949272269404612411400083981446597152991432704283038752432067099389895408182978262946903003923985122728700021027170168725851130</span> )<br>t1 = (y2**<span class="hljs-number">2</span>-y1**<span class="hljs-number">2</span>-x2**<span class="hljs-number">3</span>+x1**<span class="hljs-number">3</span>)<br>t2 = (y3**<span class="hljs-number">2</span>-y2**<span class="hljs-number">2</span>-x3**<span class="hljs-number">3</span>+x2**<span class="hljs-number">3</span>)<br>t3 = (y4**<span class="hljs-number">2</span>-y3**<span class="hljs-number">2</span>-x4**<span class="hljs-number">3</span>+x3**<span class="hljs-number">3</span>)<br>k1p = t1*(x3-x2) - t2*(x2-x1)<br>k2p = t2*(x4-x3) - t3*(x3-x2)<br>k3p = t1*(x4-x3) - t3*(x2-x1)<br>p = GCD(k1p,k2p)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1000</span>):<br>    <span class="hljs-keyword">while</span>(p % i == <span class="hljs-number">0</span>):<br>        p //= i<br>a = inverse(x2-x1,p)*t1 % p<br>b = (y1**<span class="hljs-number">2</span>-x1**<span class="hljs-number">3</span>-a*x1) % p<br><span class="hljs-built_in">print</span>(a,b,p)<br><br><br>E = EllipticCurve(GF(p),[a,b])<br><span class="hljs-comment">#print(E(eK[0],eK[1]).order())</span><br>order = <span class="hljs-number">137158282955653987884883849194331997445549656524852531414041071058772175899425275190380665644090833671963444295215087328717770758449529501165286488193579249001703</span><br>e = <span class="hljs-number">114514</span><br>t = inverse(e,order)<br>eK=E.lift_x(<span class="hljs-number">148943471114336569351357302344843611917995236697008317506292328720097140911033713257363114040728547610446354966023690433690295644571622343830380563979394775174929</span>)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>((eK*<span class="hljs-built_in">int</span>(t))[<span class="hljs-number">0</span>]-<span class="hljs-number">1</span>)))<br><br><br></code></pre></td></tr></table></figure><h2 id="ezFakekey"><a href="#ezFakekey" class="headerlink" title="ezFakekey"></a>ezFakekey</h2><p>这题应该能算是我的得意之作吧，有种pwn密码的美感，灵感来源于2023熵密杯初始谜题。</p><p>来源于CBC翻转，但做了一点改进。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Random <span class="hljs-keyword">import</span> get_random_bytes<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Callable</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    flag = f.read().strip()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pad</span>(<span class="hljs-params">data</span>):<br>    pad_len = <span class="hljs-number">16</span> - <span class="hljs-built_in">len</span>(data) % <span class="hljs-number">16</span><br>    <span class="hljs-keyword">return</span> data + <span class="hljs-built_in">bytes</span>([pad_len] * pad_len)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">unpad</span>(<span class="hljs-params">data</span>):<br>    pad_len = data[-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> data[:-pad_len]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_key</span>():<br>    <span class="hljs-keyword">return</span> get_random_bytes(<span class="hljs-number">32</span>) <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_iv</span>():<br>    <span class="hljs-keyword">return</span> get_random_bytes(<span class="hljs-number">16</span>) <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">message, key, iv</span>):<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(key) == <span class="hljs-number">32</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(iv) == <span class="hljs-number">16</span><br>    cipher = AES.new(key, AES.MODE_CBC, iv)<br>    ciphertext = cipher.encrypt(pad(message))<br>    <span class="hljs-keyword">return</span> ciphertext<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">ciphertext, key, iv</span>):<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(key) == <span class="hljs-number">32</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(iv) == <span class="hljs-number">16</span><br>    cipher = AES.new(key, AES.MODE_CBC, iv)<br>    plaintext = unpad(cipher.decrypt(ciphertext))<br>    <span class="hljs-keyword">return</span> plaintext<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">challenge</span>(<span class="hljs-params"><span class="hljs-built_in">input</span>:<span class="hljs-type">Callable</span>[[<span class="hljs-built_in">str</span>],<span class="hljs-literal">None</span>], <span class="hljs-built_in">print</span>:<span class="hljs-type">Callable</span>[[<span class="hljs-built_in">str</span>],<span class="hljs-literal">None</span>]</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome to TSCTF-J! If you are Administrator, I will give you a flag!&quot;</span>)<br>    key = generate_key()<br>    iv = generate_iv()<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[E]ncrypt the message&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[D]ecrypt the message&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[G]et the flag&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[Q]uit&#x27;</span>)<br>        option = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt; &#x27;</span>).upper()<br>        <span class="hljs-keyword">if</span> option == <span class="hljs-string">&#x27;E&#x27;</span>:<br>            input_message = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Plz input your message: &#x27;</span>)<br>            m = input_message.encode()<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;Administrator&#x27;</span> <span class="hljs-keyword">in</span> m:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Permission denied!&#x27;</span>)<br>                <span class="hljs-keyword">return</span><br>            ciphertext = encrypt(m, key, iv)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Your ciphertext: <span class="hljs-subst">&#123;ciphertext.<span class="hljs-built_in">hex</span>()&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">elif</span> option == <span class="hljs-string">&#x27;D&#x27;</span>:<br>            ciphertext = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Plz input the ciphertext: &#x27;</span>))<br>            m = ciphertext<br>            plaintext = decrypt(m, key, iv)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Your plaintext: <span class="hljs-subst">&#123;plaintext&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">elif</span> option == <span class="hljs-string">&#x27;G&#x27;</span>:<br>            ciphertext = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Plz input the ciphertext: &#x27;</span>))<br>            m = ciphertext<br>            plaintext = decrypt(m, key, iv)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;Administrator&#x27;</span> <span class="hljs-keyword">in</span> plaintext:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Congurations!Here is flag:<span class="hljs-subst">&#123;flag&#125;</span>&#x27;</span>)<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Permission denied!&#x27;</span>)<br>        <span class="hljs-keyword">elif</span> option == <span class="hljs-string">&#x27;Q&#x27;</span>:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Unknown option:&#x27;</span>, option)<br></code></pre></td></tr></table></figure><p>让我们把CBC原理搬出来<img src="/../pic/image-20240924201801788.png" alt="image-20240924201801788.png">。</p><p>我们需要伪造密文，使得解密后存在b’Administrator’字段。</p><p>观察代码容易发现iv和key都是一样的。</p><p>怎么伪造呢</p><p>我们可以在网上搜索CBC翻转攻击，会发现关键出在异或上。</p><p>假设我们加密b’a’*32 会发现密文分组二是由明文分组一和密文分组一 异或再加密得到的。</p><p>那么反过来，如果我们已经知道了密文分组二在直接经过解密的结果（还没和密文分组一异或之前）我们可以故意构造密文分组一，达到效果。</p><p>用文字说太累了，还是写点公式吧。</p><p>我们加密b’a’*32，这部分会分为为两块，设为$pad_1$,$pad_2$.</p><p>密文分组一</p><p>$cip_1 &#x3D; AES(pad_1\oplus IV)$</p><p>$cip_2 &#x3D; AES(pad_2\oplus cip_1)$</p><p>想要让明文分组2为Administrator</p><p>可令$payload_1 &#x3D; pad_2 \oplus cip_1 \oplus b’Administrator’$</p><p>此时$cip_2$解密完就是$(pad_2\oplus cip_1)$</p><p>和payload1异或就是b’Administrator’</p><p>看来下次得多出点这种纯密码题了，老出数学大家都思维惯性了^^.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pad</span>(<span class="hljs-params">data</span>):<br>    pad_len = <span class="hljs-number">16</span> - <span class="hljs-built_in">len</span>(data) % <span class="hljs-number">16</span><br>    <span class="hljs-keyword">return</span> data + <span class="hljs-built_in">bytes</span>([pad_len] * pad_len)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor_bytes</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(itertools.starmap(operator.xor, <span class="hljs-built_in">zip</span>(a, b)))<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>io = remote(<span class="hljs-string">&#x27;challenges.hazmat.buptmerak.cn&#x27;</span>,<span class="hljs-number">20185</span>)<br>q=<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">555</span>)-<span class="hljs-number">19</span><br>io.recvuntil(<span class="hljs-string">&#x27;&gt; &#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;e&#x27;</span>)<br>io.sendline(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">32</span>)<br>cipher = io.recvline()[<span class="hljs-number">41</span>:-<span class="hljs-number">1</span>]<br>cipher1 = <span class="hljs-built_in">bytes</span>.fromhex(cipher.decode())<br>payload = xor_bytes(xor_bytes(cipher1[:<span class="hljs-number">16</span>], <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">16</span>),pad(<span class="hljs-string">b&#x27;Administrator&#x27;</span>)) + cipher1[<span class="hljs-number">16</span>:]<br>io.recvuntil(<span class="hljs-string">&#x27;&gt; &#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;g&#x27;</span>)<br>io.sendline(payload.<span class="hljs-built_in">hex</span>())<br>io.recvline()<br></code></pre></td></tr></table></figure><p>真的很像pwn题</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>哎 这么快一年就过去了，追上前浪还很远，后浪却已在眼前，今年出的这么难，还是有学弟能做完（虽然有非预期），确实很厉害啊，感觉已经到我今年二月做hgame的水平了。</p><p>去年的我一个非预期，三个简单题，居然还能拿第二，有点狗屎运了现在看来。</p><p>我也得多学点东西，不能被超过才是。</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-京津冀攻防-wp-crypto</title>
    <link href="/2024/09/07/2024-%E4%BA%AC%E6%B4%A5%E5%86%80%E6%94%BB%E9%98%B2-wp-crypto/"/>
    <url>/2024/09/07/2024-%E4%BA%AC%E6%B4%A5%E5%86%80%E6%94%BB%E9%98%B2-wp-crypto/</url>
    
    <content type="html"><![CDATA[<h1 id="2024-京津冀攻防-wp-crypto"><a href="#2024-京津冀攻防-wp-crypto" class="headerlink" title="2024-京津冀攻防-wp-crypto"></a>2024-京津冀攻防-wp-crypto</h1><p>简单比赛简单讲。</p><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><p>虽然是rsa，也可以当做签到题</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">n</span>=48363840702351378505340249679776693226654002838833008943438059390140202146059 <br><span class="hljs-attribute">e</span>=65537 <span class="hljs-attribute">c</span>=26484031967841531957894805513848822590449042897972657337959532703929962519405<br></code></pre></td></tr></table></figure><p>…..直接factordb分解然后解密即可</p><h3 id="奇怪的密码"><a href="#奇怪的密码" class="headerlink" title="奇怪的密码"></a><strong>奇怪的密码</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">RTTjiVuSSazJQgkaAxzIlqkoJNjrHCma</span>(<span class="hljs-params">a,b</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(aLQVDGitlxRDIaIUmPsjiuNUrctWLWDS) ^ <span class="hljs-built_in">ord</span>(rFOZPruKCMieGyqlsazHalDjEurxXZFD)) <span class="hljs-keyword">for</span> aLQVDGitlxRDIaIUmPsjiuNUrctWLWDS,rFOZPruKCMieGyqlsazHalDjEurxXZFD <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a,b)])<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">CTYhfQLxlHLujgcTPvrBvPvCARHRzgZG</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">return</span> sha256(data).digest()[:<span class="hljs-number">8</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cKNBqRWpybOxuHbVodCBTRFtmEZkOPtb</span>(<span class="hljs-params">subkeys, data</span>):<br>    aLQVDGitlxRDIaIUmPsjiuNUrctWLWDS = <span class="hljs-number">0</span><br>    YrUtRcPtwQENaWFbWzxfiwhqCGDIxuvz = data[:<span class="hljs-number">8</span>]<br>    QduyCChIFHDuxjITwVBOCkITFWucRCwX = data[<span class="hljs-number">8</span>:]<br>    <span class="hljs-keyword">for</span> aLQVDGitlxRDIaIUmPsjiuNUrctWLWDS <span class="hljs-keyword">in</span> subkeys:<br>       YrUtRcPtwQENaWFbWzxfiwhqCGDIxuvz = RTTjiVuSSazJQgkaAxzIlqkoJNjrHCma(RTTjiVuSSazJQgkaAxzIlqkoJNjrHCma(CTYhfQLxlHLujgcTPvrBvPvCARHRzgZG(QduyCChIFHDuxjITwVBOCkITFWucRCwX),aLQVDGitlxRDIaIUmPsjiuNUrctWLWDS),YrUtRcPtwQENaWFbWzxfiwhqCGDIxuvz)<br>       YrUtRcPtwQENaWFbWzxfiwhqCGDIxuvz,QduyCChIFHDuxjITwVBOCkITFWucRCwX = QduyCChIFHDuxjITwVBOCkITFWucRCwX,YrUtRcPtwQENaWFbWzxfiwhqCGDIxuvz<br>    <span class="hljs-keyword">return</span> QduyCChIFHDuxjITwVBOCkITFWucRCwX + YrUtRcPtwQENaWFbWzxfiwhqCGDIxuvz<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">RrLEPBfHqeEZLegXpJufxMLPmKNPPCdw</span>(<span class="hljs-params">key</span>):<br>    NZaLtVqEwfLuKnkUjgRUNUoMKBJTuGGa = []<br>    haWaAGvxpxofNMpRfBaOVtaWFSwTpLDX = key<br>    <span class="hljs-keyword">for</span> aLQVDGitlxRDIaIUmPsjiuNUrctWLWDS <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">16</span>):<br>        haWaAGvxpxofNMpRfBaOVtaWFSwTpLDX = CTYhfQLxlHLujgcTPvrBvPvCARHRzgZG(haWaAGvxpxofNMpRfBaOVtaWFSwTpLDX)<br>        NZaLtVqEwfLuKnkUjgRUNUoMKBJTuGGa.append(haWaAGvxpxofNMpRfBaOVtaWFSwTpLDX)<br>    <span class="hljs-keyword">return</span> NZaLtVqEwfLuKnkUjgRUNUoMKBJTuGGa<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">DugSDFJhTeJpOOZBYjLhhJypmfwsrfuI</span>(<span class="hljs-params">key,data</span>):<br>    NZaLtVqEwfLuKnkUjgRUNUoMKBJTuGGa = RrLEPBfHqeEZLegXpJufxMLPmKNPPCdw(key)<br>    <span class="hljs-keyword">return</span> cKNBqRWpybOxuHbVodCBTRFtmEZkOPtb(NZaLtVqEwfLuKnkUjgRUNUoMKBJTuGGa, data).encode(<span class="hljs-string">&#x27;hex&#x27;</span>)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-built_in">print</span> DugSDFJhTeJpOOZBYjLhhJypmfwsrfuI(<span class="hljs-string">&#x27;explorer&#x27;</span>,<span class="hljs-string">&#x27;??flag_is_here??&#x27;</span>) <br><span class="hljs-comment">#the result  is &quot;1fde6a7b2ff15d0abad691215ca5d470&quot;</span><br></code></pre></td></tr></table></figure><p>本题最大难点其实就是改代码：</p><p>第一要f2改变量名 这个不难</p><p>第二要把python2的代码改成python3 这个有点难 因为python2的sha256似乎是string的 总之原来的代码写的很不严谨</p><p>然后只需要知道要把密钥颠倒一下再跑一次festiel结构就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xorstr</span>(<span class="hljs-params">a,b</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(ai) ^ <span class="hljs-built_in">ord</span>(bi)) <span class="hljs-keyword">for</span> ai,bi <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a,b)])<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xorbytes</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>([(ai) ^ (bi) <span class="hljs-keyword">for</span> ai, bi <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a, b)])<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sha256_</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(data, <span class="hljs-built_in">bytes</span>):<br>        data = data.encode()  <span class="hljs-comment"># 如果 data 不是 bytes 类型，则进行编码</span><br>    <span class="hljs-keyword">return</span> sha256(data).digest()[:<span class="hljs-number">8</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">festiel</span>(<span class="hljs-params">subkeys, data</span>):<br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(data, <span class="hljs-built_in">bytes</span>):<br>        data_first = data[:<span class="hljs-number">8</span>].encode()<br>        data_last = data[<span class="hljs-number">8</span>:].encode()<br>    <span class="hljs-keyword">else</span>:<br>        data_first = data[:<span class="hljs-number">8</span>]<br>        data_last = data[<span class="hljs-number">8</span>:]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> subkeys:<br>       data_first = xorbytes(xorbytes(sha256_(data_last),i),data_first)<br>       data_first,data_last = data_last,data_first<br>    <span class="hljs-keyword">return</span> data_last + data_first<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">genkey</span>(<span class="hljs-params">key</span>):<br>    keylist = []<br>    mykey = key<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>        mykey = sha256_(mykey)<br>        keylist.append(mykey)<br>    <span class="hljs-keyword">return</span> keylist<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">key,data</span>):<br>    key_ = genkey(key)<br>    <span class="hljs-keyword">return</span> festiel(key_, data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">key, data</span>):<br>    key_ = genkey(key)<br>    key_.reverse()  <span class="hljs-comment"># 逆转子密钥的顺序</span><br>    <span class="hljs-keyword">return</span> festiel(key_, data)<br><br><span class="hljs-built_in">print</span>(decrypt(<span class="hljs-string">&quot;explorer&quot;</span>,<span class="hljs-string">b&#x27;\x1f\xdej&#123;/\xf1]\n\xba\xd6\x91!\\\xa5\xd4p&#x27;</span>))<br><span class="hljs-comment">#the result  is &quot;1fde6a7b2ff15d0abad691215ca5d470&quot;</span><br></code></pre></td></tr></table></figure><h3 id="byte-LFSR"><a href="#byte-LFSR" class="headerlink" title="byte_LFSR"></a>byte_LFSR</h3><p>其实说实话这题很简单，但是全场应该是只有我们队出了，我不做评价了。XD</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> getrandbits<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> FLAG<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">byte_lfsr</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, init, msg</span>):<br>        self.state = init<br>        self.mask = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">list</span>(<span class="hljs-built_in">bin</span>(msg)[<span class="hljs-number">2</span>:])))<br>        <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(self.mask) % <span class="hljs-number">8</span> != <span class="hljs-number">0</span>:<br>            self.mask.append(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        nextstate = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i, s <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(self.state):<br>            nextstate ^= self.mask[i] * s<br>        self.state = self.state[<span class="hljs-number">1</span>:] + nextstate.to_bytes(<span class="hljs-number">1</span>, byteorder = <span class="hljs-string">&#x27;big&#x27;</span>)<br><br>bl = byte_lfsr(urandom(<span class="hljs-number">8</span> * <span class="hljs-built_in">len</span>(FLAG)), bytes_to_long(FLAG))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(getrandbits(<span class="hljs-number">10</span>)):<br>    bl.<span class="hljs-built_in">next</span>()<br><br>leak_seq = <span class="hljs-string">b&quot;&quot;</span><br>trick = <span class="hljs-number">1</span> + getrandbits(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(FLAG) * <span class="hljs-number">16</span>):<br>    bl.<span class="hljs-built_in">next</span>()<br>    leak_seq += (bl.state[-<span class="hljs-number">1</span>] &gt;&gt; trick).to_bytes(<span class="hljs-number">1</span>, byteorder = <span class="hljs-string">&#x27;big&#x27;</span>)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;output.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(leak_seq.<span class="hljs-built_in">hex</span>())<br></code></pre></td></tr></table></figure><p>思考一下</p><p>异或运算其实就是模二加法 mask只有1和0 所以这个next的过程其实就是矩阵方程</p><p>把生成的字节转化为二进制表示，容易发现trick等于2（很显然不多说 生成一下就知道</p><p>把生成字节的逐位二进制作为矩阵，例如</p><p>11001010 &#x3D; [1,1,0,0,1,0,1,0]</p><p>以此将a化为一个6*608的矩阵</p><p>然后根据这个代码的逻辑我们会发现<br>$$<br>(mask_1,mask_2…mask_{304})<br>\begin{pmatrix}a_{1,1}&amp;a_{1,2}&amp;…&amp;a_{1,6}\\<br>a_{2,1}&amp;a_{2,2}&amp;…&amp;a_{2,6}\\<br>a_{3,1}&amp;a_{3,2}&amp;…&amp;a_{3,6}\\<br>…&amp;…&amp;…&amp;…\\<br>a_{304,1}&amp;a_{304,2}&amp;…&amp;a_{304,6}\\\end{pmatrix}<br>&#x3D;(a_{305,1},a_{305,2},…,a_{305,6})<br>$$<br>所以可以这么横向展开<br>$$<br>(mask_1,mask_2…mask_{304})<br>\begin{pmatrix}a_{1,1}&amp;a_{1,2}&amp;…&amp;a_{1,6}&amp;a_{2,1}&amp;a_{2,2}&amp;…&amp;a_{304,6}\\<br>a_{2,1}&amp;a_{2,2}&amp;…&amp;a_{2,6}&amp;a_{3,1}&amp;a_{3,2}&amp;…&amp;a_{305,6}\\<br>a_{3,1}&amp;a_{3,2}&amp;…&amp;a_{3,6}&amp;a_{4,1}&amp;a_{4,2}&amp;…&amp;a_{306,6}\\<br>…&amp;…&amp;…&amp;…&amp;…&amp;…&amp;…&amp;…\\<br>a_{304,1}&amp;a_{304,2}&amp;…&amp;a_{304,6}&amp;a_{305,1}&amp;a_{305,2}&amp;…&amp;a_{607,6}\\\end{pmatrix}<br>&#x3D;(a_{305,1},a_{305,2},…,a_{305,6},a_{306,1},…,a_{608,6})<br>$$<br>矩阵显然满秩，所以可以解出来</p><p>然后记得注意一下他有可能多一个0，如果解不出来就去除一下，比较简单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br>a = <span class="hljs-string">&quot;360c2b0209350b2a3a202029300a0222292e211f203714190f1a29272c3d1610121c302819291e33051b291e352f091027031b153a350b0324022f1d390124300f0510363700360c2e063404203a193e292b0d091d2c2c1d0a2a051e2201172e3a011d2610261d0b2d1d0a140e3b0128301c13270014130d3d182e3b222c142e25081a3e38332d221b072804083a350b023c292d24063b0424331b0200211439062a3405033c3a0d083d17132134033924340c0019003b192f1e3c2e270a151c23152e0b3c201d3624373a240c0d3c1e2d16160b2a251131360e173a0c25280211153128370d08273d08272e23072d211e2a3c272b00073635060e1b111f15283c1133033f29101937343318151001383d1b3b3c26361b1a001a233d0d200d070f042d2c20323130141c21160c162a0b0a3c3e0d280e212d0e1433221709202c14140c1f3402181a17160e1a342b133439173e051a3212391d203e303a03312d2a22380b000d271702002f13371509200b273c0d18070f232a3119021e100f1d36281525282d2f27231f3136161728242d000a2b1c3b102038043f1f3f130c2b1437163a063f0e21392b2a11192a3922231c333c1f1f05222c2c1b3a11270032191035023632340f2439290f28213e001a04182c2f3522303c35273b2a0e002a1a081a3c1639290127100f110e123c04222c022137280435261e20262d2c2702101d3f0e0b361f002622153d302f3f1a1907171a1627271e200917201b3e112520130b270b3a2836041d3a0921341d361025271b3b1f391b15040f170a36303e1f300c283a28090e2c1821213d1e3213361334252d3a1d16101816370e37393f&quot;</span><br>a = <span class="hljs-built_in">bytes</span>.fromhex(a)<br><br>binary_representation = <span class="hljs-string">&quot;&quot;</span>.join([<span class="hljs-built_in">bin</span>(byte)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> a])<br><br>binary_list = <span class="hljs-built_in">list</span>(binary_representation)<br><br>binary_list = [<span class="hljs-built_in">int</span>(bit) <span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> binary_list]<br><br>num_rows = <span class="hljs-built_in">len</span>(binary_list) // <span class="hljs-number">8</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(binary_list) % <span class="hljs-number">8</span> != <span class="hljs-number">0</span>:<br>    binary_list += [<span class="hljs-number">0</span>] * (<span class="hljs-number">8</span> - <span class="hljs-built_in">len</span>(binary_list) % <span class="hljs-number">8</span>)<br>    num_rows += <span class="hljs-number">1</span><br><br>binary_matrix = Matrix(GF(<span class="hljs-number">2</span>), num_rows, <span class="hljs-number">8</span>, binary_list)[:, <span class="hljs-number">2</span>:]<br><br><span class="hljs-comment">#print(binary_matrix) #608</span><br>last_304_rows = binary_matrix[-<span class="hljs-number">304</span>:, :]<br>vector1 = last_304_rows.<span class="hljs-built_in">list</span>()<span class="hljs-comment">#304*6</span><br>concatenated_matrix = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_rows - <span class="hljs-number">304</span>):<br>    concatenated_matrix.append(binary_matrix[i:i+<span class="hljs-number">304</span>, :].<span class="hljs-built_in">list</span>())<br><br>concatenated_matrix = Matrix(concatenated_matrix)<br>aa = (vector(GF(<span class="hljs-number">2</span>),vector1))<br><br>x = concatenated_matrix.solve_left(vector(aa))<br>x = x[:-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(x)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bits2string</span>(<span class="hljs-params">bs</span>):<br>    s = [<span class="hljs-built_in">str</span>(b) <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> bs]<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(s)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(bits2string(x),<span class="hljs-number">2</span>)))<br><span class="hljs-string">b&#x27;flag&#123;ByT3_L45R_15_Just_A_w3ak3r_LFsr!&#125;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-熵密杯-wp-Crypto</title>
    <link href="/2024/09/05/2024-%E7%86%B5%E5%AF%86%E6%9D%AF-wp-Crypto/"/>
    <url>/2024/09/05/2024-%E7%86%B5%E5%AF%86%E6%9D%AF-wp-Crypto/</url>
    
    <content type="html"><![CDATA[<h1 id="2024-熵密杯-wp-crypto"><a href="#2024-熵密杯-wp-crypto" class="headerlink" title="2024-熵密杯-wp-crypto"></a>2024-熵密杯-wp-crypto</h1><p>很荣幸和学长一起去银川打了这场比赛，本人主要负责前几题，主要还是靠mix学长的审计和bartleby学长的超绝推导，最后拿下二等奖第七名。</p><p>虽然最后差一点ak，但是当时就算做出来最后一题因为没血也只能拿第六，所以也没什么所谓了</p><p>也见到了我非常喜欢的糖醋小鸡块师傅！</p><p>银川连着下了四天的雨，但是羊肉很好吃。</p><p>当时去坐飞机甚至还满座升舱了，运气真好。</p><p>简单写写。</p><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><p>当时忘记把比赛规则带出来了，印象里是三道初始谜题，然后做出来任意一道可以进入第二轮，第二轮有两条路径，flag1-&gt;flag2,flag3-&gt;flag4，必须把flag2和flag4都做出来才能到最终环节，最终环节就是一个签名的伪造，当时就是卡在最终环节一直没签上。</p><h4 id="初始谜题1"><a href="#初始谜题1" class="headerlink" title="初始谜题1"></a>初始谜题1</h4><p>其实说实话，熵密杯的题和一般的ctf题目非常不一样，比如我还没有见到用sympy写题面的题目。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> Mod, Integer<br><span class="hljs-keyword">from</span> sympy.core.numbers <span class="hljs-keyword">import</span> mod_inverse<br><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-comment"># 模数</span><br>N_HEX = <span class="hljs-string">&quot;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123&quot;</span><br>MODULUS = Integer(<span class="hljs-built_in">int</span>(N_HEX, <span class="hljs-number">16</span>))<br>MSG_PREFIX = <span class="hljs-string">&quot;CryptoCup message:&quot;</span><br><br><br><span class="hljs-comment"># 加密函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt_message</span>(<span class="hljs-params">message, key</span>):<br>    <span class="hljs-comment"># 添加前缀</span><br>    message_with_prefix = MSG_PREFIX + message<br>    message_bytes = message_with_prefix.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    message_len = <span class="hljs-built_in">len</span>(message_bytes)<br>    num_blocks = (message_len + <span class="hljs-number">15</span>) // <span class="hljs-number">16</span><br>    blocks = [message_bytes[i * <span class="hljs-number">16</span>:(i + <span class="hljs-number">1</span>) * <span class="hljs-number">16</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_blocks)]<br><br>    <span class="hljs-comment"># 进行0填充</span><br>    blocks[-<span class="hljs-number">1</span>] = blocks[-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">16</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br><br>    encrypted_blocks = []<br><br>    k = key<br><br>    <span class="hljs-comment"># 加密每个分组</span><br>    <span class="hljs-keyword">for</span> block <span class="hljs-keyword">in</span> blocks:<br>        block_int = <span class="hljs-built_in">int</span>.from_bytes(block, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;block_int &quot;</span>,block_int)<br>        encrypted_block_int = Mod(block_int * k, MODULUS)<br>        encrypted_blocks.append(encrypted_block_int)<br>        k += <span class="hljs-number">1</span>  <span class="hljs-comment"># 密钥自增1</span><br><br>    <span class="hljs-built_in">print</span>(encrypted_blocks)<br>    <br><br>    encrypted_list = []<br>    <span class="hljs-comment"># 将加密后的分组连接成最终的密文</span><br>    encrypted_list.append(<br>        [<span class="hljs-built_in">int</span>(block_int).to_bytes(<span class="hljs-number">32</span>, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>) <span class="hljs-keyword">for</span> block_int <span class="hljs-keyword">in</span> encrypted_blocks]<br>    )<br><br>    <span class="hljs-keyword">return</span> encrypted_list<br><br><br><span class="hljs-comment"># 解密函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt_message</span>(<span class="hljs-params">encrypted_message, key</span>):<br>    num_blocks = <span class="hljs-built_in">len</span>(encrypted_message) // <span class="hljs-number">32</span><br>    blocks = [encrypted_message[i * <span class="hljs-number">32</span>:(i + <span class="hljs-number">1</span>) * <span class="hljs-number">32</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_blocks)]<br><br>    decrypted_blocks = []<br><br>    k = key<br><br>    <span class="hljs-comment"># 解密每个分组</span><br>    <span class="hljs-keyword">for</span> block <span class="hljs-keyword">in</span> blocks:<br>        block_int = <span class="hljs-built_in">int</span>.from_bytes(block, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)<br>        key_inv = mod_inverse(k, MODULUS)<br>        decrypted_block_int = Mod(block_int * key_inv, MODULUS)<br>        decrypted_blocks.append(decrypted_block_int)<br>        k += <span class="hljs-number">1</span>  <span class="hljs-comment"># 密钥自增1</span><br><br>    <span class="hljs-comment"># 将解密后的分组连接成最终的明文</span><br>    decrypted_message = <span class="hljs-string">b&#x27;&#x27;</span>.join(<br>        long_to_bytes(<span class="hljs-built_in">int</span>(block_int)) <span class="hljs-keyword">for</span> block_int <span class="hljs-keyword">in</span> decrypted_blocks<br>    )<br><br>    <span class="hljs-comment"># 去除前缀</span><br>    <span class="hljs-keyword">if</span> decrypted_message.startswith(MSG_PREFIX.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)):<br>        decrypted_message = decrypted_message[<span class="hljs-built_in">len</span>(MSG_PREFIX):]<br><br>    <span class="hljs-keyword">return</span> decrypted_message<br><br><br><span class="hljs-comment"># 测试</span><br>initial_key = Integer(<span class="hljs-number">0x123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0</span>)<br>message = <span class="hljs-string">&quot;Hello, this is a test message.asasfaefaasasaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;</span><br><span class="hljs-comment">#print(&quot;Original Message:&quot;, message)</span><br><br><span class="hljs-comment"># 加密</span><br>encrypted_message = encrypt_message(message, initial_key)<br><span class="hljs-comment">#print(&quot;Encrypted Message (hex):&quot;, encrypted_message.hex())</span><br><span class="hljs-built_in">print</span>(encrypted_message)<br><span class="hljs-comment"># 解密</span><br>decrypted_message = decrypt_message(encrypted_message, initial_key)<br><span class="hljs-comment">#print(&quot;Decrypted Message:&quot;, decrypted_message)</span><br><br><br>ciphertext = long_to_bytes(<span class="hljs-number">0x5cae321c794c785089ccebc7fcdf834937857ee003b8e84a61392ddc774cfc16a7e0ca4268d31c0db6f993431df2e180e4ede0d2f6e51cd503c4dfc0c059a09610478208399e45679cad7651c1dd1060aad3137dc0d464ac67e4b776266895a5f4d760d64ed46b7e2302793ba366fb4d3f97abfa9f88b9a9329902764d555cc1</span>)<br><span class="hljs-built_in">print</span>(encrypt_message(<span class="hljs-string">&#x27;&#x27;</span>,initial_key))<br><span class="hljs-built_in">print</span>(encrypt_message(<span class="hljs-string">&#x27;0&#x27;</span>,initial_key))<br><br><br></code></pre></td></tr></table></figure><p>当时看的时候没什么感觉，感觉可能是格？后来队友提醒说这个部分明文是已知的，这才恍然大悟，可以直接解出key，然后后面就是简单的求逆的过程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#flag1</span><br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> Mod, Integer<br><span class="hljs-keyword">from</span> sympy.core.numbers <span class="hljs-keyword">import</span> mod_inverse<br><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>cipher = <span class="hljs-number">0x5cae321c794c785089ccebc7fcdf834937857ee003b8e84a61392ddc774cfc16a7e0ca4268d31c0db6f993431df2e180e4ede0d2f6e51cd503c4dfc0c059a09610478208399e45679cad7651c1dd1060aad3137dc0d464ac67e4b776266895a5f4d760d64ed46b7e2302793ba366fb4d3f97abfa9f88b9a9329902764d555cc1</span><br>N_HEX = <span class="hljs-number">0xFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123</span><br><br>initial_key = Integer(<span class="hljs-number">0x123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0</span>)<br>a = <span class="hljs-number">89652660640613347754090896429354803559</span><br>b = <span class="hljs-number">37681243689413481885669644652084398160214259040017619160297065760370037876043</span><br><span class="hljs-built_in">print</span>((b*inverse(a,N_HEX))%N_HEX)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(initial_key))<br><br><br>given_cipher = <span class="hljs-number">0x5cae321c794c785089ccebc7fcdf834937857ee003b8e84a61392ddc774cfc16a7e0ca4268d31c0db6f993431df2e180e4ede0d2f6e51cd503c4dfc0c059a09610478208399e45679cad7651c1dd1060aad3137dc0d464ac67e4b776266895a5f4d760d64ed46b7e2302793ba366fb4d3f97abfa9f88b9a9329902764d555cc1</span><br>cipher_byte = long_to_bytes(given_cipher)<br>num_blocks = <span class="hljs-built_in">len</span>(cipher_byte) // <span class="hljs-number">32</span><br>blocks = [cipher_byte[i * <span class="hljs-number">32</span>:(i + <span class="hljs-number">1</span>) * <span class="hljs-number">32</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_blocks)]<br>block_int = [bytes_to_long(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> blocks]<br><span class="hljs-built_in">print</span>(block_int)<br>a = <span class="hljs-number">89652660640613347754090896429354803559</span><br><span class="hljs-built_in">print</span>(block_int[<span class="hljs-number">0</span>]*inverse(a,N_HEX)%N_HEX)<br>hidekey = block_int[<span class="hljs-number">0</span>]*inverse(a,N_HEX)%N_HEX<br><br>N_HEX = <span class="hljs-string">&quot;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123&quot;</span><br>MODULUS = Integer(<span class="hljs-built_in">int</span>(N_HEX, <span class="hljs-number">16</span>))<br>MSG_PREFIX = <span class="hljs-string">&quot;CryptoCup message:&quot;</span><br><br><span class="hljs-comment"># 解密函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt_message</span>(<span class="hljs-params">encrypted_message, key</span>):<br>    num_blocks = <span class="hljs-built_in">len</span>(encrypted_message) // <span class="hljs-number">32</span><br>    blocks = [encrypted_message[i * <span class="hljs-number">32</span>:(i + <span class="hljs-number">1</span>) * <span class="hljs-number">32</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_blocks)]<br><br>    decrypted_blocks = []<br><br>    k = key<br><br>    <span class="hljs-comment"># 解密每个分组</span><br>    <span class="hljs-keyword">for</span> block <span class="hljs-keyword">in</span> blocks:<br>        block_int = <span class="hljs-built_in">int</span>.from_bytes(block, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)<br>        key_inv = mod_inverse(k, MODULUS)<br>        decrypted_block_int = Mod(block_int * key_inv, MODULUS)<br>        decrypted_blocks.append(decrypted_block_int)<br>        k += <span class="hljs-number">1</span>  <span class="hljs-comment"># 密钥自增1</span><br><br>    <span class="hljs-comment"># 将解密后的分组连接成最终的明文</span><br>    decrypted_message = <span class="hljs-string">b&#x27;&#x27;</span>.join(<br>        long_to_bytes(<span class="hljs-built_in">int</span>(block_int)) <span class="hljs-keyword">for</span> block_int <span class="hljs-keyword">in</span> decrypted_blocks<br>    )<br><br>    <span class="hljs-comment"># 去除前缀</span><br>    <span class="hljs-keyword">if</span> decrypted_message.startswith(MSG_PREFIX.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)):<br>        decrypted_message = decrypted_message[<span class="hljs-built_in">len</span>(MSG_PREFIX):]<br><br>    <span class="hljs-keyword">return</span> decrypted_message<br><br><span class="hljs-built_in">print</span>(decrypt_message(cipher_byte,hidekey))<br></code></pre></td></tr></table></figure><p>简单解密完之后是一串字符，然后用他给的client端提交即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">验证通过<br>flag&#123;8FSPTfuRIdOIxpoWRrXEBph93le6GjEv&#125;<br>gitea账号：giteauser2024<br>gitea口令：S(*HD^WY63y89TY71<br>提示：gitea账号和口令用于登录第二环节的gitea服务器，请注意保存！<br></code></pre></td></tr></table></figure><h4 id="初始谜题2"><a href="#初始谜题2" class="headerlink" title="初始谜题2"></a>初始谜题2</h4><p>sm3长度扩展攻击，包括md类的所有散列函数都会有这种问题。</p><p>其实之前在数信杯做过这道题了，但是之前没出，保存的脚本在比赛的时候死活用不上，最后一个人熬到12点硬看源码做出来了，当时10多人出，没拿到血还是很可惜。</p><p>简单分析一下源码吧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sm3_hash</span>(<span class="hljs-params">msg</span>):<br>    <span class="hljs-comment"># print(msg)</span><br>    len1 = <span class="hljs-built_in">len</span>(msg)<br>    reserve1 = len1 % <span class="hljs-number">64</span><br>    msg.append(<span class="hljs-number">0x80</span>)<br>    reserve1 = reserve1 + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 56-64, add 64 byte</span><br>    range_end = <span class="hljs-number">56</span><br>    <span class="hljs-keyword">if</span> reserve1 &gt; range_end:<br>        range_end = range_end + <span class="hljs-number">64</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(reserve1, range_end):<br>        msg.append(<span class="hljs-number">0x00</span>)<br><br>    bit_length = (len1) * <span class="hljs-number">8</span><br>    bit_length_str = [bit_length % <span class="hljs-number">0x100</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        bit_length = <span class="hljs-built_in">int</span>(bit_length / <span class="hljs-number">0x100</span>)<br>        bit_length_str.append(bit_length % <span class="hljs-number">0x100</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        msg.append(bit_length_str[<span class="hljs-number">7</span>-i])<br><br>    group_count = <span class="hljs-built_in">round</span>(<span class="hljs-built_in">len</span>(msg) / <span class="hljs-number">64</span>)<br><br>    B = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, group_count):<br>        B.append(msg[i*<span class="hljs-number">64</span>:(i+<span class="hljs-number">1</span>)*<span class="hljs-number">64</span>])<br><br>    V = []<br>    V.append(IV)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, group_count):<br>        V.append(sm3_cf(V[i], B[i]))<br><br>    y = V[i+<span class="hljs-number">1</span>]<br>    result = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> y:<br>        result = <span class="hljs-string">&#x27;%s%08x&#x27;</span> % (result, i)<br>    <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><p>大概就是说如果明文大于等于56字节就会分块，但是他的这一次的hash值是由上一块的hash值和这一块明文共同决定的。</p><p>$${hash}<em>i &#x3D; CF({hash}</em>{i-1},{plain}_{i-1})$$</p><p>所以说如果上一块明文和上一块的hash都是已知的，那么我们可以扩展他的长度，来推断出下一块的hash以及最终的$sm3(plain)$。</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">from</span> gmssl <span class="hljs-keyword">import</span> sm3<br><br><br><span class="hljs-comment"># 读取HMAC key文件</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_hmac_key</span>(<span class="hljs-params">file_path</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        hmac_key = f.read().strip()<br>    <span class="hljs-keyword">return</span> hmac_key<br><br><br><span class="hljs-comment"># 生成token</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_token</span>(<span class="hljs-params">hmac_key, counter</span>):<br>    <span class="hljs-comment"># 如果HMAC_KEY长度不足32字节，则在末尾补0，超过64字节则截断</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(hmac_key) &lt; <span class="hljs-number">32</span>:<br>        hmac_key = hmac_key.ljust(<span class="hljs-number">32</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(hmac_key) &gt; <span class="hljs-number">32</span>:<br>        hmac_key = hmac_key[:<span class="hljs-number">32</span>]<br><br>    <span class="hljs-comment"># 将计数器转换为字节表示</span><br>    counter_bytes = counter.to_bytes((counter.bit_length() + <span class="hljs-number">7</span>) // <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;big&#x27;</span>)<br>    <span class="hljs-comment"># print(&quot;counter_bytes:&quot;, binascii.hexlify(counter_bytes))</span><br><br>    tobe_hashed = <span class="hljs-built_in">bytearray</span>(hmac_key + counter_bytes)<br><br>    <span class="hljs-comment"># print(&quot;tobe_hashed:&quot;, binascii.hexlify(tobe_hashed))</span><br><br>    <span class="hljs-comment"># 使用SM3算法计算哈希值</span><br>    sm3_hash = sm3.sm3_hash(tobe_hashed)<br><br>    <span class="hljs-comment"># 将SM3的哈希值转换为十六进制字符串作为token</span><br>    token = sm3_hash<br><br>    <span class="hljs-keyword">return</span> token<br><br><br>current_counter = <span class="hljs-number">0</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">verify_token</span>(<span class="hljs-params">hmac_key, counter, token</span>):<br>    <span class="hljs-comment"># 生成token</span><br>    generated_token = generate_token(hmac_key, counter)<br>    <span class="hljs-keyword">global</span> current_counter<br>    <span class="hljs-comment"># 比较生成的token和输入的token是否相同</span><br>    <span class="hljs-keyword">if</span> generated_token == token:<br>        <span class="hljs-keyword">if</span> counter &amp; <span class="hljs-number">0xFFFFFFFF</span> &gt; current_counter:<br>            current_counter = counter &amp; <span class="hljs-number">0xFFFFFFFF</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;current_counter: &quot;</span>, <span class="hljs-built_in">hex</span>(current_counter))<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Success&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Error: counter must be increasing&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Error: token not match&quot;</span><br><br><br><span class="hljs-comment"># 假设HMAC key文件路径</span><br>hmac_key_file = <span class="hljs-string">&#x27;hmac_key.txt&#x27;</span><br><span class="hljs-comment"># 假设计数器值</span><br>counter = <span class="hljs-number">0x12345678</span><br><br><span class="hljs-comment"># 读取HMAC key</span><br>hmac_key = read_hmac_key(hmac_key_file)<br><br><span class="hljs-comment"># 生成token</span><br>token = generate_token(hmac_key, counter)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Generated token:&quot;</span>, token)<br><span class="hljs-built_in">print</span>(verify_token(hmac_key, counter, token))<br><br></code></pre></td></tr></table></figure><p>在这个题目里其实有一个要求就是counter必须递增，这看起来很难其实只需要让最后的明文是\xff*8即可。</p><p>简单上个exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmssl <span class="hljs-keyword">import</span> sm3<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> ceil<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>rotl = <span class="hljs-keyword">lambda</span> x, n:((x &lt;&lt; n) &amp; <span class="hljs-number">0xffffffff</span>) | ((x &gt;&gt; (<span class="hljs-number">32</span> - n)) &amp; <span class="hljs-number">0xffffffff</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">turn</span>(<span class="hljs-params">a</span>):<br>    vectors = []<br>    <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(a), <span class="hljs-number">8</span>):<br>        vectors.append(<span class="hljs-built_in">int</span>(a[r:r + <span class="hljs-number">8</span>], <span class="hljs-number">16</span>))<br>    <span class="hljs-keyword">return</span> (vectors)<br>msg = <span class="hljs-built_in">bytearray</span>(<span class="hljs-string">b&#x27;testtesttesttesttesttesttesttesttest&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xxx</span>(<span class="hljs-params">a</span>):<br>    result = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>        result = <span class="hljs-string">&#x27;%s%08x&#x27;</span> % (result, i)<br>    <span class="hljs-keyword">return</span> result<br><br>a = (sm3.sm3_hash(msg))<br><span class="hljs-comment">#hmackey+counter = 32+4</span><br>given_hash = <span class="hljs-string">&quot;e965992687d956f6c38748bc7334a98a8e65530ace4742ea88ecdebd65fe3cc9&quot;</span><br><br>counter = <span class="hljs-number">0x79209583</span><br>my_B = <span class="hljs-built_in">bytearray</span>(<span class="hljs-string">b&#x27;\xff\xff\xff\xff\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02 &#x27;</span>)<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;!!!!&quot;</span>,xxx(sm3.sm3_cf(turn(given_hash),my_B)))<br><span class="hljs-comment">#5bfa469312fc46e45fb27a492b6394b2d830aa13d29384edff66418148914c2e</span><br><span class="hljs-built_in">print</span>((sm3.sm3_hash(<span class="hljs-built_in">bytearray</span>(<span class="hljs-string">b&#x27;testtesttesttesttesttesttesttesttest\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01 \xff\xff\xff\xff&#x27;</span>))))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(bytes_to_long(<span class="hljs-string">b&#x27;testtesttesttesttesttesttesttest\x75\xa5\xcd\xe4\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01 \xff\xff\xff\xff&#x27;</span>)))<br></code></pre></td></tr></table></figure><h4 id="初始谜题3"><a href="#初始谜题3" class="headerlink" title="初始谜题3"></a>初始谜题3</h4><p>这题就是一个lwe，但是是学长做的，后来看了发现e只有2**16，所以是完全可以爆破的。</p><p>所以把e爆破出来直接解方程就出了，当时做出来的人也很多。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sympy <span class="hljs-keyword">as</span> sp<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-comment"># 设置参数</span><br>n = <span class="hljs-number">16</span>  <span class="hljs-comment"># 向量长度</span><br>q = <span class="hljs-number">251</span>  <span class="hljs-comment"># 模数</span><br><br><span class="hljs-comment"># 生成随机噪声向量e</span><br>e = sp.Matrix(sp.randMatrix(n, <span class="hljs-number">1</span>, <span class="hljs-built_in">min</span>=<span class="hljs-number">0</span>, <span class="hljs-built_in">max</span>=<span class="hljs-number">1</span>))  <span class="hljs-comment"># 噪声向量</span><br><br><span class="hljs-comment"># 生成随机n维私钥向量s和n*n矩阵A</span><br>s = sp.Matrix(sp.randMatrix(n, <span class="hljs-number">1</span>, <span class="hljs-built_in">min</span>=<span class="hljs-number">0</span>, <span class="hljs-built_in">max</span>=q - <span class="hljs-number">1</span>))  <span class="hljs-comment"># 私钥向量</span><br>Temp = sp.Matrix(sp.randMatrix(n, n, <span class="hljs-built_in">min</span>=<span class="hljs-number">0</span>, <span class="hljs-built_in">max</span>=q - <span class="hljs-number">1</span>))  <span class="hljs-comment"># 中间变量矩阵Temp</span><br>A = Temp.inv_mod(q)  <span class="hljs-comment"># 计算矩阵Temp在模 q 下的逆矩阵作为A</span><br><br><span class="hljs-comment"># 计算n维公钥向量b</span><br>b = (A * s + e) % q  <span class="hljs-comment"># 公钥向量b = A * s + e</span><br><br><br><span class="hljs-comment"># 加密函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">message, A, b</span>):<br>    m_bin = <span class="hljs-built_in">bin</span>(message)[<span class="hljs-number">2</span>:].zfill(n)  <span class="hljs-comment"># 将消息转换为16比特的二进制字符串</span><br>    m = sp.Matrix([<span class="hljs-built_in">int</span>(bit) <span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> m_bin])  <span class="hljs-comment"># 转换为SymPy矩阵</span><br>    x = sp.Matrix(sp.randMatrix(n, n, <span class="hljs-built_in">min</span>=<span class="hljs-number">0</span>, <span class="hljs-built_in">max</span>=q // (n * <span class="hljs-number">4</span>)))  <span class="hljs-comment"># 随机产生一个n*n的矩阵x</span><br>    e1 = sp.Matrix(sp.randMatrix(n, <span class="hljs-number">1</span>, <span class="hljs-built_in">min</span>=<span class="hljs-number">0</span>, <span class="hljs-built_in">max</span>=<span class="hljs-number">1</span>))  <span class="hljs-comment"># 随机产生一个n维噪声向量e</span><br>    c1 = (x * A) % q  <span class="hljs-comment"># 密文部分c1 =   x * A</span><br>    c2 = (x * b + e1 + m * (q // <span class="hljs-number">2</span>)) % q  <span class="hljs-comment"># 密文部分c2 = x * b + e1 + m * q/2</span><br>    <span class="hljs-keyword">return</span> c1, c2<br><br><br><span class="hljs-comment"># 解密函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">c1, c2, s</span>):<br>    m_dec = (c2 - c1 * s) % q<br>    m_rec = m_dec.applyfunc(<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">round</span>(<span class="hljs-number">2</span> * x / q) % <span class="hljs-number">2</span>)  <span class="hljs-comment"># 还原消息</span><br>    m_bin = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">str</span>(bit) <span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> m_rec])  <span class="hljs-comment"># 将SymPy矩阵转换为二进制字符串</span><br>    m_rec_int = <span class="hljs-built_in">int</span>(m_bin, <span class="hljs-number">2</span>)  <span class="hljs-comment"># 将二进制字符串转换为整数</span><br>    <span class="hljs-keyword">return</span> m_rec_int<br><br><br><span class="hljs-comment"># 测试加解密</span><br>message = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span> ** n - <span class="hljs-number">1</span>)  <span class="hljs-comment"># 要加密的消息，随机生成一个16比特整数</span><br>c1, c2 = encrypt(message, A, b)  <span class="hljs-comment"># 加密</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;原始消息: &quot;</span>, message)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;公钥A=sp.&quot;</span>, A)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;公钥b=sp.&quot;</span>, b)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;密文c1=sp.&quot;</span>, c1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;密文c2=sp.&quot;</span>, c2)<br><br>decrypted_message = decrypt(c1, c2, s)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密后的消息: &quot;</span>, decrypted_message)  <span class="hljs-comment"># 输出解密后的消息</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python">q = <span class="hljs-number">251</span><br>G = GF(q)<br>A = Matrix(G,[[<span class="hljs-number">221</span>, <span class="hljs-number">127</span>, <span class="hljs-number">167</span>, <span class="hljs-number">140</span>, <span class="hljs-number">199</span>, <span class="hljs-number">232</span>, <span class="hljs-number">222</span>, <span class="hljs-number">196</span>, <span class="hljs-number">1</span>, <span class="hljs-number">246</span>, <span class="hljs-number">49</span>, <span class="hljs-number">165</span>, <span class="hljs-number">59</span>, <span class="hljs-number">97</span>, <span class="hljs-number">206</span>, <span class="hljs-number">122</span>], [<span class="hljs-number">109</span>, <span class="hljs-number">186</span>, <span class="hljs-number">186</span>, <span class="hljs-number">138</span>, <span class="hljs-number">216</span>, <span class="hljs-number">115</span>, <span class="hljs-number">65</span>, <span class="hljs-number">163</span>, <span class="hljs-number">139</span>, <span class="hljs-number">166</span>, <span class="hljs-number">186</span>, <span class="hljs-number">108</span>, <span class="hljs-number">235</span>, <span class="hljs-number">26</span>, <span class="hljs-number">146</span>, <span class="hljs-number">50</span>], [<span class="hljs-number">106</span>, <span class="hljs-number">74</span>, <span class="hljs-number">19</span>, <span class="hljs-number">10</span>, <span class="hljs-number">111</span>, <span class="hljs-number">88</span>, <span class="hljs-number">10</span>, <span class="hljs-number">142</span>, <span class="hljs-number">148</span>, <span class="hljs-number">74</span>, <span class="hljs-number">84</span>, <span class="hljs-number">44</span>, <span class="hljs-number">76</span>, <span class="hljs-number">125</span>, <span class="hljs-number">135</span>, <span class="hljs-number">48</span>], [<span class="hljs-number">138</span>, <span class="hljs-number">24</span>, <span class="hljs-number">193</span>, <span class="hljs-number">190</span>, <span class="hljs-number">12</span>, <span class="hljs-number">181</span>, <span class="hljs-number">229</span>, <span class="hljs-number">44</span>, <span class="hljs-number">48</span>, <span class="hljs-number">246</span>, <span class="hljs-number">115</span>, <span class="hljs-number">1</span>, <span class="hljs-number">33</span>, <span class="hljs-number">8</span>, <span class="hljs-number">164</span>, <span class="hljs-number">47</span>], [<span class="hljs-number">172</span>, <span class="hljs-number">68</span>, <span class="hljs-number">185</span>, <span class="hljs-number">199</span>, <span class="hljs-number">78</span>, <span class="hljs-number">133</span>, <span class="hljs-number">50</span>, <span class="hljs-number">94</span>, <span class="hljs-number">160</span>, <span class="hljs-number">100</span>, <span class="hljs-number">202</span>, <span class="hljs-number">18</span>, <span class="hljs-number">229</span>, <span class="hljs-number">129</span>, <span class="hljs-number">25</span>, <span class="hljs-number">66</span>], [<span class="hljs-number">47</span>, <span class="hljs-number">244</span>, <span class="hljs-number">225</span>, <span class="hljs-number">149</span>, <span class="hljs-number">106</span>, <span class="hljs-number">126</span>, <span class="hljs-number">78</span>, <span class="hljs-number">84</span>, <span class="hljs-number">193</span>, <span class="hljs-number">24</span>, <span class="hljs-number">183</span>, <span class="hljs-number">136</span>, <span class="hljs-number">99</span>, <span class="hljs-number">64</span>, <span class="hljs-number">169</span>, <span class="hljs-number">217</span>], [<span class="hljs-number">147</span>, <span class="hljs-number">33</span>, <span class="hljs-number">234</span>, <span class="hljs-number">101</span>, <span class="hljs-number">134</span>, <span class="hljs-number">29</span>, <span class="hljs-number">210</span>, <span class="hljs-number">217</span>, <span class="hljs-number">39</span>, <span class="hljs-number">246</span>, <span class="hljs-number">162</span>, <span class="hljs-number">212</span>, <span class="hljs-number">40</span>, <span class="hljs-number">37</span>, <span class="hljs-number">137</span>, <span class="hljs-number">101</span>], [<span class="hljs-number">140</span>, <span class="hljs-number">214</span>, <span class="hljs-number">38</span>, <span class="hljs-number">115</span>, <span class="hljs-number">32</span>, <span class="hljs-number">247</span>, <span class="hljs-number">125</span>, <span class="hljs-number">99</span>, <span class="hljs-number">240</span>, <span class="hljs-number">126</span>, <span class="hljs-number">12</span>, <span class="hljs-number">46</span>, <span class="hljs-number">169</span>, <span class="hljs-number">232</span>, <span class="hljs-number">66</span>, <span class="hljs-number">8</span>], [<span class="hljs-number">90</span>, <span class="hljs-number">127</span>, <span class="hljs-number">223</span>, <span class="hljs-number">1</span>, <span class="hljs-number">39</span>, <span class="hljs-number">24</span>, <span class="hljs-number">180</span>, <span class="hljs-number">15</span>, <span class="hljs-number">100</span>, <span class="hljs-number">114</span>, <span class="hljs-number">62</span>, <span class="hljs-number">89</span>, <span class="hljs-number">157</span>, <span class="hljs-number">68</span>, <span class="hljs-number">159</span>, <span class="hljs-number">174</span>], [<span class="hljs-number">214</span>, <span class="hljs-number">213</span>, <span class="hljs-number">243</span>, <span class="hljs-number">113</span>, <span class="hljs-number">121</span>, <span class="hljs-number">48</span>, <span class="hljs-number">29</span>, <span class="hljs-number">54</span>, <span class="hljs-number">90</span>, <span class="hljs-number">236</span>, <span class="hljs-number">32</span>, <span class="hljs-number">74</span>, <span class="hljs-number">247</span>, <span class="hljs-number">87</span>, <span class="hljs-number">37</span>, <span class="hljs-number">97</span>], [<span class="hljs-number">121</span>, <span class="hljs-number">189</span>, <span class="hljs-number">117</span>, <span class="hljs-number">202</span>, <span class="hljs-number">32</span>, <span class="hljs-number">77</span>, <span class="hljs-number">41</span>, <span class="hljs-number">36</span>, <span class="hljs-number">117</span>, <span class="hljs-number">23</span>, <span class="hljs-number">46</span>, <span class="hljs-number">76</span>, <span class="hljs-number">194</span>, <span class="hljs-number">141</span>, <span class="hljs-number">7</span>, <span class="hljs-number">138</span>], [<span class="hljs-number">183</span>, <span class="hljs-number">241</span>, <span class="hljs-number">176</span>, <span class="hljs-number">248</span>, <span class="hljs-number">149</span>, <span class="hljs-number">56</span>, <span class="hljs-number">163</span>, <span class="hljs-number">17</span>, <span class="hljs-number">181</span>, <span class="hljs-number">40</span>, <span class="hljs-number">115</span>, <span class="hljs-number">246</span>, <span class="hljs-number">95</span>, <span class="hljs-number">70</span>, <span class="hljs-number">128</span>, <span class="hljs-number">164</span>], [<span class="hljs-number">120</span>, <span class="hljs-number">49</span>, <span class="hljs-number">189</span>, <span class="hljs-number">204</span>, <span class="hljs-number">152</span>, <span class="hljs-number">29</span>, <span class="hljs-number">229</span>, <span class="hljs-number">172</span>, <span class="hljs-number">155</span>, <span class="hljs-number">140</span>, <span class="hljs-number">127</span>, <span class="hljs-number">3</span>, <span class="hljs-number">110</span>, <span class="hljs-number">34</span>, <span class="hljs-number">48</span>, <span class="hljs-number">49</span>], [<span class="hljs-number">101</span>, <span class="hljs-number">156</span>, <span class="hljs-number">234</span>, <span class="hljs-number">128</span>, <span class="hljs-number">219</span>, <span class="hljs-number">201</span>, <span class="hljs-number">225</span>, <span class="hljs-number">43</span>, <span class="hljs-number">22</span>, <span class="hljs-number">217</span>, <span class="hljs-number">247</span>, <span class="hljs-number">187</span>, <span class="hljs-number">13</span>, <span class="hljs-number">96</span>, <span class="hljs-number">124</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">129</span>, <span class="hljs-number">105</span>, <span class="hljs-number">45</span>, <span class="hljs-number">14</span>, <span class="hljs-number">168</span>, <span class="hljs-number">214</span>, <span class="hljs-number">33</span>, <span class="hljs-number">183</span>, <span class="hljs-number">37</span>, <span class="hljs-number">243</span>, <span class="hljs-number">11</span>, <span class="hljs-number">3</span>, <span class="hljs-number">194</span>, <span class="hljs-number">17</span>, <span class="hljs-number">53</span>, <span class="hljs-number">74</span>], [<span class="hljs-number">210</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">165</span>, <span class="hljs-number">90</span>, <span class="hljs-number">142</span>, <span class="hljs-number">189</span>, <span class="hljs-number">82</span>, <span class="hljs-number">39</span>, <span class="hljs-number">159</span>, <span class="hljs-number">183</span>, <span class="hljs-number">164</span>, <span class="hljs-number">82</span>, <span class="hljs-number">235</span>, <span class="hljs-number">239</span>, <span class="hljs-number">141</span>]])<br><br>b = Matrix(G,[[<span class="hljs-number">208</span>], [<span class="hljs-number">185</span>], [<span class="hljs-number">45</span>], [<span class="hljs-number">175</span>], [<span class="hljs-number">138</span>], [<span class="hljs-number">113</span>], [<span class="hljs-number">217</span>], [<span class="hljs-number">206</span>], [<span class="hljs-number">205</span>], [<span class="hljs-number">15</span>], [<span class="hljs-number">184</span>], [<span class="hljs-number">135</span>], [<span class="hljs-number">43</span>], [<span class="hljs-number">95</span>], [<span class="hljs-number">234</span>], [<span class="hljs-number">170</span>]])<br><br>c1 = Matrix(G,[[<span class="hljs-number">127</span>, <span class="hljs-number">90</span>, <span class="hljs-number">38</span>, <span class="hljs-number">137</span>, <span class="hljs-number">249</span>, <span class="hljs-number">34</span>, <span class="hljs-number">205</span>, <span class="hljs-number">116</span>, <span class="hljs-number">219</span>, <span class="hljs-number">131</span>, <span class="hljs-number">139</span>, <span class="hljs-number">237</span>, <span class="hljs-number">223</span>, <span class="hljs-number">202</span>, <span class="hljs-number">184</span>, <span class="hljs-number">163</span>], [<span class="hljs-number">29</span>, <span class="hljs-number">44</span>, <span class="hljs-number">107</span>, <span class="hljs-number">78</span>, <span class="hljs-number">248</span>, <span class="hljs-number">79</span>, <span class="hljs-number">139</span>, <span class="hljs-number">122</span>, <span class="hljs-number">127</span>, <span class="hljs-number">165</span>, <span class="hljs-number">188</span>, <span class="hljs-number">113</span>, <span class="hljs-number">43</span>, <span class="hljs-number">72</span>, <span class="hljs-number">198</span>, <span class="hljs-number">105</span>], [<span class="hljs-number">99</span>, <span class="hljs-number">88</span>, <span class="hljs-number">7</span>, <span class="hljs-number">129</span>, <span class="hljs-number">237</span>, <span class="hljs-number">55</span>, <span class="hljs-number">239</span>, <span class="hljs-number">157</span>, <span class="hljs-number">37</span>, <span class="hljs-number">189</span>, <span class="hljs-number">188</span>, <span class="hljs-number">207</span>, <span class="hljs-number">228</span>, <span class="hljs-number">166</span>, <span class="hljs-number">80</span>, <span class="hljs-number">83</span>], [<span class="hljs-number">25</span>, <span class="hljs-number">223</span>, <span class="hljs-number">56</span>, <span class="hljs-number">35</span>, <span class="hljs-number">62</span>, <span class="hljs-number">3</span>, <span class="hljs-number">99</span>, <span class="hljs-number">239</span>, <span class="hljs-number">96</span>, <span class="hljs-number">15</span>, <span class="hljs-number">239</span>, <span class="hljs-number">132</span>, <span class="hljs-number">16</span>, <span class="hljs-number">234</span>, <span class="hljs-number">168</span>, <span class="hljs-number">143</span>], [<span class="hljs-number">71</span>, <span class="hljs-number">44</span>, <span class="hljs-number">104</span>, <span class="hljs-number">130</span>, <span class="hljs-number">240</span>, <span class="hljs-number">90</span>, <span class="hljs-number">94</span>, <span class="hljs-number">136</span>, <span class="hljs-number">59</span>, <span class="hljs-number">4</span>, <span class="hljs-number">170</span>, <span class="hljs-number">102</span>, <span class="hljs-number">100</span>, <span class="hljs-number">70</span>, <span class="hljs-number">206</span>, <span class="hljs-number">11</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">58</span>, <span class="hljs-number">220</span>, <span class="hljs-number">136</span>, <span class="hljs-number">151</span>, <span class="hljs-number">101</span>, <span class="hljs-number">183</span>, <span class="hljs-number">245</span>, <span class="hljs-number">35</span>, <span class="hljs-number">197</span>, <span class="hljs-number">143</span>, <span class="hljs-number">177</span>, <span class="hljs-number">93</span>, <span class="hljs-number">177</span>, <span class="hljs-number">4</span>, <span class="hljs-number">29</span>], [<span class="hljs-number">246</span>, <span class="hljs-number">12</span>, <span class="hljs-number">215</span>, <span class="hljs-number">117</span>, <span class="hljs-number">173</span>, <span class="hljs-number">222</span>, <span class="hljs-number">55</span>, <span class="hljs-number">117</span>, <span class="hljs-number">183</span>, <span class="hljs-number">187</span>, <span class="hljs-number">124</span>, <span class="hljs-number">40</span>, <span class="hljs-number">69</span>, <span class="hljs-number">192</span>, <span class="hljs-number">220</span>, <span class="hljs-number">185</span>], [<span class="hljs-number">197</span>, <span class="hljs-number">144</span>, <span class="hljs-number">242</span>, <span class="hljs-number">97</span>, <span class="hljs-number">182</span>, <span class="hljs-number">59</span>, <span class="hljs-number">129</span>, <span class="hljs-number">64</span>, <span class="hljs-number">86</span>, <span class="hljs-number">52</span>, <span class="hljs-number">79</span>, <span class="hljs-number">163</span>, <span class="hljs-number">44</span>, <span class="hljs-number">159</span>, <span class="hljs-number">61</span>, <span class="hljs-number">83</span>], [<span class="hljs-number">170</span>, <span class="hljs-number">202</span>, <span class="hljs-number">30</span>, <span class="hljs-number">234</span>, <span class="hljs-number">196</span>, <span class="hljs-number">193</span>, <span class="hljs-number">205</span>, <span class="hljs-number">198</span>, <span class="hljs-number">245</span>, <span class="hljs-number">49</span>, <span class="hljs-number">135</span>, <span class="hljs-number">93</span>, <span class="hljs-number">46</span>, <span class="hljs-number">45</span>, <span class="hljs-number">12</span>, <span class="hljs-number">162</span>], [<span class="hljs-number">228</span>, <span class="hljs-number">156</span>, <span class="hljs-number">36</span>, <span class="hljs-number">84</span>, <span class="hljs-number">79</span>, <span class="hljs-number">184</span>, <span class="hljs-number">1</span>, <span class="hljs-number">50</span>, <span class="hljs-number">197</span>, <span class="hljs-number">137</span>, <span class="hljs-number">171</span>, <span class="hljs-number">116</span>, <span class="hljs-number">131</span>, <span class="hljs-number">64</span>, <span class="hljs-number">136</span>, <span class="hljs-number">49</span>], [<span class="hljs-number">63</span>, <span class="hljs-number">182</span>, <span class="hljs-number">170</span>, <span class="hljs-number">164</span>, <span class="hljs-number">100</span>, <span class="hljs-number">80</span>, <span class="hljs-number">116</span>, <span class="hljs-number">95</span>, <span class="hljs-number">140</span>, <span class="hljs-number">55</span>, <span class="hljs-number">187</span>, <span class="hljs-number">43</span>, <span class="hljs-number">152</span>, <span class="hljs-number">141</span>, <span class="hljs-number">12</span>, <span class="hljs-number">232</span>], [<span class="hljs-number">17</span>, <span class="hljs-number">92</span>, <span class="hljs-number">142</span>, <span class="hljs-number">86</span>, <span class="hljs-number">35</span>, <span class="hljs-number">222</span>, <span class="hljs-number">59</span>, <span class="hljs-number">177</span>, <span class="hljs-number">76</span>, <span class="hljs-number">64</span>, <span class="hljs-number">206</span>, <span class="hljs-number">173</span>, <span class="hljs-number">160</span>, <span class="hljs-number">125</span>, <span class="hljs-number">182</span>, <span class="hljs-number">112</span>], [<span class="hljs-number">247</span>, <span class="hljs-number">144</span>, <span class="hljs-number">243</span>, <span class="hljs-number">147</span>, <span class="hljs-number">145</span>, <span class="hljs-number">100</span>, <span class="hljs-number">11</span>, <span class="hljs-number">121</span>, <span class="hljs-number">188</span>, <span class="hljs-number">243</span>, <span class="hljs-number">25</span>, <span class="hljs-number">236</span>, <span class="hljs-number">74</span>, <span class="hljs-number">236</span>, <span class="hljs-number">148</span>, <span class="hljs-number">66</span>], [<span class="hljs-number">218</span>, <span class="hljs-number">123</span>, <span class="hljs-number">213</span>, <span class="hljs-number">237</span>, <span class="hljs-number">194</span>, <span class="hljs-number">202</span>, <span class="hljs-number">13</span>, <span class="hljs-number">31</span>, <span class="hljs-number">66</span>, <span class="hljs-number">241</span>, <span class="hljs-number">144</span>, <span class="hljs-number">86</span>, <span class="hljs-number">155</span>, <span class="hljs-number">74</span>, <span class="hljs-number">174</span>, <span class="hljs-number">112</span>], [<span class="hljs-number">19</span>, <span class="hljs-number">7</span>, <span class="hljs-number">55</span>, <span class="hljs-number">106</span>, <span class="hljs-number">53</span>, <span class="hljs-number">49</span>, <span class="hljs-number">35</span>, <span class="hljs-number">106</span>, <span class="hljs-number">201</span>, <span class="hljs-number">220</span>, <span class="hljs-number">89</span>, <span class="hljs-number">235</span>, <span class="hljs-number">148</span>, <span class="hljs-number">72</span>, <span class="hljs-number">170</span>, <span class="hljs-number">88</span>], [<span class="hljs-number">186</span>, <span class="hljs-number">76</span>, <span class="hljs-number">86</span>, <span class="hljs-number">89</span>, <span class="hljs-number">54</span>, <span class="hljs-number">203</span>, <span class="hljs-number">186</span>, <span class="hljs-number">142</span>, <span class="hljs-number">8</span>, <span class="hljs-number">86</span>, <span class="hljs-number">174</span>, <span class="hljs-number">115</span>, <span class="hljs-number">133</span>, <span class="hljs-number">227</span>, <span class="hljs-number">104</span>, <span class="hljs-number">107</span>]])<br><br>c2 = Matrix(G,[[<span class="hljs-number">235</span>], [<span class="hljs-number">9</span>], [<span class="hljs-number">224</span>], [<span class="hljs-number">158</span>], [<span class="hljs-number">103</span>], [<span class="hljs-number">151</span>], [<span class="hljs-number">7</span>], [<span class="hljs-number">124</span>], [<span class="hljs-number">159</span>], [<span class="hljs-number">100</span>], [<span class="hljs-number">23</span>], [<span class="hljs-number">199</span>], [<span class="hljs-number">206</span>], [<span class="hljs-number">125</span>], [<span class="hljs-number">235</span>], [<span class="hljs-number">10</span>]])<br><br><span class="hljs-comment"># from sage.all import *</span><br><span class="hljs-comment"># const = 2**8</span><br><span class="hljs-comment"># M1 = block_matrix([[A.T],[b.T],[identity_matrix(16)*q]]) * const</span><br><span class="hljs-comment"># M2 = Matrix(17+16, 17)</span><br><span class="hljs-comment"># for _ in range(16):</span><br><span class="hljs-comment">#     M2[_,_] = 1</span><br><span class="hljs-comment"># M2[16,16] = const</span><br><span class="hljs-comment"># M = block_matrix([M1,M2],ncols=2)</span><br><span class="hljs-comment"># ML = M.LLL()</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">c1, c2, s</span>):<br>    m_dec = (c2 - c1 * s).T<br>    m_rec = [<span class="hljs-built_in">round</span>(<span class="hljs-number">2</span> * <span class="hljs-built_in">int</span>(_) / q) % <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> m_dec[<span class="hljs-number">0</span>]]<br>    m_bin = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">str</span>(bit) <span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> m_rec])  <span class="hljs-comment"># 将SymPy矩阵转换为二进制字符串</span><br>    m_rec_int = <span class="hljs-built_in">int</span>(m_bin, <span class="hljs-number">2</span>)  <span class="hljs-comment"># 将二进制字符串转换为整数</span><br>    <span class="hljs-keyword">return</span> m_rec_int<br><br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> trange<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br>G = GF(q)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> trange(<span class="hljs-number">2</span>**<span class="hljs-number">16</span>):<br>    e = Matrix(G,[<span class="hljs-built_in">int</span>(_) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">bin</span>(i)[<span class="hljs-number">2</span>:].rjust(<span class="hljs-number">16</span>,<span class="hljs-string">&#x27;0&#x27;</span>)]).T<br>    s = A.solve_right(b - e)<br>    msg = decrypt(c1,c2,s)<br>    <span class="hljs-keyword">if</span> msg.bit_length() &lt;= <span class="hljs-number">16</span>:<br>        <span class="hljs-built_in">print</span>(msg)<br>    <span class="hljs-comment"># flag = long_to_bytes(msg)</span><br>    <span class="hljs-comment"># if b&#x27;flag&#x27; in flag:</span><br>    <span class="hljs-comment">#     print(flag)</span><br></code></pre></td></tr></table></figure><p>也许密码应该优先考虑爆破？有点难绷了。</p><h4 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h4><p>这题其实和当时2023熵密杯的第二题非常相似，但是当时直接逆回来写就出了，这一次我们死活没出，最后是爆破2**32出的，后来上的hint也提示说应该多线程爆破，最后三台电脑一起跑，大概两三分钟就出了。</p><p>题目莫得了，只有exp。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;string.h&gt;</span><br><span class="hljs-comment">#include &lt;unistd.h&gt;</span><br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><span class="hljs-comment">#include &lt;sys/wait.h&gt;</span><br><span class="hljs-comment">#include &lt;openssl/sha.h&gt;</span><br><br><span class="hljs-comment">#define ROUND 16</span><br><br>// S-Box 16x16<br>unsigned char rev_sBox[] = &#123;<span class="hljs-number">13</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>,<br>                            <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">11</span>, <span class="hljs-number">8</span>,<br>                            <span class="hljs-number">10</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>,<br>                            <span class="hljs-number">3</span>, <span class="hljs-number">15</span>, <span class="hljs-number">7</span>, <span class="hljs-number">14</span>&#125;;<br><br>// 将十六进制字符串转换为 unsigned char 数组<br>void hex_to_bytes(const char *hex_str, unsigned char *<span class="hljs-built_in">bytes</span>, size_t bytes_len)<br>&#123;<br>    size_t hex_len = strlen(hex_str);<br>    <span class="hljs-keyword">if</span> (hex_len % <span class="hljs-number">2</span> != <span class="hljs-number">0</span> || hex_len / <span class="hljs-number">2</span> &gt; bytes_len)<br>    &#123;<br>        fprintf(stderr, <span class="hljs-string">&quot;Invalid hex string length.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (size_t i = <span class="hljs-number">0</span>; i &lt; hex_len / <span class="hljs-number">2</span>; i++)<br>    &#123;<br>        sscanf(hex_str + <span class="hljs-number">2</span> * i, <span class="hljs-string">&quot;%2hhx&quot;</span>, &amp;<span class="hljs-built_in">bytes</span>[i]);<br>    &#125;<br>&#125;<br><br>// 派生轮密钥<br>void derive_round_key(unsigned <span class="hljs-built_in">int</span> key, unsigned char *round_key, <span class="hljs-built_in">int</span> length)<br>&#123;<br><br>    unsigned <span class="hljs-built_in">int</span> tmp = key;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; length / <span class="hljs-number">16</span>; i++)<br>    &#123;<br>        memcpy(round_key + i * <span class="hljs-number">16</span>, &amp;tmp, <span class="hljs-number">4</span>);<br>        tmp++;<br>        memcpy(round_key + i * <span class="hljs-number">16</span> + <span class="hljs-number">4</span>, &amp;tmp, <span class="hljs-number">4</span>);<br>        tmp++;<br>        memcpy(round_key + i * <span class="hljs-number">16</span> + <span class="hljs-number">8</span>, &amp;tmp, <span class="hljs-number">4</span>);<br>        tmp++;<br>        memcpy(round_key + i * <span class="hljs-number">16</span> + <span class="hljs-number">12</span>, &amp;tmp, <span class="hljs-number">4</span>);<br>        tmp++;<br>    &#125;<br>&#125;<br><br>// 比特逆序<br>void reverseBits(unsigned char *state)<br>&#123;<br>    unsigned char temp[<span class="hljs-number">16</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++)<br>    &#123;<br>        unsigned char byte = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">8</span>; j++)<br>        &#123;<br>            byte |= ((state[i] &gt;&gt; j) &amp; <span class="hljs-number">1</span>) &lt;&lt; (<span class="hljs-number">7</span> - j);<br>        &#125;<br>        temp[<span class="hljs-number">15</span> - i] = byte;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++)<br>    &#123;<br>        state[i] = temp[i];<br>    &#125;<br>&#125;<br><br>void rev_leftShiftBytes(unsigned char *state)<br>&#123;<br>    unsigned char temp[<span class="hljs-number">4</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i += <span class="hljs-number">4</span>)<br>    &#123;<br>        temp[<span class="hljs-number">0</span>] = ((state[i + <span class="hljs-number">2</span>] &amp; <span class="hljs-number">0x7</span>) &lt;&lt; <span class="hljs-number">5</span>) | (state[i + <span class="hljs-number">3</span>] &gt;&gt; <span class="hljs-number">3</span>);<br>        temp[<span class="hljs-number">1</span>] = ((state[i + <span class="hljs-number">3</span>] &amp; <span class="hljs-number">0x7</span>) &lt;&lt; <span class="hljs-number">5</span>) | (state[i + <span class="hljs-number">0</span>] &gt;&gt; <span class="hljs-number">3</span>);<br>        temp[<span class="hljs-number">2</span>] = ((state[i + <span class="hljs-number">0</span>] &amp; <span class="hljs-number">0x7</span>) &lt;&lt; <span class="hljs-number">5</span>) | (state[i + <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">3</span>);<br>        temp[<span class="hljs-number">3</span>] = ((state[i + <span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x7</span>) &lt;&lt; <span class="hljs-number">5</span>) | (state[i + <span class="hljs-number">2</span>] &gt;&gt; <span class="hljs-number">3</span>);<br>        memcpy(state + i, temp, sizeof temp);<br>    &#125;<br>&#125;<br><br>void rev_sBoxTransform(unsigned char *state)<br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++)<br>    &#123;<br>        unsigned char lo = rev_sBox[state[i] &amp; <span class="hljs-number">0xF</span>];<br>        unsigned char hi = rev_sBox[state[i] &gt;&gt; <span class="hljs-number">4</span>];<br>        state[i] = (hi &lt;&lt; <span class="hljs-number">4</span>) | lo;<br>    &#125;<br>&#125;<br><br>void addRoundKey(unsigned char *state, unsigned char *roundKey, unsigned <span class="hljs-built_in">int</span> <span class="hljs-built_in">round</span>)<br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">8</span>; j++)<br>        &#123;<br>            state[i] ^= ((roundKey[i + <span class="hljs-built_in">round</span> * <span class="hljs-number">16</span>] &gt;&gt; j) &amp; <span class="hljs-number">1</span>) &lt;&lt; j;<br>        &#125;<br>    &#125;<br>&#125;<br><br>void decrypt(const unsigned char *ciphertext, unsigned <span class="hljs-built_in">int</span> key, unsigned char *cleartext)<br>&#123;<br>    unsigned char roundKeys[<span class="hljs-number">16</span> * ROUND] = &#123;&#125;;<br><br>    derive_round_key(key, roundKeys, <span class="hljs-number">16</span> * ROUND);<br><br>    unsigned char state[<span class="hljs-number">16</span>];<br>    memcpy(state, ciphertext, sizeof state);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> <span class="hljs-built_in">round</span> = ROUND - <span class="hljs-number">1</span>; <span class="hljs-built_in">round</span> &gt;= <span class="hljs-number">0</span>; <span class="hljs-built_in">round</span>--)<br>    &#123;<br>        addRoundKey(state, roundKeys, <span class="hljs-built_in">round</span>);<br>        rev_leftShiftBytes(state);<br>        rev_sBoxTransform(state);<br>        reverseBits(state);<br>    &#125;<br><br>    memcpy(cleartext, state, sizeof state);<br>&#125;<br><br><span class="hljs-built_in">int</span> main(<span class="hljs-built_in">int</span> argc, char **argv)<br>&#123;<br>    unsigned char ciphertext[<span class="hljs-number">16</span>];<br>    hex_to_bytes(<span class="hljs-string">&quot;99F2980AAB4BE8640D8F322147CBA409&quot;</span>, ciphertext, sizeof ciphertext);<br><br>    unsigned char cleartext[<span class="hljs-number">17</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span> (unsigned <span class="hljs-built_in">int</span> key = <span class="hljs-number">0x80000000</span>; key &lt;= <span class="hljs-number">0xFFFFFFFF</span>; key++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (key % <span class="hljs-number">0xFFFFFF</span> == <span class="hljs-number">0</span>)<br>        &#123;<br>            printf(<span class="hljs-string">&quot;key %08X reached\n&quot;</span>, key);<br>        &#125;<br>        decrypt(ciphertext, key, cleartext);<br>        <span class="hljs-keyword">if</span> (strncmp(cleartext, <span class="hljs-string">&quot;pwd:&quot;</span>, <span class="hljs-number">4</span>) == <span class="hljs-number">0</span>)<br>        &#123;<br>            printf(<span class="hljs-string">&quot;valid cleartext found! key=%08X ct=%s&quot;</span>, key, cleartext);<br>            // <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>当时不知道是不是0ops，没拿flag1就拿到flag2了，有点难绷，经典复刻了。</p><p>然后爆破就可以拿到压缩包密码，压缩包里面有第一个flag</p><p><img src="/../pic/image-20240905144307852.png" alt="image-20240905144307852"></p><h4 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h4><p>第二个flag还挺有意思。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;openssl/ec.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;openssl/rand.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SM2LEN 32</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">error</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error.\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">error_partial_verify</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error partial verify.\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_flag2</span><span class="hljs-params">(<span class="hljs-type">const</span> BIGNUM *d2)</span> &#123;<br>    <span class="hljs-type">char</span> *hex_str = BN_bn2hex(d2);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; hex_str[i] != <span class="hljs-string">&#x27;\0&#x27;</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (hex_str[i] &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; hex_str[i] &lt;= <span class="hljs-string">&#x27;F&#x27;</span>) &#123;<br>            hex_str[i] += <span class="hljs-number">32</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;flag2&#123;%s&#125;\n&quot;</span>, hex_str);<br>&#125;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">char</span> s2[SM2LEN * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>];<br>    <span class="hljs-type">char</span> s3[SM2LEN * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>];<br>    <span class="hljs-type">char</span> r[SM2LEN * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>];<br>    <span class="hljs-type">int</span> success;<br>&#125; Result;<br><br><span class="hljs-comment">// 协同签名服务端签名算法</span><br>Result <span class="hljs-title function_">server</span><span class="hljs-params">(<span class="hljs-type">char</span>* str_e,<span class="hljs-type">char</span>* str_p1x,<span class="hljs-type">char</span>* str_p1y,<span class="hljs-type">char</span>* str_q1x,<span class="hljs-type">char</span>* str_q1y,<span class="hljs-type">char</span>* str_r1,<span class="hljs-type">char</span>* str_s1)</span>&#123;<br>    Result res = &#123;<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-type">int</span> rv = <span class="hljs-number">1</span>;<br>BIGNUM *e,*a,*b,*p,*n,*x,*y;<br>BIGNUM *d2,*r1,*s1,*p1x,*p1y,*q1x,*q1y;<br>BIGNUM *u1,*u2,*xprime,*yprime,*k2,*k3,*x1,*y1,*r,*s2,*s3,*s,*tmp1,*tmp2,*tmp3;<br>EC_GROUP* group;<br>EC_POINT *generator,*G,*P,*P1,*Q1,*TMP;<br><br>BN_CTX* bn_ctx = BN_CTX_new();<br>BN_CTX_start(bn_ctx);<br><span class="hljs-keyword">if</span> (!bn_ctx)<br>&#123; error(); <span class="hljs-keyword">return</span> res; &#125;<br>e = BN_CTX_get(bn_ctx);<br>a = BN_CTX_get(bn_ctx);<br>b = BN_CTX_get(bn_ctx);<br>p = BN_CTX_get(bn_ctx);<br>n = BN_CTX_get(bn_ctx);<br>d2 = BN_CTX_get(bn_ctx);<br>x = BN_CTX_get(bn_ctx);<br>y = BN_CTX_get(bn_ctx);<br>p1x = BN_CTX_get(bn_ctx);<br>p1y = BN_CTX_get(bn_ctx);<br>q1x = BN_CTX_get(bn_ctx);<br>q1y = BN_CTX_get(bn_ctx);<br>r1 = BN_CTX_get(bn_ctx);<br>s1 = BN_CTX_get(bn_ctx);<br>u1 = BN_CTX_get(bn_ctx);<br>u2 = BN_CTX_get(bn_ctx);<br>xprime = BN_CTX_get(bn_ctx);<br>yprime = BN_CTX_get(bn_ctx);<br>k2 = BN_CTX_get(bn_ctx);<br>k3 = BN_CTX_get(bn_ctx);<br>x1 = BN_CTX_get(bn_ctx);<br>y1 = BN_CTX_get(bn_ctx);<br>r = BN_CTX_get(bn_ctx);<br>s2 = BN_CTX_get(bn_ctx);<br>s3 = BN_CTX_get(bn_ctx);<br>s = BN_CTX_get(bn_ctx);<br>tmp1 = BN_CTX_get(bn_ctx);<br>tmp2 = BN_CTX_get(bn_ctx);<br>tmp3 = BN_CTX_get(bn_ctx);<br><br><span class="hljs-keyword">if</span> (<br>!BN_hex2bn(&amp;e, str_e) ||<br>!BN_hex2bn(&amp;p1x, str_p1x) ||<br>!BN_hex2bn(&amp;p1y, str_p1y) ||<br>!BN_hex2bn(&amp;q1x, str_q1x) ||<br>!BN_hex2bn(&amp;q1y, str_q1y) ||<br>!BN_hex2bn(&amp;r1, str_r1) ||<br>!BN_hex2bn(&amp;s1, str_s1) ||<br>!BN_hex2bn(&amp;a, <span class="hljs-string">&quot;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC&quot;</span>) ||<br>!BN_hex2bn(&amp;b, <span class="hljs-string">&quot;28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93&quot;</span>) ||<br>!BN_hex2bn(&amp;p, <span class="hljs-string">&quot;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF&quot;</span>) ||<br>!BN_hex2bn(&amp;n, <span class="hljs-string">&quot;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123&quot;</span>) ||<br><span class="hljs-comment">// d2 = ds (server key)</span><br>!BN_hex2bn(&amp;d2, <span class="hljs-string">&quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&quot;</span>) ||<br>!BN_hex2bn(&amp;x, <span class="hljs-string">&quot;32C4AE2C1F1981195F9904466A39C9948FE30BBFF2660BE1715A4589334C74C7&quot;</span>) ||<br>!BN_hex2bn(&amp;y, <span class="hljs-string">&quot;BC3736A2F4F6779C59BDCEE36B692153D0A9877CC62A474002DF32E52139F0A0&quot;</span>) ||<br>!BN_rand_range(k2,n) ||<br>!BN_copy(k3, k2)<br>)<br>&#123; error(); <span class="hljs-keyword">return</span> res; &#125;<br><br>    <span class="hljs-comment">// generate k2 in [1, n-1]</span><br><span class="hljs-keyword">while</span>(BN_is_zero(k2))&#123;<br>        <span class="hljs-keyword">if</span> (<br>            !BN_rand_range(k2,n) ||<br>            !BN_copy(k3, k2)<br>            )<br>            &#123; error(); <span class="hljs-keyword">return</span> res; &#125;<br>&#125;<br><br>group = EC_GROUP_new_curve_GFp(p, a, b, bn_ctx);<br>generator = EC_POINT_new(group);<br><span class="hljs-keyword">if</span> (!generator)<br>&#123; error(); <span class="hljs-keyword">return</span> res; &#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> != EC_POINT_set_affine_coordinates_GFp(group, generator, x, y, bn_ctx))<br>&#123; error(); <span class="hljs-keyword">return</span> res; &#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> != EC_GROUP_set_generator(group, generator, n, <span class="hljs-literal">NULL</span>))<br>&#123; error(); <span class="hljs-keyword">return</span> res; &#125;<br><br>G = EC_POINT_new(group);<br>P = EC_POINT_new(group);<br>P1 = EC_POINT_new(group);<br>Q1 = EC_POINT_new(group);<br>TMP = EC_POINT_new(group);<br><br>    <span class="hljs-comment">// if r1=0 or s1=0, error</span><br><span class="hljs-keyword">if</span> (BN_is_zero(r1) || BN_is_zero(s1))<br>&#123; error(); <span class="hljs-keyword">return</span> res; &#125;<br><br><span class="hljs-comment">// set P1 = (p1x, p1y)</span><br><span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> != EC_POINT_set_affine_coordinates_GFp(group, P1, p1x, p1y, bn_ctx))<br>&#123; error(); <span class="hljs-keyword">return</span> res; &#125;<br><br><span class="hljs-comment">// set Q1 = (q1x, q1y)</span><br><span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> != EC_POINT_set_affine_coordinates_GFp(group, Q1, q1x, q1y, bn_ctx))<br>&#123; error(); <span class="hljs-keyword">return</span> res; &#125;<br><br><span class="hljs-comment">//u1 = e * (s1^(-1)) mod n, u2 = r1 * (s1^(-1)) mod n</span><br><span class="hljs-keyword">if</span> (!BN_mod_inverse(tmp1, s1, n, bn_ctx) ||<br>!BN_mod_mul(u1, e, tmp1, n, bn_ctx) ||<br>!BN_mod_mul(u2, r1, tmp1, n, bn_ctx) ||<br>!BN_mod(u1, u1, n, bn_ctx) ||<br>!BN_mod(u2, u2, n, bn_ctx)<br>)<br>&#123; error(); <span class="hljs-keyword">return</span> res; &#125;<br><br><span class="hljs-comment">//u1*G + u2*P1 = (x&#x27;, y&#x27;)</span><br><span class="hljs-keyword">if</span> (!EC_POINT_mul(group, TMP, u1, P1, u2, bn_ctx))<br>&#123; error(); <span class="hljs-keyword">return</span> res; &#125;<br><br><span class="hljs-keyword">if</span> (!EC_POINT_get_affine_coordinates_GFp(group, TMP, xprime, yprime, bn_ctx))<br>&#123; error(); <span class="hljs-keyword">return</span> res; &#125;<br><br><span class="hljs-comment">//verify r1 = x&#x27; mod n</span><br><span class="hljs-keyword">if</span> (!BN_mod(xprime, xprime, n, bn_ctx))<br>&#123; error(); <span class="hljs-keyword">return</span> res; &#125;<br><br><span class="hljs-keyword">if</span>(BN_cmp(r1,xprime))<br>&#123; error_partial_verify(); <span class="hljs-keyword">return</span> res; &#125;<br><br><span class="hljs-comment">//k2*G + k3*Q1 = (x1, y1)</span><br><span class="hljs-keyword">if</span> (!EC_POINT_mul(group, TMP, k2, Q1, k3, bn_ctx))<br>&#123; error(); <span class="hljs-keyword">return</span> res; &#125;<br><br><span class="hljs-keyword">if</span> (!EC_POINT_get_affine_coordinates_GFp(group, TMP, x1, y1, bn_ctx))<br>&#123; error(); <span class="hljs-keyword">return</span> res; &#125;<br><br><span class="hljs-comment">//r=(e+x1) mod n</span><br><span class="hljs-keyword">if</span> (!BN_mod_add(r, e, x1, n, bn_ctx))<br>&#123; error(); <span class="hljs-keyword">return</span> res; &#125;<br><br><span class="hljs-keyword">if</span> (BN_is_zero(r))<br>&#123; error(); <span class="hljs-keyword">return</span> res; &#125;<br><span class="hljs-built_in">strncpy</span>(res.r, BN_bn2hex(r), <span class="hljs-number">2</span>*SM2LEN+<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">//s2 = d2 * k3 mod n, s3 = d2 * (r+k2) mod n</span><br><span class="hljs-keyword">if</span> (!BN_mod_mul(s2, d2, k3, n, bn_ctx) ||<br>!BN_mod_add(tmp1, r, k2, n, bn_ctx) ||<br>!BN_mod_mul(s3, d2, tmp1, n, bn_ctx) ||<br>!BN_mod(s2, s2, n, bn_ctx) ||<br>!BN_mod(s3, s3, n, bn_ctx)<br>)<br>&#123; error(); <span class="hljs-keyword">return</span> res; &#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;s2: %s\n&quot;</span>,BN_bn2hex(s2));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;s3: %s\n&quot;</span>,BN_bn2hex(s3));<br><span class="hljs-built_in">strncpy</span>(res.s2, BN_bn2hex(s2), <span class="hljs-number">2</span>*SM2LEN+<span class="hljs-number">1</span>);<br><span class="hljs-built_in">strncpy</span>(res.s3, BN_bn2hex(s3), <span class="hljs-number">2</span>*SM2LEN+<span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">// flag2 的格式如下：flag2&#123;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#125;，大括号中的内容为 16 进制格式（字母小写）的 d2。</span><br>    print_flag2(d2);<br><br>    rv = <span class="hljs-number">0</span>;<br>    BN_CTX_free(bn_ctx);<br><br>    <span class="hljs-keyword">return</span> rv;<br>&#125;<br><br><span class="hljs-comment">// 计算公钥P</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getPublicKey</span><span class="hljs-params">(<span class="hljs-type">char</span> *str_d2, <span class="hljs-type">char</span> *str_p1x, <span class="hljs-type">char</span> *str_p1y)</span> &#123;<br>    <span class="hljs-type">int</span> rv = <span class="hljs-number">1</span>;<br>    BIGNUM *negone, *a, *b, *p, *n, *x, *y;<br>    BIGNUM *d2, *p1x, *p1y, *px, *py;<br>    BIGNUM *tmp1, *tmp2;<br>    EC_GROUP *group;<br>    EC_POINT *generator, *G, *P, *P1;<br><br>    BN_CTX *bn_ctx = BN_CTX_new();<br>    BN_CTX_start(bn_ctx);<br>    <span class="hljs-keyword">if</span> (!bn_ctx) &#123;<br>        error();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    negone = BN_CTX_get(bn_ctx);<br>    a = BN_CTX_get(bn_ctx);<br>    b = BN_CTX_get(bn_ctx);<br>    p = BN_CTX_get(bn_ctx);<br>    n = BN_CTX_get(bn_ctx);<br>    d2 = BN_CTX_get(bn_ctx);<br>    x = BN_CTX_get(bn_ctx);<br>    y = BN_CTX_get(bn_ctx);<br>    p1x = BN_CTX_get(bn_ctx);<br>    p1y = BN_CTX_get(bn_ctx);<br>    px = BN_CTX_get(bn_ctx);<br>    py = BN_CTX_get(bn_ctx);<br>    tmp1 = BN_CTX_get(bn_ctx);<br>    tmp2 = BN_CTX_get(bn_ctx);<br><br>    <span class="hljs-keyword">if</span> (<br>        !BN_hex2bn(&amp;d2, str_d2) ||<br>        !BN_hex2bn(&amp;p1x, str_p1x) ||<br>        !BN_hex2bn(&amp;p1y, str_p1y) ||<br>        !BN_hex2bn(&amp;a, <span class="hljs-string">&quot;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC&quot;</span>) ||<br>        !BN_hex2bn(&amp;b, <span class="hljs-string">&quot;28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93&quot;</span>) ||<br>        !BN_hex2bn(&amp;p, <span class="hljs-string">&quot;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF&quot;</span>) ||<br>        !BN_hex2bn(&amp;n, <span class="hljs-string">&quot;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123&quot;</span>) ||<br>        !BN_hex2bn(&amp;x, <span class="hljs-string">&quot;32C4AE2C1F1981195F9904466A39C9948FE30BBFF2660BE1715A4589334C74C7&quot;</span>) ||<br>        !BN_hex2bn(&amp;y, <span class="hljs-string">&quot;BC3736A2F4F6779C59BDCEE36B692153D0A9877CC62A474002DF32E52139F0A0&quot;</span>)<br>    ) &#123;<br>        error();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    group = EC_GROUP_new_curve_GFp(p, a, b, bn_ctx);<br>    generator = EC_POINT_new(group);<br>    <span class="hljs-keyword">if</span> (!generator) &#123;<br>        error();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> != EC_POINT_set_affine_coordinates_GFp(group, generator, x, y, bn_ctx)) &#123;<br>        error();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> != EC_GROUP_set_generator(group, generator, n, <span class="hljs-literal">NULL</span>)) &#123;<br>        error();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    G = EC_POINT_new(group);<br>    P = EC_POINT_new(group);<br>    P1 = EC_POINT_new(group);<br><br>    <span class="hljs-comment">// set P1 = (p1x, p1y)</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> != EC_POINT_set_affine_coordinates_GFp(group, P1, p1x, p1y, bn_ctx)) &#123;<br>        error();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//P = ((d2)^(-1)) * P1 - G</span><br>    <span class="hljs-keyword">if</span> (!BN_zero(tmp1) ||<br>        !BN_one(tmp2) ||<br>        !BN_mod_sub(negone, tmp1, tmp2, n, bn_ctx)<br>    ) &#123;<br>        error();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!BN_mod_inverse(tmp1, d2, n, bn_ctx) || !EC_POINT_mul(group, P, negone, P1, tmp1, bn_ctx)) &#123;<br>        error();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!EC_POINT_get_affine_coordinates_GFp(group, P, px, py, bn_ctx)) &#123;<br>        error();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Px: %s\n&quot;</span>, BN_bn2hex(px));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Py: %s\n&quot;</span>, BN_bn2hex(py));<br><br>    rv = <span class="hljs-number">0</span>;<br>    BN_CTX_free(bn_ctx);<br><br>    <span class="hljs-keyword">return</span> rv;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span> &#123;<br>    <span class="hljs-type">int</span> rv = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (server(argv[<span class="hljs-number">1</span>], argv[<span class="hljs-number">2</span>], argv[<span class="hljs-number">3</span>], argv[<span class="hljs-number">4</span>], argv[<span class="hljs-number">5</span>], argv[<span class="hljs-number">6</span>], argv[<span class="hljs-number">7</span>])) &#123;<br>        error();<br>        <span class="hljs-keyword">return</span> rv;<br>    &#125;<br><br>    rv = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> rv;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这一题要求是把d2给求出来，我们知道</p><p>$s_2 &#x3D; d_2 * k_3  (mod n)$</p><p>$ s_3 &#x3D; d_2 * (r+k_2) (mod n)$</p><p>关键在于</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">BN_copy(k3, k2)<br></code></pre></td></tr></table></figure><p>所以显然d2是可以解出来的</p><p>$(s_3-s_2)*r^{-1}&#x3D;d_2(mod n)$</p><p>非常简单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">r=<span class="hljs-number">0xB9D9723CBD74689FE2CAD8BEA57DE7158202D0890F72FA611403871BC7377DDA</span><br>s2 = <span class="hljs-number">0x02A20FDB2CDA53DF42F73E5C2FEADEC1E490C429779826405455E0720AE2F909</span><br>s3 = <span class="hljs-number">0x3348A503A5A5CD3E9ED119232B82374CCF7411BFBEA1A3B2F3CA6CD5281BC917</span><br>n = <span class="hljs-number">0xFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> inverse<br><br>d2 = ((s3 - s2) * inverse(r, n)) % n<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d2))<br></code></pre></td></tr></table></figure><h4 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h4><p>生成一个公私钥对，用公钥注册，复制签名公钥得到的证书进行登录，但是登录用户名写 shangmibeiadmin 就能拿到 flag3。</p><p>当时是队友直接去gmssl的test.py找的一个公私钥对，现在想想还是有点难绷。</p><p>（暂无截图，大概就是一个简单的交互界面，要求给用户名和证书</p><h4 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h4><p>然后得到一个总经理.zip，要求解开加密的流量，flag4就在流量里。</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmssl.sm4 <span class="hljs-keyword">import</span> CryptSM4, SM4_ENCRYPT, SM4_DECRYPT<br><br>MULTIPLIER = <span class="hljs-number">6364136223846793005</span><br>ADDEND = <span class="hljs-number">1</span><br>MASK = <span class="hljs-number">0xffffffffffffffff</span><br>ITERATIONS = <span class="hljs-number">1000</span><br><br><span class="hljs-comment"># 从文件中读取seed</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_seed</span>(<span class="hljs-params">file_path</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        seed = <span class="hljs-built_in">int</span>(file.read().strip(), <span class="hljs-number">16</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;seed:&quot;</span>, <span class="hljs-built_in">hex</span>(seed))<br>    <span class="hljs-keyword">return</span> seed<br><br>global_seed = read_seed(<span class="hljs-string">&#x27;seed.txt&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">genRandom</span>():<br>    <span class="hljs-keyword">global</span> global_seed<br>    <span class="hljs-comment"># print(&quot;global_seed&quot;, hex(global_seed))</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ITERATIONS):<br>        global_seed = (global_seed * MULTIPLIER + ADDEND) &amp; MASK<br>    <span class="hljs-keyword">return</span> (global_seed &gt;&gt; <span class="hljs-number">32</span>) &amp; <span class="hljs-number">0xffffffff</span><br><br><span class="hljs-comment"># 16进制字符串转bytes</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">HexStringToBytes</span>(<span class="hljs-params">hex_str</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>.fromhex(hex_str)<br><br><span class="hljs-comment"># bytes转16进制字符串</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">BytesToHexString</span>(<span class="hljs-params">byte_seq</span>):<br>    <span class="hljs-keyword">return</span> byte_seq.<span class="hljs-built_in">hex</span>()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">genSM4KeyOrIV</span>():<br>    <span class="hljs-keyword">return</span> HexStringToBytes(<span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;genRandom():08x&#125;</span>&#x27;</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">SM4Encrypt</span>(<span class="hljs-params">data_bytes, key_bytes, iv_bytes</span>):<br>    sm4 = CryptSM4()<br>    sm4.set_key(key_bytes, SM4_ENCRYPT)<br>    <span class="hljs-keyword">return</span> sm4.crypt_cbc(iv_bytes, data_bytes)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">SM4Decrypt</span>(<span class="hljs-params">cipher_bytes, key_bytes, iv_bytes</span>):<br>    sm4 = CryptSM4()<br>    sm4.set_key(key_bytes, SM4_DECRYPT)<br>    <span class="hljs-keyword">return</span> sm4.crypt_cbc(iv_bytes, cipher_bytes)<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;############ SM4 Cryptographic Services Start... ###################&quot;</span>)<br><br>iv_bytes = genSM4KeyOrIV()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;iv hex:&quot;</span>, BytesToHexString(iv_bytes))<br><br>key_bytes = genSM4KeyOrIV()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;key hex:&quot;</span>, BytesToHexString(key_bytes))<br><br><span class="hljs-comment"># 从test.pcapng读取数据并加密</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.pcapng&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f1:<br>    plain1_bytes = f1.read()<br>    cipher1_bytes = SM4Encrypt(plain1_bytes,key_bytes,iv_bytes)<br><br><span class="hljs-comment"># 写密文数据到cipherText.dat</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;cipherText.dat&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f2:<br>    f2.write(cipher1_bytes)<br><br><span class="hljs-comment"># 从cipherText.dat读密文数据</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;cipherText.dat&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f3:<br>    cipher2_bytes = f3.read()<br>    plain2_bytes = SM4Decrypt(cipher2_bytes,key_bytes,iv_bytes)<br><br><span class="hljs-comment"># 解密密文并将明文写入到plainText.pcapng(含flag4)</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;plainText.pcapng&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f4:<br>    f4.write(plain2_bytes)<br></code></pre></td></tr></table></figure><p>可以发现，iv和key的生成依赖线性同余，但是如果要爆破可能的随机数种子需要爆破2**32，最后当然是狠狠的爆破了（</p><p>（爆破没什么好写的就不写了</p><p><img src="/../pic/image-20240905145811936.png" alt="image-20240905145811936"></p><p>最后得到flag4</p><h4 id="最终挑战"><a href="#最终挑战" class="headerlink" title="最终挑战"></a>最终挑战</h4><p>最终挑战，给定一个消息摘要，要求伪造总经理的签名。</p><p>其实我们有两个方程，d1和k1都是算得出来的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># n = 0xFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123</span><br><span class="hljs-comment"># G = GF(n)</span><br><span class="hljs-comment"># P.&lt;x,y&gt; = PolynomialRing(G, order=&#x27;lex&#x27;)</span><br><span class="hljs-comment"># # x = d1</span><br><span class="hljs-comment"># # y = k1</span><br><span class="hljs-comment"># r1 = 0x8A6BB033033E79683E81FE36D6394262D451A3DB9D1A0C489D51543D22E67BC4</span><br><span class="hljs-comment"># e = 0xeaf0adee014bd35a12180bbc99292e3acf895203aa97f8dbbb760da04da844f6</span><br><span class="hljs-comment"># s1 = 0x47baaef61c7a3c4c239fc2634ec25a2059d937026c6e0b72df1463fbba5b3a05</span><br><span class="hljs-comment"># s = 0xcb524f49515c9a7387210ddcdbf1f32aad1c8806f01a362c62a5d6a5466da158</span><br><span class="hljs-comment"># s2 = 0xB54A6668F644EC08D925552D45F66E348762B460693E7A68CBB0FDF38327DB45</span><br><span class="hljs-comment"># s3 = 0xB50FAE013594F79192898FF7FC0A84D931B1EC56EF9174159023ACF1C708180D</span><br><span class="hljs-comment"># r = 0x8A6BB033033E79683E81FE36D6394262D451A3DB9D1A0C489D51543D22E67BC4</span><br><span class="hljs-comment"># I = Ideal([x * e + r1 - y * x * s1, s + r - x * y * s2 + x * s3])</span><br><br><span class="hljs-comment"># I.variety()</span><br><br><span class="hljs-comment"># d = &#123;x: 57380008957341971613717690318294399953338921752138841512102949164866741871341, y: 113664965550405303122855944928778451946027085473011499438955455126429316351741&#125;</span><br>d1 = <span class="hljs-number">57380008957341971613717690318294399953338921752138841512102949164866741871341</span><br>k1 = <span class="hljs-number">113664965550405303122855944928778451946027085473011499438955455126429316351741</span><br></code></pre></td></tr></table></figure><p>（这个结果应该是算的不对的 懒得再跑了</p><p>但是当时时间太紧，没看到用他给定的消息摘要值去伪造而是用了流量包里的。。</p><p>所以最后并没有做出来，最后的步骤大概是用给定的消息摘要值通过他的步骤去伪造这个签名，嗯。</p><p>如果后续找到别人的wp，会及时更新。</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-春秋杯夏季赛-wp-crypto</title>
    <link href="/2024/07/11/2024-%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%A4%8F%E5%AD%A3%E8%B5%9B-wp-crypto/"/>
    <url>/2024/07/11/2024-%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%A4%8F%E5%AD%A3%E8%B5%9B-wp-crypto/</url>
    
    <content type="html"><![CDATA[<h1 id="2024-春秋杯夏季赛-wp-crypto"><a href="#2024-春秋杯夏季赛-wp-crypto" class="headerlink" title="2024-春秋杯夏季赛-wp-crypto"></a>2024-春秋杯夏季赛-wp-crypto</h1><h3 id="ezzzecc"><a href="#ezzzecc" class="headerlink" title="ezzzecc"></a>ezzzecc</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python">p = getPrime(<span class="hljs-number">256</span>)<br>a = getPrime(<span class="hljs-number">256</span>)<br>b = getPrime(<span class="hljs-number">256</span>)<br>E = EllipticCurve(GF(p),[a,b])<br>m = E.random_point()<br>G = E.random_point()<br>k = getPrime(<span class="hljs-number">18</span>)<br>K = k * G<br>r = getPrime(<span class="hljs-number">256</span>)<br>c1 = m + r * K<br><br>c2 = r * G<br><br>cipher_left = s2n(flag[:<span class="hljs-built_in">len</span>(flag)//<span class="hljs-number">2</span>]) * m[<span class="hljs-number">0</span>]   <span class="hljs-comment">#flag的前半部分乘m[0]，所以只要用密文的除于m[0]即可得到flag前半部分</span><br>cipher_right = s2n(flag[<span class="hljs-built_in">len</span>(flag)//<span class="hljs-number">2</span>:]) * m[<span class="hljs-number">1</span>]   <span class="hljs-comment">#flag的后半部分点乘m[1]</span><br><br><br>p = koZP3YQAklARRNrmYfjxoKIAXegOcG4jMOmKb08uESOkCCn72d6UM2NWgefYPEMq4EJ1M0jKaqt02Guo5Ubccjqg4QZaaHbScREx38UMLQKwG0LcDd8VFX1zkobc1ZQn4L3DhKQrgJZI55todgOdJuHN532bxScAvOF26gJyQclPtRHn3M6SHrRCEXzzmszd68PJlLB6HaabrRrCW9ZoAYSZetM5jDBtNCJLpR0CBZUUk3Oeh2MZQu2vk8DZ1QqNG49hlxGfawp1FXvAZPdMwixzkhEQnbCDcOKzYyT6BZF2Dfd940tazl7HNOswuIpLsqXQ2h56guGngMeYfMXEZV09fsB3TE0N934CLF8TbZnzFzEkOe8TPTK2mWPVSrgmbsGHnxgYWhaRQWg3yosgDfrEa5qfVl9De41PVtTw024gltovypMXK5XMhuhogs0EMN7hkLapLn6lMj<br>p的格式为p=&#123;p&#125;<br><br>a = <span class="hljs-number">87425770561190618633288232353256495656281438408946725202136726983601884085917</span><br>b = <span class="hljs-number">107879772066707091306779801409109036008421651378615140327877558014536331974777</span><br>K = (<span class="hljs-number">49293150360761418309411209621405185437426003792008480206387047056777011104939</span> : <span class="hljs-number">43598371886286324285673726736628847559547403221353820773139325027318579443479</span>)<br>G = (<span class="hljs-number">34031022567935512558184471533035716554557378321289293120392294258731566673565</span> : <span class="hljs-number">74331715224220154299708533566163247663094029276428146274456519014761122295496</span>)<br>私钥k小于<span class="hljs-number">1000000</span><br>c1 = (<span class="hljs-number">3315847183153421424358678117707706758962521458183324187760613108746362414091</span> : <span class="hljs-number">61422809633368910312843316855658127170184420570309973276760547643460231548014</span>)<br>c2 = (<span class="hljs-number">12838481482175070256758359669437500951915904121998959094172291545942862161864</span> : <span class="hljs-number">60841550842604234546787351747017749679783606696419878692095419214989669624971</span>)<br>cipher_left = <span class="hljs-number">75142205156781095042041227504637709079517729950375899059488581605798510465939</span><br>cipher_right = <span class="hljs-number">61560856815190247060747741878070276409743228362585436028144398174723191051815</span><br></code></pre></td></tr></table></figure><p>这题其实怎么说呢，很简单，但是有干扰。</p><p>当时卡了很久，为什么呢，因为爆破k数字看错了。</p><p><img src="/../pic/11.png" alt="11"></p><p>简单来说就是</p><p>我们知道椭圆曲线有</p><p>$$y^2&#x3D;x^3+ax+b\quad(mod\text{ p})$$</p><p>所以我们已知两个点K,G,显然可以把p给gcd出来。</p><p> $p &#x3D; gcd(y_k^2-x_k^3-ax_k-b,y_g^2-x_g^3-ax_g-b)$</p><p>解出p后爆破私钥k。</p><p>这里其实有一个小技巧，像下面wp里写的其实不好，如果私钥比较大一点就解不出来了，因为这里的乘一直在计算倍点，复杂度是比较高的，如果这里把乘换成累加，那么计算复杂度就会明显降低。</p><p>换言之，可以把私钥卡在一个乘法算不出来但是累加算得出来的一个大小来要求选手必须优化（非常好的思路</p><p>后面没什么了，注意python下记得逆元，如果sagemath直接算就是一直在有限域下就不用了，python或者sagemath当然都可 见仁见智。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">from</span> libnum <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">P,Q</span>):<br><span class="hljs-keyword">if</span> P[<span class="hljs-number">0</span>] != Q[<span class="hljs-number">0</span>] <span class="hljs-keyword">and</span> P[<span class="hljs-number">1</span>] != Q[<span class="hljs-number">1</span>]:<br>t = ((Q[<span class="hljs-number">1</span>]-P[<span class="hljs-number">1</span>]) * inverse(Q[<span class="hljs-number">0</span>]-P[<span class="hljs-number">0</span>],p)) %p<br><span class="hljs-keyword">else</span>:<br>t = ((<span class="hljs-number">3</span>*P[<span class="hljs-number">0</span>]*P[<span class="hljs-number">0</span>]+a) * inverse(<span class="hljs-number">2</span>*P[<span class="hljs-number">1</span>],p))%p<br><br>x3 = t*t - P[<span class="hljs-number">0</span>] - Q[<span class="hljs-number">0</span>]<br>y3 = t*(P[<span class="hljs-number">0</span>] - x3) - P[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">return</span> (x3%p, y3%p)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul</span>(<span class="hljs-params">t, A, B=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> t: <span class="hljs-keyword">return</span> B<br>    <span class="hljs-keyword">return</span> mul(t//<span class="hljs-number">2</span>, add(A,A), B <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> t&amp;<span class="hljs-number">1</span> <span class="hljs-keyword">else</span> add(B,A) <span class="hljs-keyword">if</span> B <span class="hljs-keyword">else</span> A)<br><br>a = <span class="hljs-number">87425770561190618633288232353256495656281438408946725202136726983601884085917</span><br>b = <span class="hljs-number">107879772066707091306779801409109036008421651378615140327877558014536331974777</span><br>K = (<span class="hljs-number">49293150360761418309411209621405185437426003792008480206387047056777011104939</span>,<span class="hljs-number">43598371886286324285673726736628847559547403221353820773139325027318579443479</span>)<br>G = (<span class="hljs-number">34031022567935512558184471533035716554557378321289293120392294258731566673565</span>,<span class="hljs-number">74331715224220154299708533566163247663094029276428146274456519014761122295496</span>)<br>c1 = (<span class="hljs-number">3315847183153421424358678117707706758962521458183324187760613108746362414091</span>,<span class="hljs-number">61422809633368910312843316855658127170184420570309973276760547643460231548014</span>)<br>c2 = (<span class="hljs-number">12838481482175070256758359669437500951915904121998959094172291545942862161864</span>,<span class="hljs-number">60841550842604234546787351747017749679783606696419878692095419214989669624971</span>)<br>cipher_left = <span class="hljs-number">75142205156781095042041227504637709079517729950375899059488581605798510465939</span><br>cipher_right = <span class="hljs-number">61560856815190247060747741878070276409743228362585436028144398174723191051815</span><br>p = GCD((K[<span class="hljs-number">1</span>]**<span class="hljs-number">2</span>-K[<span class="hljs-number">0</span>]**<span class="hljs-number">3</span>-a*K[<span class="hljs-number">0</span>]-b),(G[<span class="hljs-number">1</span>]**<span class="hljs-number">2</span>-G[<span class="hljs-number">0</span>]**<span class="hljs-number">3</span>-a*G[<span class="hljs-number">0</span>]-b))<br><span class="hljs-built_in">print</span>(p)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">for i in tqdm(range(1000003)):</span><br><span class="hljs-string">if(K==mul(i,G)):</span><br><span class="hljs-string">print(i)</span><br><span class="hljs-string">break</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>i = <span class="hljs-number">166909</span><br><br>x = mul(i,(c2[<span class="hljs-number">0</span>],-c2[<span class="hljs-number">1</span>]))<br>m = add(c1,x)<br><span class="hljs-built_in">print</span>(m)<br><span class="hljs-built_in">print</span>(n2s(<span class="hljs-built_in">int</span>(cipher_left*inverse(m[<span class="hljs-number">0</span>],p))%p))<br><span class="hljs-built_in">print</span>(n2s(<span class="hljs-built_in">int</span>(cipher_right*inverse(m[<span class="hljs-number">1</span>],p))%p))<br><span class="hljs-comment">#flag&#123;2d6a7e4e-02d3-11ef-8836-a4b1c1c5a2d2&#125;</span><br></code></pre></td></tr></table></figure><h3 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h3><p>预期做法是造格，但是已经给了私钥，所以只是一道简单的在线题而已。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> DSA<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_proof_key</span>():<br>    password = <span class="hljs-string">&#x27;happy_the_year_of_loong&#x27;</span><br>    getin = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> password:<br>        <span class="hljs-keyword">if</span> random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>):<br>            getin += i.lower()<br>        <span class="hljs-keyword">else</span>:<br>            getin += i.upper()<br>    ans = hashlib.sha256(getin.encode()).hexdigest()<br>    <span class="hljs-keyword">return</span> getin,ans<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_key</span>():<br>    pri = random.randint(<span class="hljs-number">2</span>,q - <span class="hljs-number">2</span>)<br>    pub = <span class="hljs-built_in">pow</span>(g,pri,p)<br>    <span class="hljs-keyword">return</span> pri,pub<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sign</span>(<span class="hljs-params">m,pri</span>):<br>    k = <span class="hljs-built_in">int</span>(hashlib.md5(os.urandom(<span class="hljs-number">20</span>)).hexdigest(),<span class="hljs-number">16</span>)<br>    H = <span class="hljs-built_in">int</span>(hashlib.sha256(m).hexdigest(),<span class="hljs-number">16</span>)<br>    r = <span class="hljs-built_in">pow</span>(g,k,p) % q<br>    s = <span class="hljs-built_in">pow</span>(k,-<span class="hljs-number">1</span>,q) * (H + pri * r) % q<br>    <span class="hljs-keyword">return</span> r,s<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">verify</span>(<span class="hljs-params">pub,m,signature</span>):<br>    r,s = signature<br>    <span class="hljs-keyword">if</span> r &lt;= <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> r &gt;= q <span class="hljs-keyword">or</span> s &lt;= <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> s &gt;= q:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    w = <span class="hljs-built_in">pow</span>(s,-<span class="hljs-number">1</span>,q)<br>    H = <span class="hljs-built_in">int</span>(hashlib.sha256(m).hexdigest(),<span class="hljs-number">16</span>)<br>    u1 = H * w % q<br>    u2 = r * w % q<br>    v = (<span class="hljs-built_in">pow</span>(g,u1,p) * <span class="hljs-built_in">pow</span>(pub,u2,p) % p) % q<br>    <span class="hljs-keyword">return</span> v == r<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello sir,Plz login first&#x27;</span>)<br>    menu = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    1.sign</span><br><span class="hljs-string">    2.verify</span><br><span class="hljs-string">    3.get my key</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    times = <span class="hljs-number">8</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-built_in">print</span>(menu)<br>        <span class="hljs-keyword">if</span> times &lt; <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Timeout!&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        choice = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt;&#x27;</span>))<br>        <span class="hljs-keyword">if</span> choice == <span class="hljs-number">1</span>:<br>            name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Username:&#x27;</span>).encode()<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;admin&#x27;</span> <span class="hljs-keyword">in</span> name:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Get out!&#x27;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            r,s = sign(name,pri)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;This is your signature -- &gt; <span class="hljs-subst">&#123;r&#125;</span>,<span class="hljs-subst">&#123;s&#125;</span>&#x27;</span>)<br>            times -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> choice == <span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Sure,Plz input your signature&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(pri)<br>            r = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;r:&#x27;</span>))<br>            s = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;s:&#x27;</span>))<br>            <span class="hljs-keyword">if</span> verify(pub,<span class="hljs-string">b&#x27;admin&#x27;</span>,(r,s)) == <span class="hljs-literal">True</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;login success!&#x27;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;you are not admin&#x27;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">elif</span> choice == <span class="hljs-number">3</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Oh,your key is <span class="hljs-subst">&#123;(p,q,g)&#125;</span>&#x27;</span>)<br>getin,ans = gen_proof_key()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Your gift --&gt; <span class="hljs-subst">&#123;ans[:<span class="hljs-number">6</span>]&#125;</span>&#x27;</span>)<br>your_token = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Plz input your token\n&gt;&#x27;</span>)<br><span class="hljs-keyword">if</span> your_token != getin:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Get out!&#x27;</span>)<br>    exit(<span class="hljs-number">0</span>)<br><br>key = DSA.generate(<span class="hljs-number">1024</span>)<br>p, q, g = key.p, key.q, key.g<br>pri, pub = gen_key()<br><span class="hljs-keyword">if</span> login() == <span class="hljs-literal">False</span>:<br>    exit(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>).read())<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># nc 39.106.48.123 42315</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br>sh = remote(<span class="hljs-string">&quot;8.147.128.54&quot;</span>,<span class="hljs-number">37596</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Recv</span>():<br>    a = sh.recvline()<br>    <span class="hljs-built_in">print</span>(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sign</span>(<span class="hljs-params">m,pri</span>):<span class="hljs-comment">#m是名字</span><br>    k = <span class="hljs-built_in">int</span>(hashlib.md5(os.urandom(<span class="hljs-number">20</span>)).hexdigest(),<span class="hljs-number">16</span>)<br>    H = <span class="hljs-built_in">int</span>(hashlib.sha256(m).hexdigest(),<span class="hljs-number">16</span>)<br>    r = <span class="hljs-built_in">pow</span>(g,k,p) % q<br>    s = <span class="hljs-built_in">pow</span>(k,-<span class="hljs-number">1</span>,q) * (H + pri * r) % q<br>    <span class="hljs-keyword">return</span> r,s<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_proof_key</span>():<br>    password = <span class="hljs-string">&#x27;happy_the_year_of_loong&#x27;</span><br>    getin = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> password:<br>        <span class="hljs-keyword">if</span> random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>):<br>            getin += i.lower()<br>        <span class="hljs-keyword">else</span>:<br>            getin += i.upper()<br>    ans = hashlib.sha256(getin.encode()).hexdigest()<br>    <span class="hljs-keyword">return</span> getin,ans<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_proof_key_fixed</span>():<br>    password = <span class="hljs-string">&#x27;happytheyearofloong&#x27;</span><br>    n = <span class="hljs-built_in">len</span>(password)<br>    max_combinations = <span class="hljs-number">2</span> ** (n)<br><br>    results = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(max_combinations)):<br>        getin = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">if</span> i &amp; (<span class="hljs-number">1</span> &lt;&lt; j):<br>                getin += password[j].upper()<br>            <span class="hljs-keyword">else</span>:<br>                getin += password[j].lower()<br>        getin = getin[:<span class="hljs-number">5</span>]+<span class="hljs-string">&#x27;_&#x27;</span>+getin[<span class="hljs-number">5</span>:<span class="hljs-number">8</span>]+<span class="hljs-string">&#x27;_&#x27;</span>+getin[<span class="hljs-number">8</span>:<span class="hljs-number">12</span>]+<span class="hljs-string">&#x27;_&#x27;</span>+getin[<span class="hljs-number">12</span>:<span class="hljs-number">14</span>]+<span class="hljs-string">&#x27;_&#x27;</span>+getin[<span class="hljs-number">14</span>:<span class="hljs-number">21</span>]<br>        ans = hashlib.sha256(getin.encode()).hexdigest()<br>        <span class="hljs-keyword">if</span> gift == ans[:<span class="hljs-number">6</span>].encode():<br>            <span class="hljs-built_in">print</span>(getin)<br>            <span class="hljs-keyword">return</span> getin<br><br>                <br>gift = sh.recvline()[-<span class="hljs-number">7</span>:-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(gift)<br>Recv()<br>getin = gen_proof_key_fixed()<br>sh.sendline(getin)<br>Recv()<br>Recv()<br>Recv()<br>Recv()<br>Recv()<br>Recv()<br>sh.sendline(<span class="hljs-string">b&#x27;3&#x27;</span>)<br>key = sh.recvline()<br>p,q,g = <span class="hljs-built_in">int</span>((re.split(<span class="hljs-string">b&#x27;[(,)]&#x27;</span>,key))[<span class="hljs-number">2</span>].decode()),<span class="hljs-built_in">int</span>((re.split(<span class="hljs-string">b&#x27;[(,)]&#x27;</span>,key))[<span class="hljs-number">3</span>].decode()),<span class="hljs-built_in">int</span>((re.split(<span class="hljs-string">b&#x27;[(,)]&#x27;</span>,key))[<span class="hljs-number">4</span>].decode())<br><br><span class="hljs-built_in">list</span> = [<span class="hljs-string">b&#x27;a&#x27;</span>,<span class="hljs-string">b&#x27;b&#x27;</span>,<span class="hljs-string">b&#x27;c&#x27;</span>,<span class="hljs-string">b&#x27;d&#x27;</span>,<span class="hljs-string">b&#x27;e&#x27;</span>,<span class="hljs-string">b&#x27;f&#x27;</span>,<span class="hljs-string">b&#x27;g&#x27;</span>,<span class="hljs-string">b&#x27;h&#x27;</span>,<span class="hljs-string">b&#x27;i&#x27;</span>,<span class="hljs-string">b&#x27;j&#x27;</span>]<br>H = [<span class="hljs-built_in">int</span>(hashlib.sha256(m).hexdigest(),<span class="hljs-number">16</span>) <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>]<br>r = []<br>s = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    Recv()<br>    Recv()<br>    Recv()<br>    Recv()<br>    Recv()<br>    sh.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    sh.sendline(<span class="hljs-built_in">list</span>[i])<br>    pri = (sh.recvline())<br>    r.append(<span class="hljs-built_in">int</span>(re.split(<span class="hljs-string">b&#x27;[(, &gt;\\n)]&#x27;</span>,pri)[<span class="hljs-number">8</span>].decode()))<br>    s.append(<span class="hljs-built_in">int</span>(re.split(<span class="hljs-string">b&#x27;[(, &gt;\\n)]&#x27;</span>,pri)[<span class="hljs-number">9</span>].decode()))<br><span class="hljs-built_in">print</span>(r,s)<br>Recv()<br>Recv()<br>Recv()<br>Recv()<br>Recv()<br>sh.sendline(<span class="hljs-string">b&#x27;2&#x27;</span>)<br>Recv()<br>t = sh.recvline()<br><span class="hljs-built_in">print</span>(t)<br>pri = <span class="hljs-built_in">int</span>(t[:-<span class="hljs-number">1</span>].decode())<br><span class="hljs-built_in">print</span>(pri)<br>k = (inverse(s[<span class="hljs-number">1</span>],q)*(H[<span class="hljs-number">1</span>]+pri*r[<span class="hljs-number">1</span>]))%q<br><span class="hljs-keyword">assert</span> (r[<span class="hljs-number">1</span>] == (<span class="hljs-built_in">pow</span>(g,k,p)%q))<br>r_,s_ = sign(<span class="hljs-string">b&#x27;admin&#x27;</span>,pri)<br>sh.sendline(<span class="hljs-built_in">str</span>(r_).encode())<br>sh.sendline(<span class="hljs-built_in">str</span>(s_).encode())<br>Recv()<br>Recv()<br>Recv()<br>Recv()<br>Recv()<br><br></code></pre></td></tr></table></figure><p>缺点在于不喜欢用recvuntil导致代码非常丑陋，懒得喷了。</p><p>其实无所谓（lol</p><h3 id="happy2024"><a href="#happy2024" class="headerlink" title="happy2024"></a>happy2024</h3><p>最废物的一集。</p><p>也是没见过，实在没办法，长知识了。</p><p>主要参考糖爹的博客做了复盘。</p><p>happy2024.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> not2022but2024 <span class="hljs-keyword">import</span> CBC_key<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><br>flag = <span class="hljs-string">b&#x27;flag&#123;&#125;&#x27;</span><br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">import</span> random<br><br>n = <span class="hljs-number">31</span><br>m = <span class="hljs-number">80</span><br>M = random_prime(<span class="hljs-number">2</span>^<span class="hljs-number">256</span>)<br>As = [random.randrange(<span class="hljs-number">0</span>,M) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>xs = [random_vector(GF(<span class="hljs-number">2</span>),m).change_ring(ZZ) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>Bs = <span class="hljs-built_in">sum</span>([As[_] * vector(Zmod(M),xs[_]) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]).change_ring(ZZ)<br><br>IV = sha256(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">sum</span>(As))).encode()).digest()[:<span class="hljs-number">16</span>]<br>aes = AES.new(CBC_key,AES.MODE_CBC,iv=IV)<br>cipher = aes.encrypt(pad(flag,<span class="hljs-number">16</span>))<br><span class="hljs-built_in">print</span>(cipher)<br><span class="hljs-built_in">print</span>(Bs)<br><span class="hljs-built_in">print</span>(M)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">b&#x27;%\x97\xf77\x16.\x83\x99\x06^\xf2h!k\xfaN6\xb0\x19vd]\x04B\x9e&amp;\xc1V\xed\xa3\x08gX\xb2\xe3\x16\xc2y\xf5/\xb1\x1f&gt;\xa1\xa0DO\xc6gy\xf2l\x1e\xe89\xaeU\xf7\x9d\x03\xe5\xcd*&#123;&#x27;</span><br><span class="hljs-string">(53844623749876439509532172750379183740225057481025870998212640851346598787721, 15997635878191801541643082619079049731736272496140550575431063625353775764393, 8139290345909123114252159496175044671899453388367371373602143061626515782577, 51711312485200750691269670849294877329277547032926376477569648356272564451730, 56779019321370476268059887897332998945445828655471373308510004694849181121902, 11921919583304047088765439181178800943487721824857435095500693388968302784145, 41777099661730437699539865937556780791076847595852026437683411014342825707752, 68066063799186134662272840678071052963223888567046888486717443388472263597588, 62347360130131268176184039659663746274596563636698473727487875097532115406559, 5552427086805474558842754960080936702720391900282118962928327391068474712240, 48174546926340119542515098715425118344495523250058429245324464327285482535849, 8793683612853105242264232876135147970346410658466322451040541263235700009570, 78872313670499828088921565348302137515276635926740431961166334829533274321063, 45986964918902932699857479987521822871519141147943250535680974229322816549720, 5539445840707805914548390575494054384665037598195811353312773359759245783130, 20826977782899762485848762121688687172338304931446040988601154085704702880401, 46412211529487215742337744878389285037116176985579657423264681199244501574725, 50741521861819713251561088062479658512988690918747542471827101566427731303416, 2657362476409491643067267745198536051013594201408763262228104521443406410606, 44328850588851214219220815931558890597249087261312360172796979417041192180750, 17240480010040498121198897919561403023278264974274103780966819232080038065027, 76464770903606818697905572779761942703446600798395362596698226797476804541350, 68085613496380272855135907856973365357126900379731050931749074863934645465000, 9526872466819179025323613184178423510032119770349155497772862700507205270355, 28561337010953007345414455535991538568670238712225998300322929406204673707677, 39182834208152122329027105134597748924433413223238510660062164011424607149326, 19600894094417831727934201861135428039216930531542618497625138063955073257655, 33328666355366104030800248593757531247937582259417117239494927842284231531315, 27309478993506749161736165865367616487993717640890015043768259212155864131357, 32466044572968154084881296026899630667525833604042642990295342316076396001186, 49980145403553319854613749104421978583845098879328180142454823188167202440531, 38902032967058543060885229430655776526806612465844770409338358289020456837934, 78745490507168848644435092323691842070096557975478968062804777954092505226481, 29262215059225133132435433010691828148944958395141222387754208495595513295896, 6511387460586172200641169204557875679554320457409786241141816573577911255491, 66384481485687195909117407019475796131750762463683904604078327730810293442381, 423759905526048383541413041558602466949757468395447771021215945027193456079, 22783408973585275782090957855992582495700723663661365548067357177569979041893, 68353193576625297253561095680880135893826094396013897100461325445097220567952, 43167069172003777333498030236780725018297276760410131777676641770086016833895, 64358541048274393300028483577573557871346089755363306971761786692679519831483, 21556895066359380729591004278007242407987861350911480029337345312081293559522, 44577165826706395273335181181407938788716768576602201516787959082367484270939, 78757778436852423927977028333940102206341452120720821559562765928972163293676, 44086875063535769349025637423479101247594814134304419072849625465484225865969, 14807706619359620049095657244485266549982349493285112282927264862821502986777, 43450687889967222089875050731849984583914520350091026482076939962301357700844, 1474778474197964170746922000689413626959960404877093741742022788928758658052, 79005121352540562329295808987757987563818908122338120731119811866179839023066, 47361429831079185336051370209844150786334814579472466274050224935364333043476, 8909641306798261411104006708035991379862284048887418817598377473145077145642, 44993528669446910461207972446344484798499156885515181685694150462051560323869, 60204243272925546012169935228277233636280408169577344559847112958669050860101, 66809206609934431859673802937592425152676610053648406215573441926481740948749, 48623757302381792245138496825183044619235050623516633984941208604059757210728, 74934019261870654132458355068539987475536823529848461398042458398130801089348, 81278897734052917585963333108338812132716202790194259021265555401046891572210, 41418370274745377550600009352057265922713132669834032188979684042175922204024, 73981010754794931896065529724613353453372905938901875720094092383581574259191, 11510558496830929812186594415924901190526760075439658941646537744390447056913, 12871197940932509721689273944282764851472299179520294551038550766143300003239, 13125880938267970248643653453332470640527994428672724309079849030361661332656, 54395419708886945822916038876690794705789028459055268227222784885329659953982, 61086065362549289820758257234061183781820530343096737751500151263095654158833, 82468574289042215923908109910435173164917593677419944115441863191433795206895, 74824772928304750096519403623184368585460834399443013973554958461695733158569, 62083272769549467370505302454770858941632031970595402929903886003242570089639, 32887658447648473554892464271221330218759930615421257444587260809741011575629, 61429802749826163386356730793012182546392982886506956044525858721859869425131, 5026334434650853992374810127604777276035123569907012144091150436739161826287, 45670628392162402176230172863069957038704667046592086395237022845943911838596, 75520245720261510582172547313413372786802547571090110489287163846652239401646, 58965653594414801363386215405590061806834352303047020261264473838037335631061, 58420763657138617301836404602193276258504426799372302098717637069900583548539, 59706321905964570794806865247363209194143775670139452625484601579677510881069, 58198559234141523043769073193017418608700536234755760366044515212056701655389, 63604949023865770163110419193113341020042474142600282131130750460724114084001, 83394429495100363085521124642271430199140318544724150468993097819105267094727, 69274794456073656789648159458959148992942789823222968847070524400609637893875, 46951397339712109206750633799342393646147684284310708226074432825222250739146)</span><br><span class="hljs-string">83509079445737370227053838831594083102898723557726396235563637483818348136543</span><br></code></pre></td></tr></table></figure><p>not2022but2024.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>CBC_key = <span class="hljs-string">b&#x27;&#x27;</span><br><br>p,q = getPrime(<span class="hljs-number">512</span>),getPrime(<span class="hljs-number">512</span>)<br>n = p * q<br>N = n**<span class="hljs-number">2</span> + <span class="hljs-number">2024</span><br>hint = (<span class="hljs-built_in">pow</span>(<span class="hljs-number">3</span>, <span class="hljs-number">2022</span>, N) * p**<span class="hljs-number">2</span> + <span class="hljs-built_in">pow</span>(<span class="hljs-number">5</span>, <span class="hljs-number">2022</span>, N) * q**<span class="hljs-number">2</span>) % N<br>c = <span class="hljs-built_in">pow</span>(bytes_to_long(CBC_key), <span class="hljs-number">65537</span>, n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n =&#x27;</span>, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;h =&#x27;</span>, hint)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c =&#x27;</span>, c)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 104765768221225848380273603921218042896496091723683489832860494733817042387427987244507704052637674086899990536096984680534816330245712225302233334574349506189442333792630084535988347790345154447062755551340749218034086168589615547612330724516560147636445207363257849894676399157463355106007051823518400959497</span><br><span class="hljs-string">h = 7203581190271819534576999256270240265858103390821370416379729376339409213191307296184376071456158994788217095325108037303267364174843305521536186849697944281211331950784736288318928189952361923036335642517461830877284034872063160219932835448208223363251605926402262620849157639653619475171619832019229733872640947057355464330411604345531944267500361035919621717525840267577958327357608976854255222991975382510311241178822169596614192650544883130279553265361702184320269130307457859444687753108345652674084307125199795884106515943296997989031669214605935426245922567625294388093837315021593478776527614942368270286385</span><br><span class="hljs-string">c = 86362463246536854074326339688321361763048758911466531912202673672708237653371439192187048224837915338789792530365728395528053853409289475258767985600884209642922711705487919620655525967504514849941809227844374505134264182900183853244590113062802667305254224702526621210482746686566770681208335492189720633162</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>第一步 造格。</strong></p><p>$$N&#x3D;n^2+2024$$</p><p>$$hint&#x3D;3^{2022}p^2+5^{2022}q^2\quad(mod N)$$</p><p>因为p^2和 q^2都很小,所以可以造格求解,做出等式</p><p>$$3^{2022}p^2+5^{2022}q^2-h+kN&#x3D;0$$</p><p>得到这样的线性关系</p><p>$$<br>(p^2,q^2,1,k)<br>\begin{pmatrix}1&amp;0&amp;0&amp;3^{2022}\\<br>0&amp;1&amp;0&amp;5^{2022}\\<br>0&amp;0&amp;1&amp;-h\\<br>0&amp;0&amp;0&amp;N\\<br>\end{pmatrix}<br>&#x3D;(p^2,q^2,1,0)<br>$$<br>然而此时规约出来的向量并非是我们想要的向量(其实得到的很接近只是略小),所以只需要在小范围爆破向量的线性组合,就有机会找到.</p><p><strong>第二步 hssp</strong></p><p><em>hssp是什么?</em> </p><p>hssp,又名隐藏子集和问题,定义：给定一个整数$M$在$\mathbb{Z}_M$中，以及随机向量$x_1,x_2,\ldots,x_n\in\mathbb{Z}_m$,其成分在${0,1}$中，和$h\in\mathbb{Z}_m$,使得$h&#x3D;\alpha_1x_1+\alpha_2x_2+\ldots+\alpha_nx_n\mod M$。恢复向量$\alpha$的值在多项式时间下是可行的。</p><p>在这一题中</p><p>$$A_{1\times31}x_{31\times80}&#x3D;B_{1\times80}\quad(mod M)$$</p><p>B已知 M已知 要还原A再求和 x相对小 是符合hssp的</p><p>根据论文<a href="https://eprint.iacr.org/2020/461.pdf,%E6%88%91%E4%BB%AC%E5%BA%94%E8%AF%A5%E8%BF%99%E4%B9%88%E9%80%A0%E6%A0%BC">https://eprint.iacr.org/2020/461.pdf,我们应该这么造格</a>.</p><p>$$<br>\begin{pmatrix}I_{80\times80}&amp;B_{1\times80}^T\\<br>O&amp;M\\<br>\end{pmatrix}<br>$$</p><p>感谢学长的解释</p><p><img src="/../pic/12.jpg" alt="461e3db69613b88fd8cfa81ec482323"></p><p>(其实脚本里反过来造了,但是众所周知的原因是没有区别的)</p><p>然后LLL规约出来,再反复做线性组合,知道能找出向量为止.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">L = Matrix(ZZ,[<br>    [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>^<span class="hljs-number">2022</span>],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>^<span class="hljs-number">2022</span>],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>^<span class="hljs-number">1022</span>,-h],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,N]<br>])<br>L[:,-<span class="hljs-number">1</span>:] *= N<br>res = L.LLL()<br><br><br><span class="hljs-keyword">import</span> gmpy2<br>t = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(-<span class="hljs-number">100</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(-<span class="hljs-number">100</span>,<span class="hljs-number">100</span>):<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(-<span class="hljs-number">100</span>,<span class="hljs-number">100</span>):<br>            t = i*res[<span class="hljs-number">0</span>] + j*res[<span class="hljs-number">1</span>] + k*res[<span class="hljs-number">2</span>]<br>            <span class="hljs-keyword">if</span>(gmpy2.iroot(<span class="hljs-built_in">abs</span>(t[<span class="hljs-number">0</span>]),<span class="hljs-number">2</span>)[<span class="hljs-number">1</span>] == <span class="hljs-literal">True</span>):<br>                pp = gmpy2.iroot(<span class="hljs-built_in">abs</span>(t[<span class="hljs-number">0</span>]),<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]<br>                p = GCD(pp,n)<br>                q = n // p<br>                <span class="hljs-built_in">print</span>(p*q == n , p)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment">#Zmod(M): xA = B (x is binary Matrix)</span><br>B = (<span class="hljs-number">53844623749876439509532172750379183740225057481025870998212640851346598787721</span>, <span class="hljs-number">15997635878191801541643082619079049731736272496140550575431063625353775764393</span>, <span class="hljs-number">8139290345909123114252159496175044671899453388367371373602143061626515782577</span>, <span class="hljs-number">51711312485200750691269670849294877329277547032926376477569648356272564451730</span>, <span class="hljs-number">56779019321370476268059887897332998945445828655471373308510004694849181121902</span>, <span class="hljs-number">11921919583304047088765439181178800943487721824857435095500693388968302784145</span>, <span class="hljs-number">41777099661730437699539865937556780791076847595852026437683411014342825707752</span>, <span class="hljs-number">68066063799186134662272840678071052963223888567046888486717443388472263597588</span>, <span class="hljs-number">62347360130131268176184039659663746274596563636698473727487875097532115406559</span>, <span class="hljs-number">5552427086805474558842754960080936702720391900282118962928327391068474712240</span>, <span class="hljs-number">48174546926340119542515098715425118344495523250058429245324464327285482535849</span>, <span class="hljs-number">8793683612853105242264232876135147970346410658466322451040541263235700009570</span>, <span class="hljs-number">78872313670499828088921565348302137515276635926740431961166334829533274321063</span>, <span class="hljs-number">45986964918902932699857479987521822871519141147943250535680974229322816549720</span>, <span class="hljs-number">5539445840707805914548390575494054384665037598195811353312773359759245783130</span>, <span class="hljs-number">20826977782899762485848762121688687172338304931446040988601154085704702880401</span>, <span class="hljs-number">46412211529487215742337744878389285037116176985579657423264681199244501574725</span>, <span class="hljs-number">50741521861819713251561088062479658512988690918747542471827101566427731303416</span>, <span class="hljs-number">2657362476409491643067267745198536051013594201408763262228104521443406410606</span>, <span class="hljs-number">44328850588851214219220815931558890597249087261312360172796979417041192180750</span>, <span class="hljs-number">17240480010040498121198897919561403023278264974274103780966819232080038065027</span>, <span class="hljs-number">76464770903606818697905572779761942703446600798395362596698226797476804541350</span>, <span class="hljs-number">68085613496380272855135907856973365357126900379731050931749074863934645465000</span>, <span class="hljs-number">9526872466819179025323613184178423510032119770349155497772862700507205270355</span>, <span class="hljs-number">28561337010953007345414455535991538568670238712225998300322929406204673707677</span>, <span class="hljs-number">39182834208152122329027105134597748924433413223238510660062164011424607149326</span>, <span class="hljs-number">19600894094417831727934201861135428039216930531542618497625138063955073257655</span>, <span class="hljs-number">33328666355366104030800248593757531247937582259417117239494927842284231531315</span>, <span class="hljs-number">27309478993506749161736165865367616487993717640890015043768259212155864131357</span>, <span class="hljs-number">32466044572968154084881296026899630667525833604042642990295342316076396001186</span>, <span class="hljs-number">49980145403553319854613749104421978583845098879328180142454823188167202440531</span>, <span class="hljs-number">38902032967058543060885229430655776526806612465844770409338358289020456837934</span>, <span class="hljs-number">78745490507168848644435092323691842070096557975478968062804777954092505226481</span>, <span class="hljs-number">29262215059225133132435433010691828148944958395141222387754208495595513295896</span>, <span class="hljs-number">6511387460586172200641169204557875679554320457409786241141816573577911255491</span>, <span class="hljs-number">66384481485687195909117407019475796131750762463683904604078327730810293442381</span>, <span class="hljs-number">423759905526048383541413041558602466949757468395447771021215945027193456079</span>, <span class="hljs-number">22783408973585275782090957855992582495700723663661365548067357177569979041893</span>, <span class="hljs-number">68353193576625297253561095680880135893826094396013897100461325445097220567952</span>, <span class="hljs-number">43167069172003777333498030236780725018297276760410131777676641770086016833895</span>, <span class="hljs-number">64358541048274393300028483577573557871346089755363306971761786692679519831483</span>, <span class="hljs-number">21556895066359380729591004278007242407987861350911480029337345312081293559522</span>, <span class="hljs-number">44577165826706395273335181181407938788716768576602201516787959082367484270939</span>, <span class="hljs-number">78757778436852423927977028333940102206341452120720821559562765928972163293676</span>, <span class="hljs-number">44086875063535769349025637423479101247594814134304419072849625465484225865969</span>, <span class="hljs-number">14807706619359620049095657244485266549982349493285112282927264862821502986777</span>, <span class="hljs-number">43450687889967222089875050731849984583914520350091026482076939962301357700844</span>, <span class="hljs-number">1474778474197964170746922000689413626959960404877093741742022788928758658052</span>, <span class="hljs-number">79005121352540562329295808987757987563818908122338120731119811866179839023066</span>, <span class="hljs-number">47361429831079185336051370209844150786334814579472466274050224935364333043476</span>, <span class="hljs-number">8909641306798261411104006708035991379862284048887418817598377473145077145642</span>, <span class="hljs-number">44993528669446910461207972446344484798499156885515181685694150462051560323869</span>, <span class="hljs-number">60204243272925546012169935228277233636280408169577344559847112958669050860101</span>, <span class="hljs-number">66809206609934431859673802937592425152676610053648406215573441926481740948749</span>, <span class="hljs-number">48623757302381792245138496825183044619235050623516633984941208604059757210728</span>, <span class="hljs-number">74934019261870654132458355068539987475536823529848461398042458398130801089348</span>, <span class="hljs-number">81278897734052917585963333108338812132716202790194259021265555401046891572210</span>, <span class="hljs-number">41418370274745377550600009352057265922713132669834032188979684042175922204024</span>, <span class="hljs-number">73981010754794931896065529724613353453372905938901875720094092383581574259191</span>, <span class="hljs-number">11510558496830929812186594415924901190526760075439658941646537744390447056913</span>, <span class="hljs-number">12871197940932509721689273944282764851472299179520294551038550766143300003239</span>, <span class="hljs-number">13125880938267970248643653453332470640527994428672724309079849030361661332656</span>, <span class="hljs-number">54395419708886945822916038876690794705789028459055268227222784885329659953982</span>, <span class="hljs-number">61086065362549289820758257234061183781820530343096737751500151263095654158833</span>, <span class="hljs-number">82468574289042215923908109910435173164917593677419944115441863191433795206895</span>, <span class="hljs-number">74824772928304750096519403623184368585460834399443013973554958461695733158569</span>, <span class="hljs-number">62083272769549467370505302454770858941632031970595402929903886003242570089639</span>, <span class="hljs-number">32887658447648473554892464271221330218759930615421257444587260809741011575629</span>, <span class="hljs-number">61429802749826163386356730793012182546392982886506956044525858721859869425131</span>, <span class="hljs-number">5026334434650853992374810127604777276035123569907012144091150436739161826287</span>, <span class="hljs-number">45670628392162402176230172863069957038704667046592086395237022845943911838596</span>, <span class="hljs-number">75520245720261510582172547313413372786802547571090110489287163846652239401646</span>, <span class="hljs-number">58965653594414801363386215405590061806834352303047020261264473838037335631061</span>, <span class="hljs-number">58420763657138617301836404602193276258504426799372302098717637069900583548539</span>, <span class="hljs-number">59706321905964570794806865247363209194143775670139452625484601579677510881069</span>, <span class="hljs-number">58198559234141523043769073193017418608700536234755760366044515212056701655389</span>, <span class="hljs-number">63604949023865770163110419193113341020042474142600282131130750460724114084001</span>, <span class="hljs-number">83394429495100363085521124642271430199140318544724150468993097819105267094727</span>, <span class="hljs-number">69274794456073656789648159458959148992942789823222968847070524400609637893875</span>, <span class="hljs-number">46951397339712109206750633799342393646147684284310708226074432825222250739146</span>)<br>M = <span class="hljs-number">83509079445737370227053838831594083102898723557726396235563637483818348136543</span><br>n = <span class="hljs-number">31</span><br>m = <span class="hljs-number">80</span><br><br><span class="hljs-comment">######################################### part1 solve Orthogonal Lattice of B</span><br><span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>):<br>    BL = block_matrix(ZZ,[<br>        [M,<span class="hljs-number">0</span>],<br>        [Matrix(ZZ,B).T,<span class="hljs-number">1</span>]<br>    ])<br>    OL = BL.LLL()<br>    OL = Matrix(ZZ,OL[:m-n,<span class="hljs-number">1</span>:])<br><br><br><span class="hljs-comment">######################################### part2 find kernel and reduce</span><br>Ker = OL.right_kernel().matrix()<br>Ker = Ker.BKZ()<br><br><br><span class="hljs-comment">######################################### part3 recover binary x(use greedy methods)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">v</span>):<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">all</span>(i == <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> i == <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> v)):<br>        <span class="hljs-keyword">return</span> v<br>    <span class="hljs-keyword">elif</span>(<span class="hljs-built_in">all</span>(i == -<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> i == <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> v)):<br>        <span class="hljs-keyword">return</span> -v<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">Ker,x</span>):<br>    x = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ini]<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> vi <span class="hljs-keyword">in</span> x:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Ker:<br>                xi1 = check(i + vi)<br>                xi2 = check(i - vi)<br>                <span class="hljs-keyword">if</span> xi1 <span class="hljs-keyword">and</span> xi1 <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> x:<br>                    x.append(xi1)<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(x) == n):<br>                        <span class="hljs-keyword">return</span> Matrix(ZZ,x)<br>                <span class="hljs-keyword">if</span> xi2 <span class="hljs-keyword">and</span> xi2 <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> x:<br>                    x.append(xi2)<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(x) == n):<br>                        <span class="hljs-keyword">return</span> Matrix(ZZ,x)<br><br>ini = [check(vi) <span class="hljs-keyword">for</span> vi <span class="hljs-keyword">in</span> Ker <span class="hljs-keyword">if</span> check(vi)]<br>x = find(Ker,ini)<br><br><br><span class="hljs-comment">######################################### part4 recover sum of A</span><br>A = x.solve_left(Matrix(Zmod(M),B))<br>sumA = <span class="hljs-built_in">sum</span>(A[<span class="hljs-number">0</span>].change_ring(ZZ))<br><br><span class="hljs-built_in">print</span>(sumA)<br><br><br><span class="hljs-comment">#1190342683523422755570459424048363591795982274808192123460316142044766104571627</span><br><br>p = <span class="hljs-number">11846999515401139806618780458482772585816656222161925595380112630854263318903047176862162285755281915011589524788709945023820217521669415569797208065004797</span><br>q = n // p<br>CBC_key = long_to_bytes(<span class="hljs-built_in">pow</span>(c,inverse(<span class="hljs-number">65537</span>,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)),n))<br><br>aes = AES.new(CBC_key,AES.MODE_CBC,iv=IV)<br>flag = aes.decrypt(cipher)<br><span class="hljs-built_in">print</span>(flag)<br><br><span class="hljs-comment">#flag&#123;2024_1s_a_G00d_year_My_b3st_w1shes_fOr_ctfers&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
      <tag>Web</tag>
      
      <tag>Misc</tag>
      
      <tag>Hgame</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-DKCTF-wp-crypto</title>
    <link href="/2024/05/27/2024-DKCTF-wp-crypto/"/>
    <url>/2024/05/27/2024-DKCTF-wp-crypto/</url>
    
    <content type="html"><![CDATA[<h1 id="2024-DKCTF-wp-crypto"><a href="#2024-DKCTF-wp-crypto" class="headerlink" title="2024-DKCTF-wp-crypto"></a>2024-DKCTF-wp-crypto</h1><p>很有意思。</p><h3 id="Crypto-签到"><a href="#Crypto-签到" class="headerlink" title="Crypto_签到"></a>Crypto_签到</h3><p>简单lcg，换元解即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>m = <span class="hljs-string">b&#x27;flag&#123;********&#125;&#x27;</span><br>a =  getPrime(<span class="hljs-number">247</span>)<br>b =  getPrime(<span class="hljs-number">247</span>)<br>n =  getPrime(<span class="hljs-number">247</span>)<br><br>seed = bytes_to_long(m)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LCG</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, seed, a, b, m</span>):<br>        self.seed = seed  <br>        self.a = a  <br>        self.b = b  <br>        self.m = m  <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">generate</span>(<span class="hljs-params">self</span>):<br>        self.seed = (self.a * self.seed + self.b) % self.m<br>        self.seed = (self.a * self.seed + self.b) % self.m<br>        <span class="hljs-keyword">return</span> self.seed<br><br>seed = bytes_to_long(m)<br><br>output = LCG(seed,a,b,n)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(getPrime(<span class="hljs-number">16</span>)):<br>    output.generate()<br><br><span class="hljs-built_in">print</span>(output.generate())<br><span class="hljs-built_in">print</span>(output.generate())<br><span class="hljs-built_in">print</span>(output.generate())<br><span class="hljs-built_in">print</span>(output.generate())<br><span class="hljs-built_in">print</span>(output.generate())<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">5944442525761903973219225838876172353829065175803203250803344015146870499</span><br><span class="hljs-string">141002272698398325287408425994092371191022957387708398440724215884974524650</span><br><span class="hljs-string">42216026849704835847606250691811468183437263898865832489347515649912153042</span><br><span class="hljs-string">67696624031762373831757634064133996220332196053248058707361437259689848885</span><br><span class="hljs-string">19724224939085795542564952999993739673429585489399516522926780014664745253</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>只需要注意generate变换了两次，直接贴官方解吧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><br>output = [<span class="hljs-number">5944442525761903973219225838876172353829065175803203250803344015146870499</span>,<br>          <span class="hljs-number">141002272698398325287408425994092371191022957387708398440724215884974524650</span>,<br>          <span class="hljs-number">42216026849704835847606250691811468183437263898865832489347515649912153042</span>,<br>          <span class="hljs-number">67696624031762373831757634064133996220332196053248058707361437259689848885</span>,<br>          <span class="hljs-number">19724224939085795542564952999993739673429585489399516522926780014664745253</span>]<br>t = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(output)):<br>    t.append(output[i] - output[i - <span class="hljs-number">1</span>])<br><br>T = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(t) - <span class="hljs-number">1</span>):<br>    T.append(t[i + <span class="hljs-number">1</span>] * t[i - <span class="hljs-number">1</span>] - t[i] ** <span class="hljs-number">2</span>)<br><br>m = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(T) - <span class="hljs-number">1</span>):<br>    mm = gmpy2.gcd(T[i], T[i + <span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">if</span> isPrime(mm):<br>        m.append(<span class="hljs-built_in">int</span>(mm))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>):<br>            <span class="hljs-keyword">if</span> isPrime(mm // i):<br>                mm = mm // i<br>                m.append(<span class="hljs-built_in">int</span>(mm))<br>                <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> m:<br>    a = gmpy2.invert(t[<span class="hljs-number">0</span>], i) * t[<span class="hljs-number">1</span>] % i<br>    b = output[<span class="hljs-number">1</span>] - a * output[<span class="hljs-number">0</span>] % i<br>    a_ = gmpy2.invert(a, i)<br><br>    seed = a_ * (output[<span class="hljs-number">0</span>] - b) % i<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span> ** <span class="hljs-number">16</span>):<br>        seed = a_ * (seed - b) % i<br>        flag = long_to_bytes(seed)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> flag:<br>            <span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h3 id="Matrix-revenge"><a href="#Matrix-revenge" class="headerlink" title="Matrix_revenge"></a>Matrix_revenge</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br><br>flag = <span class="hljs-string">b&quot;DRKCTF&#123;??????????????&#125;&quot;</span> + os.urandom(<span class="hljs-number">212</span>)<br><br>p = getPrime(<span class="hljs-number">120</span>)<br>q = getPrime(<span class="hljs-number">120</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;p = <span class="hljs-subst">&#123;p&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;q = <span class="hljs-subst">&#123;q&#125;</span>&quot;</span>)<br><br>part = [bytes_to_long(flag[<span class="hljs-number">16</span>*i:<span class="hljs-number">16</span>*(i+<span class="hljs-number">1</span>)]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br><br>M = Matrix(Zmod(n),[<br>    [part[<span class="hljs-number">4</span>*i+j] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)<br>])<br><br>e = <span class="hljs-number">65537</span><br>C = M ** e<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;C = <span class="hljs-subst">&#123;<span class="hljs-built_in">list</span>(C)&#125;</span>&quot;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">p = 724011645798721468405549293573288113   </span><br><span class="hljs-string">q = 712853480230590736297703668944546433</span><br><span class="hljs-string">C = [(354904294318305224658454053059339790915904962123902870614765704810196137, 307912599668649689143528844269686459695648563337814923172488152872006235, 143644686443811064172873392982322248654471792394264352463341325181752577, 22995887787365556743279529792687264972121816670422146768160153217903088), (111349308911096779758451570594323566987628804920420784718347230085486245, 370237591900013263581099395076767089468466012835217658851568690263421449, 305451886364184428434479088589515273362629589399867618474106045683764897, 454103583344277343974714791669312753685583930212748198341578178464249150), (168497521640129742759262423369385500102664740971338844248603058993335309, 228941893018899960301839898935872289351667488000643221589230804176281482, 340080333594340128998141220817079770261711483018587969623825086357581002, 122922413789905368029659916865893297311475500951645918611759627764993518), (10332477229415731242316540110058798318207430965033579181240340751539101, 238172263316130590821973648893483382211906906298557131324791759298887701, 487586702165464601760230182019344052665496627253691596871783460314632260, 12238020921585443139790088280608644406695242899000592355653073240122626)]</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>有限域下矩阵是否有类似欧拉定理的性质呢？</p><p>论文 <a href="https://www.gcsu.edu/sites/files/page-assets/node-808/attachments/pangia.pdf">https://www.gcsu.edu/sites/files/page-assets/node-808/attachments/pangia.pdf</a></p><p>我们发现当二阶方阵行列式不整除n时，在一般线性群下有阶</p><p>$$g&#x3D;(p^2-1)(p^2-p)(q^2-1)(q^2-q)$$</p><p>其更一般的形式为</p><p>$$g&#x3D;\prod_{k&#x3D;0}^{s-1}(p^s-p^k)\cdot\prod_{k&#x3D;0}^{s-1}(q^s-q^k).$$</p><p>简单推导</p><p>第一列向量可以是 $\mathbb{F}_q^n$中的任何非零向量，所以，第一列有$q^{n}-1$种选择。</p><p>第二列向量与第一列向量线性无关，第一列向量生成子空间中包含$q$个向量，所以第二列向量有$q^{n}-q$种选择。</p><p>同理，第三列向量有$q^{n}-q^{2}$种选择，第四列为$q^{n}-q^{3}$.</p><p>推广可得$$g&#x3D;\prod_{k&#x3D;0}^{s-1}(p^s-p^k)\cdot\prod_{k&#x3D;0}^{s-1}(q^s-q^k).$$</p><p>这说明<strong>g为群中元素的数量，也就是群的阶</strong></p><p>由拉格朗日定理我们知道子群的阶一定是群的阶的约数，所以元素阶整除群的阶，所以群中任意元素的g次幂必定为e。</p><p>（费马小定理就是拉格朗日定理在模p群下的表现）</p><p>所以同理于RSA我们同样可以在阶下找一个e的逆元d，用与RSA一样的方法来做matrixRSA。</p><p>其实这题在hnctf出过了，但是我没做，我就奇怪这题算是最复杂的了怎么会有这么多解</p><p>（那么当方阵行列式整除n时，是否有类似于amm的算法呢？）</p><p>（如果e很大，是否有类似于维纳攻击的方法呢？）</p><p>（亟待研究）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decimal_to_base</span>(<span class="hljs-params">n, base</span>):<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0&quot;</span><br>    digits = []<br>    <span class="hljs-keyword">while</span> n:<br>        digits.append(<span class="hljs-built_in">int</span>(n % base))<br>        n //= base<br>    digits = digits[::-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> digits<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">matrixproduce</span>(<span class="hljs-params">A,digits,n</span>):<br>    lena = <span class="hljs-built_in">len</span>(digits)<br>    C = identity_matrix(<span class="hljs-number">4</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(lena):<br>        B = Matrix(Zmod(n),A)<br>        m = lena-i<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m-<span class="hljs-number">1</span>):<br>            B = B**n<br>        B = B**digits[i]<br>        C = C*B<br>    <span class="hljs-keyword">return</span> C<br>    <br>p = <span class="hljs-number">724011645798721468405549293573288113</span>   <br>q = <span class="hljs-number">712853480230590736297703668944546433</span><br>n = p*q<br>g = (p**<span class="hljs-number">4</span>-p**<span class="hljs-number">3</span>)*(p**<span class="hljs-number">4</span>-p**<span class="hljs-number">2</span>)*(p**<span class="hljs-number">4</span>-p**<span class="hljs-number">1</span>)*(p**<span class="hljs-number">4</span>-p**<span class="hljs-number">0</span>)*(q**<span class="hljs-number">4</span>-q**<span class="hljs-number">3</span>)*(q**<span class="hljs-number">4</span>-q**<span class="hljs-number">2</span>)*(q**<span class="hljs-number">4</span>-q**<span class="hljs-number">1</span>)*(q**<span class="hljs-number">4</span>-q**<span class="hljs-number">0</span>)<br>e = <span class="hljs-number">65537</span><br>C = matrix(Zmod(n),[(<span class="hljs-number">354904294318305224658454053059339790915904962123902870614765704810196137</span>, <span class="hljs-number">307912599668649689143528844269686459695648563337814923172488152872006235</span>, <span class="hljs-number">143644686443811064172873392982322248654471792394264352463341325181752577</span>, <span class="hljs-number">22995887787365556743279529792687264972121816670422146768160153217903088</span>), (<span class="hljs-number">111349308911096779758451570594323566987628804920420784718347230085486245</span>, <span class="hljs-number">370237591900013263581099395076767089468466012835217658851568690263421449</span>, <span class="hljs-number">305451886364184428434479088589515273362629589399867618474106045683764897</span>, <span class="hljs-number">454103583344277343974714791669312753685583930212748198341578178464249150</span>), (<span class="hljs-number">168497521640129742759262423369385500102664740971338844248603058993335309</span>, <span class="hljs-number">228941893018899960301839898935872289351667488000643221589230804176281482</span>, <span class="hljs-number">340080333594340128998141220817079770261711483018587969623825086357581002</span>, <span class="hljs-number">122922413789905368029659916865893297311475500951645918611759627764993518</span>), (<span class="hljs-number">10332477229415731242316540110058798318207430965033579181240340751539101</span>, <span class="hljs-number">238172263316130590821973648893483382211906906298557131324791759298887701</span>, <span class="hljs-number">487586702165464601760230182019344052665496627253691596871783460314632260</span>, <span class="hljs-number">12238020921585443139790088280608644406695242899000592355653073240122626</span>)])<br>d = inverse(e,g)<br>d = <span class="hljs-number">15806680399060040009171608494332099667965006023942006329657487966102814020501150626456330792092735181642854019923412956550558461511110849070057544453882301197493754015490022851296284106084292204295419261456548149423971590556163580977467946513801615095458650037385920557261615384147910422121891906859461789777038575978079268706617458449842440351702697878312214115895493219789213974070133199990032711111946768810238677188046605517065798529773350946255574484638407509093796816629417602243665229729108700158716856339436735611298303663582457643176512488963323309766763370951413816945684392634117393908290319600488918482609717880323953515055614313785562108982443259294382253163129242583007424347870378389813783669881928124540182530004668864441308729592168389209532725647271795361596209794862867559523707635949566323319684562218806662628181503607385115688062392613583947989473289809411708203763210363893203891591740032480349022914040165941787704028766910936271163414231295023222145669843287241929127170124310248619150568501281544689249544922319657010702729267333417500949022807756995680723292213596492497010974558361252426023956242905073293531404889423873</span><br><br><span class="hljs-keyword">assert</span>(C.determinant()%n!=<span class="hljs-number">0</span>)<br>X = ((matrixproduce(C,decimal_to_base(d,n),n)))<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(X[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]))+long_to_bytes(<span class="hljs-built_in">int</span>(X[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]))+long_to_bytes(<span class="hljs-built_in">int</span>(X[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>])))<br><br></code></pre></td></tr></table></figure><h3 id="EzDES"><a href="#EzDES" class="headerlink" title="EzDES"></a>EzDES</h3><p>懒得喷 做得最久的一题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> DES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag,key<br><br>key = <span class="hljs-built_in">bytes</span>.fromhex(key)<br>des = DES.new(key, DES.MODE_ECB)<br><br>enc = des.encrypt(pad(flag,<span class="hljs-number">64</span>))<br><br><span class="hljs-built_in">print</span>(enc)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">b&#x27;t\xe4f\x19\xc6\xef\xaaL\xc3R&#125;\x08;K\xc9\x88\xa6|\nF\xc3\x12h\xcd\xd3x\xc3(\x91\x08\x841\xca\x8b\xc1\x94\xb5\x9f[\xcd\xc6\x9f\xf9\xf6\xca\xf5\x1a\xda\x16\xcf\x89\x154\xa1\xfe\xc5\x16\xcf\x89\x154\xa1\xfe\xc5&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> DES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br>keys = [<br><span class="hljs-string">&#x27;0101010101010101&#x27;</span>,<br><span class="hljs-string">&#x27;FEFEFEFEFEFEFEFE&#x27;</span>,<br><span class="hljs-string">&#x27;E0E0E0E0F1F1F1F1&#x27;</span>,<br><span class="hljs-string">&#x27;1F1F1F1F0E0E0E0E&#x27;</span>,<br><span class="hljs-string">&#x27;0000000000000000&#x27;</span>,<br><span class="hljs-string">&#x27;FFFFFFFFFFFFFFFF&#x27;</span>,<br><span class="hljs-string">&#x27;E1E1E1E1F0F0F0F0&#x27;</span>,<br><span class="hljs-string">&#x27;1E1E1E1E0F0F0F0F&#x27;</span>]<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> DES<br>enc = <span class="hljs-string">b&#x27;t\xe4f\x19\xc6\xef\xaaL\xc3R&#125;\x08;K\xc9\x88\xa6|\nF\xc3\x12h\xcd\xd3x\xc3(\x91\x08\x841\xca\x8b\xc1\x94\xb5\x9f[\xcd\xc6\x9f\xf9\xf6\xca\xf5\x1a\xda\x16\xcf\x89\x154\xa1\xfe\xc5\x16\xcf\x89\x154\xa1\xfe\xc5&#x27;</span><br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> keys:<br>    key = <span class="hljs-built_in">bytes</span>.fromhex(key)<br>    cipher = DES.new(key, DES.MODE_ECB)<br>    <span class="hljs-built_in">print</span>(cipher.encrypt(enc))<br></code></pre></td></tr></table></figure><h3 id="MidRSA"><a href="#MidRSA" class="headerlink" title="MidRSA"></a>MidRSA</h3><p>非常简单的推导，新生赛题吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> gmpy2<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_Key1</span>(<span class="hljs-params">ebits</span>):<br>    e = [getPrime(ebits) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br>    <span class="hljs-keyword">return</span> e<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt1</span>(<span class="hljs-params">message,e</span>):<br>    n = gmpy2.next_prime(bytes_to_long(message) &lt;&lt; <span class="hljs-number">300</span>)<br>    m = getPrime(<span class="hljs-number">256</span>)<br>    c = [<span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(m,e[i],n)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(e))]<br>    <span class="hljs-keyword">return</span> c<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_Key2</span>(<span class="hljs-params">nbits</span>):<br>    p = getPrime(nbits // <span class="hljs-number">2</span>)<br>    q = getPrime(nbits // <span class="hljs-number">2</span>)<br>    n = p*q<br>    e = [random.getrandbits(nbits // <span class="hljs-number">4</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>    <span class="hljs-keyword">return</span> n,e<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt2</span>(<span class="hljs-params">message,e,n</span>):<br>    m = bytes_to_long(message)<br>    c = [<span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(m,e[i],n)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(e))]<br>    <span class="hljs-keyword">return</span> c<br>    <br><span class="hljs-keyword">assert</span> flag.startswith(<span class="hljs-string">b&quot;DRKCTF&#123;&quot;</span>)<br><br>flag1 = flag[:<span class="hljs-built_in">len</span>(flag)//<span class="hljs-number">2</span>]<br>flag2 = flag[<span class="hljs-built_in">len</span>(flag)//<span class="hljs-number">2</span>:]<br><br>ebits = <span class="hljs-number">7</span><br>e1 = generate_Key1(ebits)<br>cipher1 = encrypt1(flag1,e1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e1 =&quot;</span>,e1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;cipher1 =&quot;</span>,cipher1)<br><br>nbits = <span class="hljs-number">1024</span><br>n,e2 = generate_Key2(nbits)<br>cipher2 = encrypt2(flag2,e2,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e2 =&quot;</span>,e2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;cipher2 =&quot;</span>,cipher2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n =&quot;</span>,n)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">e1 = [109, 71, 109, 73]</span><br><span class="hljs-string">cipher1 = [36272047346364825234770733058042613197790911431212158822254782055957208837848605160852567043492625692783344073921185227328379941291979083011033, 13421582077901767047291741873622169312010984740586925881415103229648835151589774736786336965745532072099996467445790339749720696886313635920080, 36272047346364825234770733058042613197790911431212158822254782055957208837848605160852567043492625692783344073921185227328379941291979083011033, 41425183140413487232780768389488969603566343428250573532166425276868000949579663990819005141199597640625439816343697426958648927294289659127871]</span><br><span class="hljs-string">e2 = [79572758141493570128961125255246129069540961757778793209698370333142346488381, 80555585862127636800866563977080055603517001358195529410497461746213789997225, 44651921320695090688745333790065512192118202496468714141526113242887125432380]</span><br><span class="hljs-string">cipher2 = [58600444300331800249882073146233995912287198739549440714207984476331259754331716531491187240053630185776787152600165426285021284302994699108557023545574315706006132536588848833818758624067461985444940651823107522770906474037882323326792755635934081822967331031854184791299228513024491344725765476710816941057, 16511944800191885973496391252612222059697387587833308714567450121364756390806094606646424594583975159634952911600665271092389815248477961923357683297311169260578508157717777465241680062644118354471550223231057620392252324514411927096940875466794869671163453991620492008856178108060167556176019729800517994337, 80885008609388989196377721090246742575908473911131498982960117640742106565184297197238656375198284856442596226398287448931285735903463892735111244609358611618958293002176923706195402338331128766464276441210238388187625107435781170368017908610916585774514676482124401329575553658828115269495158818527164441546]</span><br><span class="hljs-string">n = 93468142044831350317940409833603031534515663349871776634867176846669780024082517910566484997161088199091160371537367121403194814422867749777235397168852158723228851090445429617275680206703935781244466363279841409768649097588586494453125840436600639420286950914680651600232197982546122764845043227394567787283</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>我们知道$c_i\equiv m^{e_i}\quad\mathrm{mod~}n$</p><p>取两个不同的$c_i^{e_j}\equiv c_j^{e_i}\mod n$</p><p>$c_i^{e_j}-c_j^{e_i}&#x3D;kn$</p><p>所以取两个ij gcd完就是n</p><p>得到n之后右移300位就是flag</p><p>根据裴蜀定理，一定存在$xe_1+ye_2&#x3D;gcd(e_1,e_2)$</p><p>所以$$c_{1}^{x}\times c_{2}^{y}\equiv m^{e_{1}x+e_{2}y}\equiv m^{gcd(e_1,e_2)}\mod n$$</p><p>但是gcd(e1,e2) !&#x3D; 1</p><p>所以理论上还要再来一次，但是不知道为什么这里直接通了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> DES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>e1 = [<span class="hljs-number">109</span>, <span class="hljs-number">71</span>, <span class="hljs-number">109</span>, <span class="hljs-number">73</span>]<br>cipher1 = [<span class="hljs-number">36272047346364825234770733058042613197790911431212158822254782055957208837848605160852567043492625692783344073921185227328379941291979083011033</span>, <span class="hljs-number">13421582077901767047291741873622169312010984740586925881415103229648835151589774736786336965745532072099996467445790339749720696886313635920080</span>, <span class="hljs-number">36272047346364825234770733058042613197790911431212158822254782055957208837848605160852567043492625692783344073921185227328379941291979083011033</span>, <span class="hljs-number">41425183140413487232780768389488969603566343428250573532166425276868000949579663990819005141199597640625439816343697426958648927294289659127871</span>]<br>e2 = [<span class="hljs-number">79572758141493570128961125255246129069540961757778793209698370333142346488381</span>, <span class="hljs-number">80555585862127636800866563977080055603517001358195529410497461746213789997225</span>, <span class="hljs-number">44651921320695090688745333790065512192118202496468714141526113242887125432380</span>]<br>cipher2 = [<span class="hljs-number">58600444300331800249882073146233995912287198739549440714207984476331259754331716531491187240053630185776787152600165426285021284302994699108557023545574315706006132536588848833818758624067461985444940651823107522770906474037882323326792755635934081822967331031854184791299228513024491344725765476710816941057</span>, <span class="hljs-number">16511944800191885973496391252612222059697387587833308714567450121364756390806094606646424594583975159634952911600665271092389815248477961923357683297311169260578508157717777465241680062644118354471550223231057620392252324514411927096940875466794869671163453991620492008856178108060167556176019729800517994337</span>, <span class="hljs-number">80885008609388989196377721090246742575908473911131498982960117640742106565184297197238656375198284856442596226398287448931285735903463892735111244609358611618958293002176923706195402338331128766464276441210238388187625107435781170368017908610916585774514676482124401329575553658828115269495158818527164441546</span>]<br>n = <span class="hljs-number">93468142044831350317940409833603031534515663349871776634867176846669780024082517910566484997161088199091160371537367121403194814422867749777235397168852158723228851090445429617275680206703935781244466363279841409768649097588586494453125840436600639420286950914680651600232197982546122764845043227394567787283</span><br><br><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br>n1 = math.gcd((cipher1[<span class="hljs-number">3</span>]**<span class="hljs-number">71</span>-cipher1[<span class="hljs-number">1</span>]**<span class="hljs-number">73</span>),cipher1[<span class="hljs-number">0</span>]**<span class="hljs-number">71</span>-cipher1[<span class="hljs-number">1</span>]**<span class="hljs-number">109</span>)<br><span class="hljs-built_in">print</span>(n1&gt;&gt;<span class="hljs-number">300</span>)<br><span class="hljs-built_in">print</span>(long_to_bytes(n1&gt;&gt;<span class="hljs-number">300</span>))<br><span class="hljs-comment">#b&#x27;DRKCTF&#123;5d0b96e8-e069-4&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rsa_gong_N_def</span>(<span class="hljs-params">e1,e2,c1,c2,n</span>):<br>    e1, e2, c1, c2, n=<span class="hljs-built_in">int</span>(e1),<span class="hljs-built_in">int</span>(e2),<span class="hljs-built_in">int</span>(c1),<span class="hljs-built_in">int</span>(c2),<span class="hljs-built_in">int</span>(n)<br>    s = gmpy2.gcdext(e1, e2)<br>    s1 = s[<span class="hljs-number">1</span>]<br>    s2 = s[<span class="hljs-number">2</span>]<br>    m = (<span class="hljs-built_in">pow</span>(c1,s1,n) * <span class="hljs-built_in">pow</span>(c2 ,s2 ,n)) % n<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(m)<br><br>x = (math.gcd(rsa_gong_N_def(e2[<span class="hljs-number">0</span>],e2[<span class="hljs-number">1</span>],cipher2[<span class="hljs-number">0</span>],cipher2[<span class="hljs-number">1</span>],n),rsa_gong_N_def(e2[<span class="hljs-number">1</span>],e2[<span class="hljs-number">2</span>],cipher2[<span class="hljs-number">1</span>],cipher2[<span class="hljs-number">2</span>],n)))<br><span class="hljs-built_in">print</span>(long_to_bytes(rsa_gong_N_def(e2[<span class="hljs-number">0</span>],e2[<span class="hljs-number">1</span>],cipher2[<span class="hljs-number">0</span>],cipher2[<span class="hljs-number">1</span>],n)))<br><span class="hljs-comment">#b&#x27;378-82e7-120e4b761a0b&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="Myencrypt"><a href="#Myencrypt" class="headerlink" title="Myencrypt"></a><strong>Myencrypt</strong></h3><p>简单格密码 hgameweek4的水平</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag      <br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getMyPrime</span>():              <br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:              <br>        r = random.getrandbits(<span class="hljs-number">64</span>)              <br>        _p = r**<span class="hljs-number">6</span> -<span class="hljs-number">3</span>*r**<span class="hljs-number">5</span> - r**<span class="hljs-number">4</span> + r**<span class="hljs-number">2</span> - r - <span class="hljs-number">6</span><br>        _q = r**<span class="hljs-number">7</span> + <span class="hljs-number">2</span>*r**<span class="hljs-number">6</span> + r**<span class="hljs-number">5</span> + <span class="hljs-number">4</span>*r**<span class="hljs-number">4</span> + <span class="hljs-number">7</span>*r**<span class="hljs-number">2</span> + r + <span class="hljs-number">4653</span><br>        <span class="hljs-keyword">if</span> isPrime(_p) <span class="hljs-keyword">and</span> isPrime(_q):              <br>            <span class="hljs-keyword">return</span> _p, _q<br>                      <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">enc</span>(<span class="hljs-params">m, n</span>):                        <br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(m, <span class="hljs-number">65537</span>, n)              <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">LCG</span>(<span class="hljs-params">s,a,b,n</span>):<br>    <span class="hljs-keyword">return</span> (a*s + b) % n<br><br><br>seed = bytes_to_long(flag)<br>P = getPrime(<span class="hljs-number">512</span>)<br>a = random.randrange(<span class="hljs-number">0</span>,P)<br>b = random.randrange(<span class="hljs-number">0</span>,P)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Roll</span>():<br>    <span class="hljs-keyword">global</span> seed<br>    seed = LCG(seed,a,b,P)<br>    <span class="hljs-keyword">return</span> seed % <span class="hljs-number">2</span>**<span class="hljs-number">16</span><br><br>p, q = getMyPrime()<br>n = p * q              <br>enc_P = enc(P, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n = <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)              <br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;enc_P = <span class="hljs-subst">&#123;enc_P&#125;</span>&quot;</span>)<br><br>out = []<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>):<br>    out.append(Roll())<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;a = <span class="hljs-subst">&#123;a&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;b = <span class="hljs-subst">&#123;b&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;out = <span class="hljs-subst">&#123;out&#125;</span>&quot;</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">n = 17959692613208124553115435318871530105762927141420294800783695207170608966804977782615874404539156257549097962410144332053383210075663138848832474791712256427111304125146378883542387121684653496644116081809328796925343393644118376497507</span><br><span class="hljs-string">enc_P = 17215745298239635988196009014709535403293865406390546681749129213899045156482782458937447412919331336842808052179915132663427715069134196783415529688715962754860563850858056507148936427379551986735103284388996678146580229028006898491552</span><br><span class="hljs-string">a = 2759277675743644814124420138047586760905070650864591936190199977578763421196999718749092450720072564786874114432179104175692800471519816376692104515142375</span><br><span class="hljs-string">b = 8111240578821759579875175166986910195923820191652867334412871591814076020421468033017946066268237980082938735686222173713853299600396887041341974719819186</span><br><span class="hljs-string">out = [39566, 15295, 19818, 55685, 49100, 6517, 2675, 9567, 37243, 40312, 42906, 35874, 44178, 1256, 40298, 29149, 35721, 19886, 63020, 50116, 6844, 39897, 16134, 50218, 44609, 46188, 52712, 49903, 20933, 5441, 19411, 8330, 6904, 39350, 60853, 43446, 35910, 43728, 61533, 13757]</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>我们发现n可以直接写成r的式子</p><p>$$n&#x3D;r^{13}-r^{12}-6r^{11}-r^{10}-12r^9+4r^8-27r^7+4634r^6-13970r^5-4670r^4-6r^3+4610r^2-4659r-27918$$</p><p>直接用sagemath的解方程得r</p><p>得P</p><p>然后这个格</p><p>已知低位</p><p>$$H_{n+1}*2^{16}+L_{n+1}\equiv a(H_{n}*2^{16}+L_{n})+b\mod p$$</p><p>$$H &#x3D; 2^{16}$$</p><p>$$H_{n+1}*H+L_{n+1}\equiv a(H_{n}*H+L_{n})+b\mod p$$</p><p>$$H_{n+1}\equiv aH_n+(aL_n+b-L_{n+1})*H^{-1}\mod p$$</p><p>$$H_{2}\equiv aH_1+(aL_1+b-L_2)*H^{-1}\mod p$$</p><p>$$H_{3}\equiv aH_2+(aL_2+b-L_3)*H^{-1}\mod p$$</p><p>可以化简</p><p>$$A_{n} &#x3D; a^{n}$$</p><p>$$B_{n} &#x3D; a*B_{n-1}+(aL_{n-1}+b-L_n)*H^{-1}$$</p><p>直接构造 （其实跟那个HNP完全是一个思路 只是多了一个高位而已 由此看来 DKRCTF&lt;Hgameweek3（确信<br>$$<br>\begin{pmatrix}<br>P &amp;0 &amp;\ldots &amp;0 &amp;0 &amp;0\\<br>0 &amp;P &amp;\ldots &amp;0 &amp;0 &amp;0\\<br>\vdots&amp;\vdots&amp;\ddots&amp;\vdots&amp;\vdots&amp;\vdots\\<br>0&amp;0&amp;\ldots&amp;P&amp;0&amp;0\\<br>A_1&amp;A_2&amp;\ldots&amp;A_n&amp;1&amp;0\\<br>B_1&amp;B_2&amp;\ldots&amp;B_n&amp;0&amp;\frac{P}{2^{n}}\\<br>\end{pmatrix}<br>$$<br>也就轻松拿下H1</p><p>也就拿下seed了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>PR.&lt;r&gt; = PolynomialRing(RealField(<span class="hljs-number">1000</span>))<br>n = <span class="hljs-number">17959692613208124553115435318871530105762927141420294800783695207170608966804977782615874404539156257549097962410144332053383210075663138848832474791712256427111304125146378883542387121684653496644116081809328796925343393644118376497507</span><br>f = (r**<span class="hljs-number">6</span> -<span class="hljs-number">3</span>*r**<span class="hljs-number">5</span> - r**<span class="hljs-number">4</span> + r**<span class="hljs-number">2</span> - r - <span class="hljs-number">6</span>)*(r**<span class="hljs-number">7</span> + <span class="hljs-number">2</span>*r**<span class="hljs-number">6</span> + r**<span class="hljs-number">5</span> + <span class="hljs-number">4</span>*r**<span class="hljs-number">4</span> + <span class="hljs-number">7</span>*r**<span class="hljs-number">2</span> + r + <span class="hljs-number">4653</span>)-n<br>r = (<span class="hljs-built_in">int</span>(f.roots()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]))<br>p = r**<span class="hljs-number">6</span> -<span class="hljs-number">3</span>*r**<span class="hljs-number">5</span> - r**<span class="hljs-number">4</span> + r**<span class="hljs-number">2</span> - r - <span class="hljs-number">6</span><br>q = r**<span class="hljs-number">7</span> + <span class="hljs-number">2</span>*r**<span class="hljs-number">6</span> + r**<span class="hljs-number">5</span> + <span class="hljs-number">4</span>*r**<span class="hljs-number">4</span> + <span class="hljs-number">7</span>*r**<span class="hljs-number">2</span> + r + <span class="hljs-number">4653</span><br>enc_P = <span class="hljs-number">17215745298239635988196009014709535403293865406390546681749129213899045156482782458937447412919331336842808052179915132663427715069134196783415529688715962754860563850858056507148936427379551986735103284388996678146580229028006898491552</span><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>e = <span class="hljs-number">65537</span><br>d = inverse(e,phi)<br>P = <span class="hljs-built_in">pow</span>(enc_P,d,n)<br>a = <span class="hljs-number">2759277675743644814124420138047586760905070650864591936190199977578763421196999718749092450720072564786874114432179104175692800471519816376692104515142375</span><br>b = <span class="hljs-number">8111240578821759579875175166986910195923820191652867334412871591814076020421468033017946066268237980082938735686222173713853299600396887041341974719819186</span><br>out = [<span class="hljs-number">0</span>,<span class="hljs-number">39566</span>, <span class="hljs-number">15295</span>, <span class="hljs-number">19818</span>, <span class="hljs-number">55685</span>, <span class="hljs-number">49100</span>, <span class="hljs-number">6517</span>, <span class="hljs-number">2675</span>, <span class="hljs-number">9567</span>, <span class="hljs-number">37243</span>, <span class="hljs-number">40312</span>, <span class="hljs-number">42906</span>, <span class="hljs-number">35874</span>, <span class="hljs-number">44178</span>, <span class="hljs-number">1256</span>, <span class="hljs-number">40298</span>, <span class="hljs-number">29149</span>, <span class="hljs-number">35721</span>, <span class="hljs-number">19886</span>, <span class="hljs-number">63020</span>, <span class="hljs-number">50116</span>, <span class="hljs-number">6844</span>, <span class="hljs-number">39897</span>, <span class="hljs-number">16134</span>, <span class="hljs-number">50218</span>, <span class="hljs-number">44609</span>, <span class="hljs-number">46188</span>, <span class="hljs-number">52712</span>, <span class="hljs-number">49903</span>, <span class="hljs-number">20933</span>, <span class="hljs-number">5441</span>, <span class="hljs-number">19411</span>, <span class="hljs-number">8330</span>, <span class="hljs-number">6904</span>, <span class="hljs-number">39350</span>, <span class="hljs-number">60853</span>, <span class="hljs-number">43446</span>, <span class="hljs-number">35910</span>, <span class="hljs-number">43728</span>, <span class="hljs-number">61533</span>, <span class="hljs-number">13757</span>]<br>H = <span class="hljs-number">2</span>**<span class="hljs-number">16</span><br>A = [<span class="hljs-number">1</span>]<br>B = [<span class="hljs-number">0</span>]<br>Hfu = inverse(H,P)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(out)-<span class="hljs-number">1</span>):<br>    A.append(<span class="hljs-built_in">pow</span>(a*A[i-<span class="hljs-number">1</span>] ,<span class="hljs-number">1</span>,P))<br>    B.append(<span class="hljs-built_in">pow</span>((a*B[i-<span class="hljs-number">1</span>]+Hfu*(a*out[i]+b-out[i+<span class="hljs-number">1</span>])),<span class="hljs-number">1</span> , P))<br><span class="hljs-built_in">print</span>(A[<span class="hljs-number">1</span>:])<br><span class="hljs-built_in">print</span>(B[<span class="hljs-number">1</span>:])<br>M = matrix(ZZ,<span class="hljs-number">41</span>,<span class="hljs-number">41</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">39</span>):<br>    M[i, i] = P<br>    M[<span class="hljs-number">39</span>, i] = A[i]<br>    M[<span class="hljs-number">40</span>, i] = B[i]<br>    M[i, <span class="hljs-number">39</span>] = M[i, <span class="hljs-number">40</span>] = <span class="hljs-number">0</span><br>M[<span class="hljs-number">39</span>, <span class="hljs-number">39</span>] =  <span class="hljs-number">1</span><br>M[<span class="hljs-number">40</span>, <span class="hljs-number">40</span>] = <span class="hljs-number">2</span>^<span class="hljs-number">500</span><br>M[<span class="hljs-number">39</span>, <span class="hljs-number">40</span>]= <span class="hljs-number">0</span><br>vl = M.LLL()<br><span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> vl:<br>        <span class="hljs-keyword">if</span> l[-<span class="hljs-number">1</span>] == <span class="hljs-number">2</span>^<span class="hljs-number">500</span>:<br>               vl = l<br><span class="hljs-built_in">print</span>(vl)<br>h1 = vl[-<span class="hljs-number">2</span>]<br>l1 = out[<span class="hljs-number">1</span>]<br>s1 = h1*<span class="hljs-number">2</span>**<span class="hljs-number">16</span>+l1<br>seed = ((s1 - b)*inverse(a,P))%P<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(seed)))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
      <tag>Web</tag>
      
      <tag>Misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-VCTF-wp-crypto</title>
    <link href="/2024/03/21/2024-VCTF-wp-crypto/"/>
    <url>/2024/03/21/2024-VCTF-wp-crypto/</url>
    
    <content type="html"><![CDATA[<h1 id="2024-VCTF-wp-crypto"><a href="#2024-VCTF-wp-crypto" class="headerlink" title="2024-VCTF-wp-crypto"></a>2024-VCTF-wp-crypto</h1><h3 id="狂飙"><a href="#狂飙" class="headerlink" title="狂飙"></a>狂飙</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br>m = <span class="hljs-number">88007513702424243702066490849596817304827839547007641526433597788800212065249</span><br>key = os.urandom(<span class="hljs-number">24</span>)<br>key = bytes_to_long(key)<br>n=m % key<br>flag += (<span class="hljs-number">16</span> - <span class="hljs-built_in">len</span>(flag) % <span class="hljs-number">16</span>) * <span class="hljs-string">b&#x27;\x00&#x27;</span><br>iv = os.urandom(<span class="hljs-number">16</span>)<br>aes = AES.new(key,AES.MODE_CBC,iv)<br>enc_flag = aes.encrypt(flag)<br><br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-built_in">print</span>(enc_flag)<br><span class="hljs-built_in">print</span>(iv)<br><br><br><span class="hljs-comment">#103560843006078708944833658339172896192389513625588</span><br><span class="hljs-comment">#b&#x27;\xfc\x87\xcb\x8e\x9d\x1a\x17\x86\xd9~\x16)\xbfU\x98D\xfe\x8f\xde\x9c\xb0\xd1\x9e\xe7\xa7\xefiY\x95C\x14\x13C@j1\x9d\x08\xd9\xe7W&gt;F2\x96cm\xeb&#x27;</span><br><span class="hljs-comment">#b&#x27;UN\x1d\xe2r&lt;\x1db\x00\xdb\x9a\x84\x1e\x82\xf0\x86&#x27;</span><br></code></pre></td></tr></table></figure><p>很简单一题 m-n然后分解因数 找24字节的因数就行</p><p>直接给脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br>n = <span class="hljs-number">103560843006078708944833658339172896192389513625588</span><br>m = <span class="hljs-number">88007513702424243702066490849596817304827839547007641526433597788800212065249</span><br><span class="hljs-built_in">print</span>(m-n)<br>P1 = <span class="hljs-number">3</span><br>P2 = <span class="hljs-number">37</span><br>P3 = <span class="hljs-number">439</span><br>P7 = <span class="hljs-number">3939851</span><br>P13 = <span class="hljs-number">5036645362649</span><br>P12 = <span class="hljs-number">265898280367</span><br>P42 = <span class="hljs-number">342291058100503482469327892079792475478873</span><br>key = long_to_bytes(P42*P12*P3*P2)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(key))<br>iv = <span class="hljs-string">b&#x27;UN\x1d\xe2r&lt;\x1db\x00\xdb\x9a\x84\x1e\x82\xf0\x86&#x27;</span><br>enc_flag = <span class="hljs-string">b&#x27;\xfc\x87\xcb\x8e\x9d\x1a\x17\x86\xd9~\x16)\xbfU\x98D\xfe\x8f\xde\x9c\xb0\xd1\x9e\xe7\xa7\xefiY\x95C\x14\x13C@j1\x9d\x08\xd9\xe7W&gt;F2\x96cm\xeb&#x27;</span><br>aes = AES.new(key,AES.MODE_CBC,iv)<br>flag = aes.decrypt(enc_flag)<br><span class="hljs-built_in">print</span>(flag)<br><br></code></pre></td></tr></table></figure><h3 id="RRSA"><a href="#RRSA" class="headerlink" title="RRSA"></a>RRSA</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">genprime</span>():<br>o = getPrime(<span class="hljs-number">300</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>r = random.randint(<span class="hljs-number">2</span>**<span class="hljs-number">211</span>,<span class="hljs-number">2</span>**<span class="hljs-number">212</span>)<br><span class="hljs-keyword">if</span> isPrime(o*r+<span class="hljs-number">1</span>):<br><span class="hljs-keyword">return</span> o,o*r+<span class="hljs-number">1</span><br>o1,p = genprime()<br>o2,q = genprime()<br>n=p*q<br>g = random.randint(<span class="hljs-number">2</span>,n)<br>order = o1*o2<br><br>a = <span class="hljs-built_in">pow</span>(g, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)//order, n)<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">pow</span>(a,order,n)==<span class="hljs-number">1</span><br><br>m = bytes_to_long(flag)<br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n=<span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c=<span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;a=<span class="hljs-subst">&#123;a&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;o=<span class="hljs-subst">&#123;order&#125;</span>&#x27;</span>)<br>n=<span class="hljs-number">44435425447782114838897637647733409614831121089064725526413247701631122523646623518523253532066782191116739274354991533158902831935676078270115998050827358178237970133151467497051097694866238654012042884894924846645692294679774577780414805605811029994570132760841672754334836945991390844881416693502552870759</span><br>c=<span class="hljs-number">41355409695119524180275572228024314281790321005050664347253778436753663918879919757571129194249071204946415158483084730406579433518426895158142068246063333111438863836668823874266012696265984976829088976346775293102571794377818611709336242495598331872036489022428750111592728015245733975923531682859930386731</span><br>a=<span class="hljs-number">39844923600973712577104437232871220768052114284995840460375902596405104689968610170336151307934820030811039502338683925817667771016288030594299464019664781911131177394369348831163266849069740191783143327911986419528382896919157135487360024877230254274474109707112110411601273850406237677432935818199348150470</span><br>o=<span class="hljs-number">1745108106200960949680880500144134006212310627077303652648249235148621661187609612344828833696608872318217367008018829485062303972702933973340909520462917612611270028511222134076453</span><br><br></code></pre></td></tr></table></figure><p>乍一想还挺复杂，再认真想想其实非常简单（估计是出题人搞错了）</p><p>$p &#x3D; o_{1}*r_{1}+1$</p><p>$q &#x3D; o_{2}*r_{2}+1$</p><p>$n &#x3D; pq &#x3D; o_{1}r_{1}o_{2}r_{2}+o_{1}*r_{1}+o_{2}*r_{2}+1$</p><p>$order &#x3D; o_{1}o_{2}$</p><p>$n&#x2F;order&#x3D; r_{1}r_{2}+r_{1}&#x2F;o_{2}+r_{2}&#x2F;o_{1}+1&#x2F;order$</p><p>如果直接整除 那不就得到$r_{1}r_{2}$了吗？</p><p>得到$r_{1}r_{2}$再乘$order$就是phi了</p><p>上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>n=<span class="hljs-number">44435425447782114838897637647733409614831121089064725526413247701631122523646623518523253532066782191116739274354991533158902831935676078270115998050827358178237970133151467497051097694866238654012042884894924846645692294679774577780414805605811029994570132760841672754334836945991390844881416693502552870759</span><br>c=<span class="hljs-number">41355409695119524180275572228024314281790321005050664347253778436753663918879919757571129194249071204946415158483084730406579433518426895158142068246063333111438863836668823874266012696265984976829088976346775293102571794377818611709336242495598331872036489022428750111592728015245733975923531682859930386731</span><br>a=<span class="hljs-number">39844923600973712577104437232871220768052114284995840460375902596405104689968610170336151307934820030811039502338683925817667771016288030594299464019664781911131177394369348831163266849069740191783143327911986419528382896919157135487360024877230254274474109707112110411601273850406237677432935818199348150470</span><br>o=<span class="hljs-number">1745108106200960949680880500144134006212310627077303652648249235148621661187609612344828833696608872318217367008018829485062303972702933973340909520462917612611270028511222134076453</span><br>phi = n//o*o<br>e = <span class="hljs-number">0x10001</span><br>d = inverse(e,phi)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,n)))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
      <tag>Web</tag>
      
      <tag>Misc</tag>
      
      <tag>Hgame</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我是一坨屎</title>
    <link href="/2024/03/21/%E6%88%91%E6%98%AF%E4%B8%80%E5%9D%A8%E5%B1%8E/"/>
    <url>/2024/03/21/%E6%88%91%E6%98%AF%E4%B8%80%E5%9D%A8%E5%B1%8E/</url>
    
    <content type="html"><![CDATA[<h1 id="我是一坨屎"><a href="#我是一坨屎" class="headerlink" title="我是一坨屎"></a>我是一坨屎</h1><p>转自：<a href="https://aidaip.github.io/life/2024/01/18/%E6%88%91%E6%98%AF%E4%B8%80%E5%9D%A8%E5%B1%8E.html">AiDai|我是一坨屎 (aidaip.github.io)</a></p><p>孔子曾经说过，知道就是知道，不知道就是不知道，这才是真正的智慧。唉！孔子的话是没有意义的，知道与不知道的关系，难道只有这两种情况吗?这样狭隘的论述，不可以成为普遍的道理。我听说知道的就是知道，不知道的也是知道，这才是真正的圣人，即使他什么都不知道，他也是什么都知道。普通的人与圣人相比，知道的东西如同圣人脚下的一粒尘土，不知道的东西如同天上的星斗，当他面对圣人时，如果他知道的圣人也知道，那么他就是贤能的人，如果他知道的圣人不知道，那么他就是粗野卑贱的人，粗野卑贱的人如果能做到知道也是不知道，他就有可能成为贤能的人。</p><p>唉！我是粗野卑贱的人，什么都不知道，却总认为自己什么都知道，我曾愚蠢的认为粗野卑贱的人可以成为贤能的人，贤能的人可以成为圣人，如果贤能的人在成为圣人的过程中去世了，那么就不存在圣人，如果粗野卑贱的人在成为贤能的人的过程中去世了，那么就不存在贤能的人与圣人，如果所有人都是妈妈生的，在粗野卑贱的人出生之前他的妈妈去世了，那么粗野卑贱的人、贤能的人、圣人就都不存在了。圣人不把指点粗野卑贱的人当作耻辱，他的言辞态度非常委婉，给我耐心讲述圣人的道理：圣人总是会成为圣人，即使他在成为圣人之前去世了，他也可以成为圣人；即使他的妈妈在他出生前去世了，他也可以成为圣人。而我竟然和圣人讨论人是否是妈妈生的道理，唉！真是愚蠢啊！知道是知道还是不知道，是圣人决定的。圣人什么都知道，如果知道的与圣人相同，那么知道的就是知道，如果知道的与圣人不同，那么一定是自己不知道。</p><p>圣人指导粗野卑贱的人，就像干旱了很久的土地遇到了一场大雨，这难道不应该是粗野卑贱的人一生追寻的恩赐吗？粗野卑贱的人听着圣人的教导，就像坐在春风中间，春风刮过，知识如同鲜花一般绽放，圣人就像在鲜花翠柏丛中讲述着圣人的道理。当圣人发现粗野卑贱的人知道的自己不知道而自己不知道的也是知道，并纠正粗野卑贱的人的错误时，粗野卑贱的人如果固执地认为自己知道就是知道，那么他就永远是粗野卑贱的人，如果他能把自己的知道改正为圣人不知道的知道，那么他就有可能成为贤能的人，如果他能够表情更为恭敬，礼数更为周到，那么他距离贤能的人就越来越近了。先给圣人三鞠躬，怀着崇高的敬意，严肃而恭敬地看着圣人，再给圣人行跪拜礼，并且红着脸，汗水流到脚跟，颤抖地说：您说的太对了。如果能做到这样礼数，那么就可以说是恭敬的。</p><p>粗野卑贱的人活着是没有意义的，他做的事也都是没有意义的，如果他能够沿着圣人的方向做事，那么他的人生就可能会有一些微小的意义，如果他够恭敬地在圣人门下求学，陪侍在圣人左右，那么他就有可能成为贤能的人，如果圣人对粗野卑贱的人说，你做的事情是没有意义的，那么他只能恭敬地三鞠躬然后行跪拜礼，颤抖地说：您说的太对了。如果粗野卑贱的人的礼数有任何的不周到，就已经到了无法挽救的地步，即使圣人的胸怀如同大海一般宽广，难道就是可以接受的吗？</p><p>我听说大海可以容得下成百上千条江河的水，而我这样粗野卑贱的人就像是最肮脏的粪坑里排出的污水，除了屎尿之外没有别的东西，即使是大海也难以容纳。唉！五年以来，我有幸得到了很多圣人的指导，而我却愚蠢而固执地认为粗野卑贱的人活着是有意义的，即使他就像腐烂稻草生出来的萤火虫所散发出的光，也有一些微弱的光亮。直到遇到了世界上第一个圣人，我才终于领悟了圣人的道理，我这样像屎尿一样粗野卑贱的人，只能找一个没有人的荒地，自己挖一个坑把自己埋了，不再去污染圣人的双眼，恭敬地消失。</p><p>唉！屎尿最终的归宿是大地而不是大海，肥料让土地变得肥沃，肥沃的土地上又长出了花草，当初埋自己的坑上是否又长出了桃树和李树？又有谁会在这里走出一条小路？</p>]]></content>
    
    
    
    <tags>
      
      <tag>live</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-Hgame-week4-wp-crypto</title>
    <link href="/2024/03/20/2024-Hgame-week4-wp-crypto/"/>
    <url>/2024/03/20/2024-Hgame-week4-wp-crypto/</url>
    
    <content type="html"><![CDATA[<h1 id="2024-Hgame-week4-wp-crypto"><a href="#2024-Hgame-week4-wp-crypto" class="headerlink" title="2024-Hgame-week4-wp-crypto"></a>2024-Hgame-week4-wp-crypto</h1><p>天璇冬季招新其实挪用了week4的第一道题，的一小部分的一小部分。。。</p><p>那个椭圆曲线不是要转化一下嘛，我就把转化的部分去掉，只留下了求阶和消元的部分，基本上是周赛第二周的水平。</p><p>可惜没人做出来。</p><p>另一道题是强网杯青少年赛的原题（其实也不是原题，我改了变量名字防止了搜索，基本也算是原题吧）也更一下吧，放在另一个博客里。</p><h3 id="transformation"><a href="#transformation" class="headerlink" title="transformation"></a>transformation</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># coding: utf-8</span><br><br><br><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> Curve,gx,gy<br><br><span class="hljs-comment"># flag = &quot;hgame&#123;&quot; + hex(gx+gy)[2:] + &quot;&#125;&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ison</span>(<span class="hljs-params">C, P</span>):<br>    c, d, p = C<br>    u, v = P<br>    <span class="hljs-keyword">return</span> (u**<span class="hljs-number">2</span> + v**<span class="hljs-number">2</span> - c**<span class="hljs-number">2</span> * (<span class="hljs-number">1</span> + d * u**<span class="hljs-number">2</span>*v**<span class="hljs-number">2</span>)) % p == <span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">C, P, Q</span>):<br>    c, d, p = C<br>    u1, v1 = P<br>    u2, v2 = Q<br>    <span class="hljs-keyword">assert</span> ison(C, P) <span class="hljs-keyword">and</span> ison(C, Q)<br>    u3 = (u1 * v2 + v1 * u2) * inverse(c * (<span class="hljs-number">1</span> + d * u1 * u2 * v1 * v2), p) % p<br>    v3 = (v1 * v2 - u1 * u2) * inverse(c * (<span class="hljs-number">1</span> - d * u1 * u2 * v1 * v2), p) % p<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">int</span>(u3), <span class="hljs-built_in">int</span>(v3))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul</span>(<span class="hljs-params">C, P, m</span>):<br>    <span class="hljs-keyword">assert</span> ison(C, P)<br>    c, d, p = C<br>    B = <span class="hljs-built_in">bin</span>(m)[<span class="hljs-number">2</span>:]<br>    l = <span class="hljs-built_in">len</span>(B)<br>    u, v = P<br>    PP = (-u, v)<br>    O = add(C, P, PP)<br>    Q = O<br>    <span class="hljs-keyword">if</span> m == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> O<br>    <span class="hljs-keyword">elif</span> m == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> P<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l-<span class="hljs-number">1</span>):<br>            P = add(C, P, P)<br>        m = m - <span class="hljs-number">2</span>**(l-<span class="hljs-number">1</span>)<br>        Q, P = P, (u, v)<br>        <span class="hljs-keyword">return</span> add(C, Q, mul(C, P, m))<br><br>c, d, p = Curve<br><br>G = (gx, gy)<br>P = (<span class="hljs-number">423323064726997230640834352892499067628999846</span>, <span class="hljs-number">44150133418579337991209313731867512059107422186218072084511769232282794765835</span>)<br>Q = (<span class="hljs-number">1033433758780986378718784935633168786654735170</span>, <span class="hljs-number">2890573833121495534597689071280547153773878148499187840022524010636852499684</span>)<br>S = (<span class="hljs-number">875772166783241503962848015336037891993605823</span>, <span class="hljs-number">51964088188556618695192753554835667051669568193048726314346516461990381874317</span>)<br>T = (<span class="hljs-number">612403241107575741587390996773145537915088133</span>, <span class="hljs-number">64560350111660175566171189050923672010957086249856725096266944042789987443125</span>)<br><span class="hljs-keyword">assert</span> ison(Curve, P) <span class="hljs-keyword">and</span> ison(Curve, Q) <span class="hljs-keyword">and</span> ison(Curve, G)<br>e = <span class="hljs-number">0x10001</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;eG = <span class="hljs-subst">&#123;mul(Curve, G, e)&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># eG = (40198712137747628410430624618331426343875490261805137714686326678112749070113, 65008030741966083441937593781739493959677657609550411222052299176801418887407)</span><br><br></code></pre></td></tr></table></figure><p>一眼丁真椭圆曲线 给了四个点 显然是要消元了。<br>$$<br>\begin{aligned}p_{1}^{2}+p_{2}^{2}-c^{2}(1-dp_{1}^{2}p_{2}^{2})&#x3D;0\text{(mod p)}\end{aligned}<br>$$</p><p>$$<br>\begin{aligned}q_{1}^{2}+q_{2}^{2}-c^{2}(1-dq_{1}^{2}q_{2}^{2})&#x3D;0\text{(mod p)}\end{aligned}<br>$$</p><p>$$<br>\begin{aligned}s_{1}^{2}+s_{2}^{2}-c^{2}(1-ds_{1}^{2}s_{2}^{2})&#x3D;0\text{(mod p)}\end{aligned}<br>$$</p><p>$$<br>\begin{aligned}t_{1}^{2}+t_{2}^{2}-c^{2}(1-dt_{1}^{2}t_{2}^{2})&#x3D;0\text{(mod p)}\end{aligned}<br>$$</p><p> 简单消元<br>$$<br>\begin{aligned}p_{1}^{2}+p_{2}^{2}-q_{1}^{2}-q_{2}^{2}&#x3D;c^{2}d(p_{1}^{2}p_{2}^{2}-q_{1}^{2}q_{2}^{2})\text{(mod p)}\end{aligned}<br>$$</p><p>$$<br>\begin{aligned}s_{1}^{2}+s_{2}^{2}-t_{1}^{2}-t_{2}^{2}&#x3D;c^{2}d(s_{1}^{2}s_{2}^{2}-t_{1}^{2}t_{2}^{2})\text{(mod p)}\end{aligned}<br>$$</p><p>再消元<br>$$<br>\begin{aligned}(p_{1}^{2}+p_{2}^{2}-q_{1}^{2}-q_{2}^{2})(p_{1}^{2}p_{2}^{2}-q_{1}^{2}q_{2}^{2})^{-1}&#x3D;(s_{1}^{2}+s_{2}^{2}-t_{1}^{2}-t_{2}^{2})(s_{1}^{2}s_{2}^{2}-t_{1}^{2}t_{2}^{2})^{-1}\text{(mod p)}\end{aligned}<br>$$<br>移一下<br>$$<br>\begin{aligned}(p_{1}^{2}+p_{2}^{2}-q_{1}^{2}-q_{2}^{2})(s_{1}^{2}s_{2}^{2}-t_{1}^{2}t_{2}^{2})&#x3D;(s_{1}^{2}+s_{2}^{2}-t_{1}^{2}-t_{2}^{2})(p_{1}^{2}p_{2}^{2}-q_{1}^{2}q_{2}^{2})\text{(mod p)}\end{aligned}<br>$$</p><p>$$<br>\begin{aligned}(p_{1}^{2}+p_{2}^{2}-q_{1}^{2}-q_{2}^{2})(s_{1}^{2}s_{2}^{2}-t_{1}^{2}t_{2}^{2})-(s_{1}^{2}+s_{2}^{2}-t_{1}^{2}-t_{2}^{2})(p_{1}^{2}p_{2}^{2}-q_{1}^{2}q_{2}^{2})&#x3D;kp\end{aligned}<br>$$</p><p>到这里已经很明显了 同样构造s和t的式子 求公因数即可</p><p>求出公因数p后再求c和d就很容易了 不多赘述</p><p>然后是转换步骤 这里主要参考了[Rohald (ariana1729.github.io)](<a href="https://ariana1729.github.io/writeups/2021/Crypto">https://ariana1729.github.io/writeups/2021/Crypto</a> CTF&#x2F;Rohald&#x2F;2021-07-31-Rohald.html)</p><p>$u^2+v^2-c^2(1+du^2v^2)&#x3D;0\quad(\mathrm{mod~}p)$</p><p>$u\to\frac{2cx}y,v\to\frac{c(x-1)}{x+1}$</p><p>$\frac{y^2}{c^4d-1}+x^3-\frac{2(c^4d+1)}{c^4d-1}x^2+x&#x3D;0\quad(\mathrm{mod~}p)$</p><p>$x\to\frac x{1-c^4d}+\frac23\frac{c^4d+1}{c^4d-1},y\to\frac y{1-c^4d}$</p><p>$y^2&#x3D;x^3+\frac1{27}\left(-9-126c^4d-9c^8d^2\right)x+\frac1{27}\left(-2+66c^4d+66c^8d^2-2c^{12}d^3\right)$</p><p>一气呵成得到椭圆曲线</p><p>接下来求阶即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ison</span>(<span class="hljs-params">C, P</span>):<br>    c, d, p = C<br>    u, v = P<br>    <span class="hljs-keyword">return</span> (u**<span class="hljs-number">2</span> + v**<span class="hljs-number">2</span> - c**<span class="hljs-number">2</span> * (<span class="hljs-number">1</span> + d * u**<span class="hljs-number">2</span>*v**<span class="hljs-number">2</span>)) % p == <span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">C, P, Q</span>):<br>    c, d, p = C<br>    u1, v1 = P<br>    u2, v2 = Q<br>    <span class="hljs-keyword">assert</span> ison(C, P) <span class="hljs-keyword">and</span> ison(C, Q)<br>    u3 = (u1 * v2 + v1 * u2) * inverse(c * (<span class="hljs-number">1</span> + d * u1 * u2 * v1 * v2), p) % p<br>    v3 = (v1 * v2 - u1 * u2) * inverse(c * (<span class="hljs-number">1</span> - d * u1 * u2 * v1 * v2), p) % p<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">int</span>(u3), <span class="hljs-built_in">int</span>(v3))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul</span>(<span class="hljs-params">C, P, m</span>):<br>    <span class="hljs-keyword">assert</span> ison(C, P)<br>    c, d, p = C<br>    B = <span class="hljs-built_in">bin</span>(m)[<span class="hljs-number">2</span>:]<br>    l = <span class="hljs-built_in">len</span>(B)<br>    u, v = P<br>    PP = (-u, v)<br>    O = add(C, P, PP)<br>    Q = O<br>    <span class="hljs-keyword">if</span> m == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> O<br>    <span class="hljs-keyword">elif</span> m == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> P<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l-<span class="hljs-number">1</span>):<br>            P = add(C, P, P)<br>        m = m - <span class="hljs-number">2</span>**(l-<span class="hljs-number">1</span>)<br>        Q, P = P, (u, v)<br>        <span class="hljs-keyword">return</span> add(C, Q, mul(C, P, m))<br>    <br>P = (<span class="hljs-number">423323064726997230640834352892499067628999846</span>, <span class="hljs-number">44150133418579337991209313731867512059107422186218072084511769232282794765835</span>)<br>Q = (<span class="hljs-number">1033433758780986378718784935633168786654735170</span>, <span class="hljs-number">2890573833121495534597689071280547153773878148499187840022524010636852499684</span>)<br>S = (<span class="hljs-number">875772166783241503962848015336037891993605823</span>, <span class="hljs-number">51964088188556618695192753554835667051669568193048726314346516461990381874317</span>)<br>T = (<span class="hljs-number">612403241107575741587390996773145537915088133</span>, <span class="hljs-number">64560350111660175566171189050923672010957086249856725096266944042789987443125</span>)<br><span class="hljs-comment">#(u**2 + v**2 - c**2 * (1 + d * u**2*v**2)) % p == 0</span><br>t1 = (P[<span class="hljs-number">0</span>]**<span class="hljs-number">2</span>+P[<span class="hljs-number">1</span>]**<span class="hljs-number">2</span>-Q[<span class="hljs-number">0</span>]**<span class="hljs-number">2</span>-Q[<span class="hljs-number">1</span>]**<span class="hljs-number">2</span>)*(S[<span class="hljs-number">0</span>]**<span class="hljs-number">2</span>*S[<span class="hljs-number">1</span>]**<span class="hljs-number">2</span>-T[<span class="hljs-number">0</span>]**<span class="hljs-number">2</span>*T[<span class="hljs-number">1</span>]**<span class="hljs-number">2</span>)<br>t2 = (S[<span class="hljs-number">0</span>]**<span class="hljs-number">2</span>+S[<span class="hljs-number">1</span>]**<span class="hljs-number">2</span>-T[<span class="hljs-number">0</span>]**<span class="hljs-number">2</span>-T[<span class="hljs-number">1</span>]**<span class="hljs-number">2</span>)*(P[<span class="hljs-number">0</span>]**<span class="hljs-number">2</span>*P[<span class="hljs-number">1</span>]**<span class="hljs-number">2</span>-Q[<span class="hljs-number">0</span>]**<span class="hljs-number">2</span>*Q[<span class="hljs-number">1</span>]**<span class="hljs-number">2</span>)<br>t3 = (S[<span class="hljs-number">0</span>]**<span class="hljs-number">2</span>+S[<span class="hljs-number">1</span>]**<span class="hljs-number">2</span>-Q[<span class="hljs-number">0</span>]**<span class="hljs-number">2</span>-Q[<span class="hljs-number">1</span>]**<span class="hljs-number">2</span>)*(P[<span class="hljs-number">0</span>]**<span class="hljs-number">2</span>*P[<span class="hljs-number">1</span>]**<span class="hljs-number">2</span>-T[<span class="hljs-number">0</span>]**<span class="hljs-number">2</span>*T[<span class="hljs-number">1</span>]**<span class="hljs-number">2</span>)<br>t4 = (P[<span class="hljs-number">0</span>]**<span class="hljs-number">2</span>+P[<span class="hljs-number">1</span>]**<span class="hljs-number">2</span>-T[<span class="hljs-number">0</span>]**<span class="hljs-number">2</span>-T[<span class="hljs-number">1</span>]**<span class="hljs-number">2</span>)*(S[<span class="hljs-number">0</span>]**<span class="hljs-number">2</span>*S[<span class="hljs-number">1</span>]**<span class="hljs-number">2</span>-Q[<span class="hljs-number">0</span>]**<span class="hljs-number">2</span>*Q[<span class="hljs-number">1</span>]**<span class="hljs-number">2</span>)<br>p = GCD(t1-t2,t3-t4)<br>c2d = ((P[<span class="hljs-number">0</span>]**<span class="hljs-number">2</span>+P[<span class="hljs-number">1</span>]**<span class="hljs-number">2</span>-Q[<span class="hljs-number">0</span>]**<span class="hljs-number">2</span>-Q[<span class="hljs-number">1</span>]**<span class="hljs-number">2</span>)*(inverse((P[<span class="hljs-number">0</span>]**<span class="hljs-number">2</span>*P[<span class="hljs-number">1</span>]**<span class="hljs-number">2</span>-Q[<span class="hljs-number">0</span>]**<span class="hljs-number">2</span>*Q[<span class="hljs-number">1</span>]**<span class="hljs-number">2</span>),p)))%p<br>c2 = (P[<span class="hljs-number">0</span>]**<span class="hljs-number">2</span>+P[<span class="hljs-number">1</span>]**<span class="hljs-number">2</span>-c2d*(P[<span class="hljs-number">0</span>]**<span class="hljs-number">2</span>*P[<span class="hljs-number">1</span>]**<span class="hljs-number">2</span>))%p<br>c = <span class="hljs-built_in">pow</span>(c2,(p+<span class="hljs-number">1</span>)//<span class="hljs-number">4</span>,p)<br>d = (c2d*(inverse(c2,p)))%p<br>Curve = c,d,p<br><br>e = <span class="hljs-number">0x10001</span><br>order = <span class="hljs-number">67943764351073247630101943221474884302071957392340923189748226436548954126268</span><br>k = inverse(e,order)<br>eG = (<span class="hljs-number">40198712137747628410430624618331426343875490261805137714686326678112749070113</span>, <span class="hljs-number">65008030741966083441937593781739493959677657609550411222052299176801418887407</span>)<br>G = mul(Curve, eG, k)<br><span class="hljs-built_in">print</span>(G)<br><span class="hljs-keyword">assert</span> (mul(Curve, G, e)==eG)<br>flag = <span class="hljs-string">&quot;hgame&#123;&quot;</span> + <span class="hljs-built_in">hex</span>(G[<span class="hljs-number">0</span>]+G[<span class="hljs-number">1</span>])[<span class="hljs-number">2</span>:] + <span class="hljs-string">&quot;&#125;&quot;</span><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h3 id="lastRSA"><a href="#lastRSA" class="headerlink" title="lastRSA"></a>lastRSA</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">P,k,leak0</span>):<br>    <span class="hljs-built_in">round</span>=<span class="hljs-number">40</span><br>    t=<span class="hljs-number">114514</span><br>    x= leak0+<span class="hljs-number">2</span>*t <span class="hljs-keyword">if</span> k==<span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">2</span>*t*leak0<br>    enc=<span class="hljs-number">2024</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">round</span>):<br>        enc+=<span class="hljs-built_in">pow</span>(x,<span class="hljs-built_in">round</span>,P)<br>        <span class="hljs-built_in">round</span>-=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> enc<br><br>m=bytes_to_long(flag)<br>p=getStrongPrime(<span class="hljs-number">512</span>)<br>q=getStrongPrime(<span class="hljs-number">512</span>)<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">bin</span>(p)[<span class="hljs-number">2</span>:])==<span class="hljs-number">512</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">bin</span>(q)[<span class="hljs-number">2</span>:])==<span class="hljs-number">512</span><br>e=<span class="hljs-number">0x10001</span><br>leak0=p^(q&gt;&gt;<span class="hljs-number">13</span>)<br>n=p*q<br>enc1=encrypt(n,<span class="hljs-number">1</span>,leak0)<br>enc2=encrypt(n,<span class="hljs-number">0</span>,leak0)<br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;enc1=<span class="hljs-subst">&#123;enc1&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;enc2=<span class="hljs-subst">&#123;enc2&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c=<span class="hljs-subst">&#123;c&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n=<span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">enc1=2481998981478152169164378674194911111475668734496914731682204172873045273889232856266140236518231314247189371709204253066552650323964534117750428068488816244218804456399611481184330258906749484831445348350172666468738790766815099309565494384945826796034182837505953580660530809234341340618365003203562639721024   </span><br><span class="hljs-string">enc2=2892413486487317168909532087203213279451225676278514499452279887449096190436834627119161155437012153025493797437822039637248773941097619806471091066094500182219982742574131816371999183859939231601667171386686480639682179794271743863617494759526428080527698539121555583797116049103918578087014860597240690299394   </span><br><span class="hljs-string">c=87077759878060225287052106938097622158896106278756852778571684429767457761148474369973882278847307769690207029595557915248044823659812747567906459417733553420521047767697402135115530660537769991893832879721828034794560921646691417429690920199537846426396918932533649132260605985848584545112232670451169040592        </span><br><span class="hljs-string">n=136159501395608246592433283541763642196295827652290287729738751327141687762873360488671062583851846628664067117347340297084457474032286451582225574885517757497232577841944028986878525656103449482492190400477852995620473233002547925192690737520592206832895895025277841872025718478827192193010765543046480481871       </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>第一步多项式gcd 第二部一个简单的算法（我还以为是剪枝 其实不是）</p><p>因为这个第二步 leak0的高13位就是p的高13位了，所以利用p的高位整除得到q的高位后，还可以返回来异或得出p的后续的高位，比较简单。</p><p>简单放个脚本吧 真要说的话 要说很多 少说点的话 其实也没什么好说的（</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage部分</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">HGCD</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-number">2</span> * b.degree() &lt;= a.degree() <span class="hljs-keyword">or</span> a.degree() == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    m = a.degree() // <span class="hljs-number">2</span><br>    a_top, a_bot = a.quo_rem(x^m)<br>    b_top, b_bot = b.quo_rem(x^m)<br>    R00, R01, R10, R11 = HGCD(a_top, b_top)<br>    c = R00 * a + R01 * b<br>    d = R10 * a + R11 * b<br>    q, e = c.quo_rem(d)<br>    d_top, d_bot = d.quo_rem(x^(m // <span class="hljs-number">2</span>))<br>    e_top, e_bot = e.quo_rem(x^(m // <span class="hljs-number">2</span>))<br>    S00, S01, S10, S11 = HGCD(d_top, e_top)<br>    RET00 = S01 * R00 + (S00 - q * S01) * R10<br>    RET01 = S01 * R01 + (S00 - q * S01) * R11<br>    RET10 = S11 * R00 + (S10 - q * S11) * R10<br>    RET11 = S11 * R01 + (S10 - q * S11) * R11<br>    <span class="hljs-keyword">return</span> RET00, RET01, RET10, RET11<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">GCD</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-built_in">print</span>(a.degree(), b.degree())<br>    q, r = a.quo_rem(b)<br>    <span class="hljs-keyword">if</span> r == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> b<br>    R00, R01, R10, R11 = HGCD(a, b)<br>    c = R00 * a + R01 * b<br>    d = R10 * a + R11 * b<br>    <span class="hljs-keyword">if</span> d == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> c.monic()<br>    q, r = c.quo_rem(d)<br>    <span class="hljs-keyword">if</span> r == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> d<br>    <span class="hljs-keyword">return</span> GCD(d, r)<br><br>enc1=<span class="hljs-number">2481998981478152169164378674194911111475668734496914731682204172873045273889232856266140236518231314247189371709204253066552650323964534117750428068488816244218804456399611481184330258906749484831445348350172666468738790766815099309565494384945826796034182837505953580660530809234341340618365003203562639721024</span>   <br>enc2=<span class="hljs-number">2892413486487317168909532087203213279451225676278514499452279887449096190436834627119161155437012153025493797437822039637248773941097619806471091066094500182219982742574131816371999183859939231601667171386686480639682179794271743863617494759526428080527698539121555583797116049103918578087014860597240690299394</span>   <br>c=<span class="hljs-number">87077759878060225287052106938097622158896106278756852778571684429767457761148474369973882278847307769690207029595557915248044823659812747567906459417733553420521047767697402135115530660537769991893832879721828034794560921646691417429690920199537846426396918932533649132260605985848584545112232670451169040592</span>        <br>n=<span class="hljs-number">136159501395608246592433283541763642196295827652290287729738751327141687762873360488671062583851846628664067117347340297084457474032286451582225574885517757497232577841944028986878525656103449482492190400477852995620473233002547925192690737520592206832895895025277841872025718478827192193010765543046480481871</span>       <br>t=<span class="hljs-number">114514</span><br>enc=<span class="hljs-number">2024</span><br>R.&lt;x&gt; = PolynomialRing(Zmod(n))  <span class="hljs-comment"># 定义一个多项式环，变量为x，系数在有理数集QQ上</span><br>f = (x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">1</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">2</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">3</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">4</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">5</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">6</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">7</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">8</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">9</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">10</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">11</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">12</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">13</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">14</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">15</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">16</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">17</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">18</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">19</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">20</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">21</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">22</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">23</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">24</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">25</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">26</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">27</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">28</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">29</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">30</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">31</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">32</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">33</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">34</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">35</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">36</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">37</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">38</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">39</span>+(x+<span class="hljs-number">2</span>*t)^<span class="hljs-number">40</span>-enc1+enc  <span class="hljs-comment"># 定义一个多项式f</span><br>g = (x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">1</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">2</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">3</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">4</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">5</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">6</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">7</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">8</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">9</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">10</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">11</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">12</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">13</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">14</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">15</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">16</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">17</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">18</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">19</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">20</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">21</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">22</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">23</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">24</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">25</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">26</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">27</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">28</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">29</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">30</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">31</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">32</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">33</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">34</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">35</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">36</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">37</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">38</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">39</span>+(x*<span class="hljs-number">2</span>*t)^<span class="hljs-number">40</span>-enc2+enc  <span class="hljs-comment"># 定义一个多项式g</span><br><span class="hljs-built_in">print</span>(-GCD(f,g).monic().coefficients()[<span class="hljs-number">0</span>])<br><br><span class="hljs-comment">#python部分</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>leak0=<span class="hljs-number">13168452015078389807681744077701012683188749953280204324570483361963541298704796389757190180549802771265899020301416729606658667351017116721327316272373584</span><br>enc1=<span class="hljs-number">2481998981478152169164378674194911111475668734496914731682204172873045273889232856266140236518231314247189371709204253066552650323964534117750428068488816244218804456399611481184330258906749484831445348350172666468738790766815099309565494384945826796034182837505953580660530809234341340618365003203562639721024</span>   <br>enc2=<span class="hljs-number">2892413486487317168909532087203213279451225676278514499452279887449096190436834627119161155437012153025493797437822039637248773941097619806471091066094500182219982742574131816371999183859939231601667171386686480639682179794271743863617494759526428080527698539121555583797116049103918578087014860597240690299394</span>   <br>c=<span class="hljs-number">87077759878060225287052106938097622158896106278756852778571684429767457761148474369973882278847307769690207029595557915248044823659812747567906459417733553420521047767697402135115530660537769991893832879721828034794560921646691417429690920199537846426396918932533649132260605985848584545112232670451169040592</span>        <br>N=<span class="hljs-number">136159501395608246592433283541763642196295827652290287729738751327141687762873360488671062583851846628664067117347340297084457474032286451582225574885517757497232577841944028986878525656103449482492190400477852995620473233002547925192690737520592206832895895025277841872025718478827192193010765543046480481871</span>       <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">P,k,leak0</span>):<br>    <span class="hljs-built_in">round</span>=<span class="hljs-number">40</span><br>    t=<span class="hljs-number">114514</span><br>    x= leak0+<span class="hljs-number">2</span>*t <span class="hljs-keyword">if</span> k==<span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">2</span>*t*leak0<br>    enc=<span class="hljs-number">2024</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">round</span>):<br>        enc+=<span class="hljs-built_in">pow</span>(x,<span class="hljs-built_in">round</span>,P)<br>        <span class="hljs-built_in">round</span>-=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> enc<br><span class="hljs-keyword">assert</span> (encrypt(N,<span class="hljs-number">1</span>,leak0)==enc1)<br><span class="hljs-comment">#leak0=p^(q&gt;&gt;13)</span><br>pbar = leak0 &gt;&gt;(<span class="hljs-number">512</span>-<span class="hljs-number">13</span>)<br><br><br>qbar = (N&gt;&gt;(<span class="hljs-number">1024</span> - pbar.bit_length()*<span class="hljs-number">2</span>))//pbar<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        qbar = (N&gt;&gt;(<span class="hljs-number">1024</span> - pbar.bit_length()*<span class="hljs-number">2</span>))//pbar<br>        qbar = qbar&gt;&gt;<span class="hljs-number">4</span><br>        leak0s = leak0^(qbar&lt;&lt;(<span class="hljs-number">512</span>-<span class="hljs-number">13</span>-qbar.bit_length()))<br>        pbar = leak0s &gt;&gt; (<span class="hljs-number">512</span>-<span class="hljs-number">13</span>-qbar.bit_length())<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>    <span class="hljs-keyword">if</span> N%((pbar&lt;&lt;<span class="hljs-number">4</span>)+i) == <span class="hljs-number">0</span>:<br>        p = (pbar&lt;&lt;<span class="hljs-number">4</span>)+i<br>        q = N//p<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] p =&quot;</span>,p)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] q =&quot;</span>,q)<br>        <span class="hljs-keyword">break</span><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>e=<span class="hljs-number">0x10001</span><br>d = inverse(e,phi)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,N)))<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
      <tag>Web</tag>
      
      <tag>Misc</tag>
      
      <tag>Hgame</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-Hgame-week3-wp-crypto</title>
    <link href="/2024/02/25/2024-Hgame-week3-wp-crypto/"/>
    <url>/2024/02/25/2024-Hgame-week3-wp-crypto/</url>
    
    <content type="html"><![CDATA[<h1 id="2024-Hgame-week3-wp-crypto"><a href="#2024-Hgame-week3-wp-crypto" class="headerlink" title="2024-Hgame-week3-wp-crypto"></a>2024-Hgame-week3-wp-crypto</h1><p>没事干，所以再更一篇吧</p><p>非常坏格密码，使我sagemath旋转</p><h3 id="exRSA"><a href="#exRSA" class="headerlink" title="exRSA"></a>exRSA</h3><p>扩展维纳攻击，其实之前做到维纳攻击的时候有了解过但不深，今天也算是正式了解了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br>m=bytes_to_long(flag)<br>p=getStrongPrime(<span class="hljs-number">1024</span>)<br>q=getStrongPrime(<span class="hljs-number">1024</span>)<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>e1=inverse(getPrime(<span class="hljs-number">768</span>),phi)<br>e2=inverse(getPrime(<span class="hljs-number">768</span>),phi)<br>e3=inverse(getPrime(<span class="hljs-number">768</span>),phi)<br>n=p*q<br>c=<span class="hljs-built_in">pow</span>(m,<span class="hljs-number">0x10001</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e1=<span class="hljs-subst">&#123;e1&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e2=<span class="hljs-subst">&#123;e2&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e3=<span class="hljs-subst">&#123;e3&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c=<span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n=<span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">e1=5077048237811969427473111225370876122528967447056551899123613461792688002896788394304192917610564149766252232281576990293485239684145310876930997918960070816968829150376875953405420809586267153171717496198336861089523701832098322284501931142889817575816761705044951705530849327928849848158643030693363143757063220584714925893965587967042137557807261154117916358519477964645293471975063362050690306353627492980861008439765365837622657977958069853288056307253167509883258122949882277021665317807253308906355670472172346171177267688064959397186926103987259551586627965406979118193485527520976748490728460167949055289539</span><br><span class="hljs-string">e2=12526848298349005390520276923929132463459152574998625757208259297891115133654117648215782945332529081365273860316201130793306570777735076534772168999705895641207535303839455074003057687810381110978320988976011326106919940799160974228311824760046370273505511065619268557697182586259234379239410482784449815732335294395676302226416863709340032987612715151916084291821095462625821023133560415325824885347221391496937213246361736361270846741128557595603052713612528453709948403100711277679641218520429878897565655482086410576379971404789212297697553748292438183065500993375040031733825496692797699362421010271599510269401</span><br><span class="hljs-string">e3=12985940757578530810519370332063658344046688856605967474941014436872720360444040464644790980976991393970947023398357422203873284294843401144065013911463670501559888601145108651961098348250824166697665528417668374408814572959722789020110396245076275553505878565603509466220710219260037783849276475397283421068716088638186994778153542817681963059581651103563578804145156157584336712678882995685632615686853980176047683326974283896343322981521150211317597571554542488921290158122634140571148036732893808064119048328855134054709120877895941670166421664806186710346824494054783025733475898081247824887967550418509038276279</span><br><span class="hljs-string">c=1414176060152301842110497098024597189246259172019335414900127452098233943041825926028517437075316294943355323947458928010556912909139739282924255506647305696872907898950473108556417350199783145349691087255926287363286922011841143339530863300198239231490707393383076174791818994158815857391930802936280447588808440607415377391336604533440099793849237857247557582307391329320515996021820000355560514217505643587026994918588311127143566858036653315985177551963836429728515745646807123637193259859856630452155138986610272067480257330592146135108190083578873094133114440050860844192259441093236787002715737932342847147399</span><br><span class="hljs-string">n=17853303733838066173110417890593704464146824886316456780873352559969742615755294466664439529352718434399552818635352768033531948009737170697566286848710832800426311328560924133698481653594007727877031506265706341560810588064209681809146597572126173303463125668183837840427667101827234752823747483792944536893070188010357644478512143332014786539698535220139784440314481371464053954769822738407808161946943216714729685820896972467020893493349051243983390018762076812868678098172416465691550285372846402991995794349015838868221686216396597327273110165922789814315858462049706255254066724012925815100434953821856854529753</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><a href="https://ctf-wiki.org/crypto/asymmetric/rsa/d_attacks/rsa_extending_wiener/">扩展维纳攻击 - CTF Wiki (ctf-wiki.org)</a></p><p>ctfwiki写的实在很详尽，在此仅贴出构造矩阵和代码。<br>$$<br>L_3&#x3D;\begin{pmatrix}1&amp;-N&amp;0&amp;N^2&amp;0&amp;0&amp;0&amp;-N^3\\<br>0&amp;e_1&amp;-e_1&amp;-Ne_1&amp;-e_1&amp;0&amp;Ne_1&amp;N^2e_1\\<br>0&amp;0&amp;e_2&amp;-Ne_2&amp;0&amp;Ne_2&amp;0&amp;N^2e_2\\<br>0&amp;0&amp;0&amp;e_1e_2&amp;0&amp;-e_1e_2&amp;-e_1e_2&amp;-Ne_1e_2\\<br>0&amp;0&amp;0&amp;0&amp;e_3&amp;-Ne_3&amp;-Ne_3&amp;N^2e_3\\<br>0&amp;0&amp;0&amp;0&amp;0&amp;e_1e_3&amp;0&amp;-Ne_1e_3\\<br>0&amp;0&amp;0&amp;0&amp;0&amp;0&amp;e_2e_3&amp;-Ne_2e_3\\<br>0&amp;0&amp;0&amp;0&amp;0&amp;0&amp;0&amp;e_1e_2e_3\\<br>\end{pmatrix}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br>e1=<span class="hljs-number">5077048237811969427473111225370876122528967447056551899123613461792688002896788394304192917610564149766252232281576990293485239684145310876930997918960070816968829150376875953405420809586267153171717496198336861089523701832098322284501931142889817575816761705044951705530849327928849848158643030693363143757063220584714925893965587967042137557807261154117916358519477964645293471975063362050690306353627492980861008439765365837622657977958069853288056307253167509883258122949882277021665317807253308906355670472172346171177267688064959397186926103987259551586627965406979118193485527520976748490728460167949055289539</span><br>e2=<span class="hljs-number">12526848298349005390520276923929132463459152574998625757208259297891115133654117648215782945332529081365273860316201130793306570777735076534772168999705895641207535303839455074003057687810381110978320988976011326106919940799160974228311824760046370273505511065619268557697182586259234379239410482784449815732335294395676302226416863709340032987612715151916084291821095462625821023133560415325824885347221391496937213246361736361270846741128557595603052713612528453709948403100711277679641218520429878897565655482086410576379971404789212297697553748292438183065500993375040031733825496692797699362421010271599510269401</span><br>e3=<span class="hljs-number">12985940757578530810519370332063658344046688856605967474941014436872720360444040464644790980976991393970947023398357422203873284294843401144065013911463670501559888601145108651961098348250824166697665528417668374408814572959722789020110396245076275553505878565603509466220710219260037783849276475397283421068716088638186994778153542817681963059581651103563578804145156157584336712678882995685632615686853980176047683326974283896343322981521150211317597571554542488921290158122634140571148036732893808064119048328855134054709120877895941670166421664806186710346824494054783025733475898081247824887967550418509038276279</span><br>c=<span class="hljs-number">1414176060152301842110497098024597189246259172019335414900127452098233943041825926028517437075316294943355323947458928010556912909139739282924255506647305696872907898950473108556417350199783145349691087255926287363286922011841143339530863300198239231490707393383076174791818994158815857391930802936280447588808440607415377391336604533440099793849237857247557582307391329320515996021820000355560514217505643587026994918588311127143566858036653315985177551963836429728515745646807123637193259859856630452155138986610272067480257330592146135108190083578873094133114440050860844192259441093236787002715737932342847147399</span><br>N=<span class="hljs-number">17853303733838066173110417890593704464146824886316456780873352559969742615755294466664439529352718434399552818635352768033531948009737170697566286848710832800426311328560924133698481653594007727877031506265706341560810588064209681809146597572126173303463125668183837840427667101827234752823747483792944536893070188010357644478512143332014786539698535220139784440314481371464053954769822738407808161946943216714729685820896972467020893493349051243983390018762076812868678098172416465691550285372846402991995794349015838868221686216396597327273110165922789814315858462049706255254066724012925815100434953821856854529753</span><br><br>a  = <span class="hljs-number">0.374</span><span class="hljs-comment">#731./2049</span><br>M1=N**<span class="hljs-number">0.5</span><br>M2= N **(a+<span class="hljs-number">1</span>)<br>D = diagonal_matrix(ZZ,[N**(<span class="hljs-number">1.5</span>),N,N**(a+<span class="hljs-number">1.5</span>),N**(<span class="hljs-number">0.5</span>),N**(a+<span class="hljs-number">1.5</span>),N **(a+<span class="hljs-number">1</span>),N **(a+<span class="hljs-number">1</span>),<span class="hljs-number">1</span>])<br>M=matrix(ZZ,[[<span class="hljs-number">1</span>,-N, <span class="hljs-number">0</span> ,N**<span class="hljs-number">2</span> , <span class="hljs-number">0</span> ,<span class="hljs-number">0</span>,  <span class="hljs-number">0</span> ,  -N**<span class="hljs-number">3</span>],<br>             [<span class="hljs-number">0</span>,e1,-e1,-e1*N,-e1,<span class="hljs-number">0</span>,N*e1,N**<span class="hljs-number">2</span>*e1],<br>             [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,e2,-e2*N,<span class="hljs-number">0</span>,e2*N,<span class="hljs-number">0</span>,N**<span class="hljs-number">2</span>*e2],<br>             [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,e1*e2,<span class="hljs-number">0</span>,-e1*e2,-e1*e2,-N*e1*e2],<br>             [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,e3,-N*e3,-N*e3,N**<span class="hljs-number">2</span>*e3],<br>             [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,e1*e3,<span class="hljs-number">0</span>,-N*e1*e3],<br>             [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,e2*e3,-N*e2*e3],<br>             [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,e1*e2*e3],])*D<br>L=M.LLL()<br>t=vector(ZZ,L[<span class="hljs-number">0</span>])<br>x=t*M**(-<span class="hljs-number">1</span>)<br>phi = <span class="hljs-built_in">int</span>(x[<span class="hljs-number">1</span>]/x[<span class="hljs-number">0</span>]*e1)<br>d = inverse(<span class="hljs-number">65537</span>,phi)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(c,d,N))))<br></code></pre></td></tr></table></figure><p>据说某些情况LLL跑不出来？并没有深究</p><h3 id="HNP"><a href="#HNP" class="headerlink" title="HNP"></a>HNP</h3><p>题如其名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">m,p,t</span>):<br>    <span class="hljs-keyword">return</span> [(ti*m)%p <span class="hljs-keyword">for</span> ti <span class="hljs-keyword">in</span> t]<br><br>m=bytes_to_long(flag[:<span class="hljs-number">63</span>])<br>length=m.bit_length()+<span class="hljs-number">8</span><br>p=getStrongPrime(length)<br>n=<span class="hljs-number">32</span><br>t=[getRandomRange(<span class="hljs-number">0</span>,p) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>enc=encrypt(m,p,t)<br>res=[i%(<span class="hljs-number">2</span>**n+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> enc]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;p=<span class="hljs-subst">&#123;p&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;t=<span class="hljs-subst">&#123;t&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;res=<span class="hljs-subst">&#123;res&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">p=11306299241774950053269547103284637414407835125777245204069367567691021928864773207548731051592853515206232365901169778048084146520829032339328263913558053</span><br><span class="hljs-string">t=[3322008555255129336821309701482996933045379792432532251579564581211072677403244970423357912298444457457306659801200188166569132560659008356952740599371688, 8276764260264858811845211578415023343942634613522088631021199433066924291049858607045960690574035761370394263154981351728494309737901121703288822616367266, 9872291736922974456420418463601129094227231979218385985149661132792467621940722580745327835405374826293791332815176458750548942757024017382881517284991646, 4021521745142535813153669961146457406640791935844796005344073886289668464885011415887755787903927824762833158130615018326666118383128627535623639046817799, 24569151076141700493541155834378165089870615699969211988778938492838766214386066952596557490584021813819164202001474086538804476667616708172536787956586, 3218501156520848572861458831123822689702035242514803505049101779996231750875036344564322600086861361414609201214822262908428091097382781770850929067404210, 3563405987398375076327633444036492163004958714828685846202818610320439306396912425420391070117069875583786819323173342951172594046652017297552813501557159, 4914709045693863038598225124534515048993310770286105070725513667435983789847547225180024824321458761262390817487861675595466513538901373422149236133926354, 10800566112999947911006702454427389510409658644419749067440812458744391509925306994806187389406032718319773665587324010542068486131582672363925769248595266, 623364920052209790798128731089194813138909691039137935275037339503622126325928773037501254722851684318024014108149525215083265733712809162344553998427324, 4918421097628430613801265525870561041230011029818851291086862970508621529074497601678774921285912745589840510459677522074887576152015356984592589649844431, 7445733357215847370070696136653689748718028080364812263947785747353258936968978183471549706166364243148972154215055224857918834937707555053246184822095602, 9333534755049225627530284249388438694002602645047933865453159836796667198966058177988500184073454386184080934727537200575457598976121667373801441395932440, 5010854803179970445838791575321127911278311635230076639023411571148488903400610121248617307773872612743228998892986200202713496570375447255258630932158822, 6000645068462569819648461070140557521144801013490106632356836325002546400871463957228581143954591005398533252218429970486115490535584071786260818773166324, 8007260909124669381862034901556111245780505987082990804380814797200322228942432673939944693062470178256867366602331612363176408356304641672459456517978560, 10179739175373883376929532026389135792129233730601278687507041429438945598523995700184622359660605910932803141785598758326254886448481046307666042835829725, 8390072767717395701926289779433055672863880336031837009119103448675232362942223633129328309118158273835961567436591234922783953373319767835877266849545292, 7875011911562967874676113680693929230283866841475641162854665293111344467709424408623198370942797099964625447512797138192853009126888853283526034411007513, 5293772811020012501020124775214770193234655210319343058648675411115210453680753070042821835082619634341500680892323002118953557746116918093661769464642068, 2613797279426774540306461931319193657999892129844832159658771717387120246795689678231275371499556522396061591882431426310841974713419974045883021613987705, 9658126012133217804126630005236073513485215390812977974660029053522665282550965040288256074945246850744694519543358777252929661561636241161575937061521711, 2982535220844977621775139406357528876019349385634811795480230677982345697183586203669094998039995683973939721644887543907494963824968042199353945120367505, 107289984878191849357180490850397539311037762262082755398160292401340078782643246498566039415279868796667596686125847400130898160017838981308638814854641, 120993130590874228473811314869823704699012435303134640953201808807618070048912918046616664677916248813062043597607873728870402493717351447905456920806865, 2253040652771796284266254261719805768102740653097446325869783812201171144150768875885963729324915714812719138247784194752636928267712344736198611708630089, 8650007272154283057350664311505887535841268767424545016901418989555620869091145651216448723200240914143882774616678968725523914310965356875681207295242434, 9628747829107584650014156079928108801687158029086221730883999749044532846489666115473993005442192859171931882795973774131309900021287319059216105939670757, 10846936951522093706092027908131679912432689712451920718439096706435533926996215766191967052667966065917006691565771695772798711202812180782901250249613072, 1606865651227988736664127021678689299989045439998336603562232908863405778474520915170766771811336319655792746590981740617823564813573118410064976081989237, 6239063657591721097735049409610872941214078699330136826592958549212481802973973104374548555184907929255031570525343007518434357690480429981016781110249612, 1855365916387114620581029939707053701062476745235578683558063796604744448050278138954359506922875967537567359575662394297579958372107484276360920567730458]</span><br><span class="hljs-string">res=[2150646508, 1512876052, 2420557546, 2504482055, 892924885, 213721693, 2708081441, 1242578136, 717552493, 3210536920, 2868728798, 1873446451, 645647556, 2863150833, 2481560171, 2518043272, 3183116112, 3032464437, 934713925, 470165267, 1104983992, 194502564, 1621769687, 3844589346, 21450588, 2520267465, 2516176644, 3290591307, 3605562914, 140915309, 3690380156, 3646976628]</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>每个enc泄露32位，总共32个enc，要求的m大概在600位左右，是可以求的。</p><p>注意到enc泄露的是低位，所以这么构造<br>$$<br>T_im\equiv D*ENC_i+res_i\quad\text{(mod}p)<br>$$<br>其中$m$是密文，$D&#x3D;2^{32}+1$ ，$ENC_i$是未知高位。</p><p>然后继续构造<br>$$<br>m\equiv T_0^{-1}(D*ENC_0+res_0)\quad\mathrm{(mod}p)<br>$$<br>两个式子联立消m 然后把$ENC_i$提出来<br>$$<br>(DT_0)^{-1}(T_ires_0-T_0res_i)+(T_0^{-1}T_i)ENC_0\equiv ENC_i\quad\text{(mod}p)<br>$$<br>这样子在这个式子中$ENC_0$和$ENC_i$都暴露出来了，换元然后构造矩阵直接格基约化。</p><p>令$D_{i}\equiv(DT_{0})^{-1}(T_{i}res_{0}-T_{0}res_{i})(\mathrm{mod}p),E_{i}\equiv(T_{0}^{-1}T_{i})(\mathrm{mod}p).$</p><p>展开。<br>$$<br>D_i+E_i*ENC_0-k_ip&#x3D;ENC_i<br>$$<br>我草这个元设的真丑吧</p><p>但是我懒得改了</p><p>令$R&#x3D;2^{m-s}$，构造矩阵<br>$$<br>B&#x3D;\begin{bmatrix}-p &amp;  &amp;  &amp;  &amp;  &amp;  &amp;  &amp; \\<br>&amp; -p &amp;  &amp;  &amp;  &amp;  &amp;  &amp; \\<br>&amp;  &amp; \ddots &amp;  &amp;  &amp;  &amp;  &amp; \\<br>&amp;  &amp;  &amp; -p &amp;  &amp;  &amp;  &amp; \\<br>E_1 &amp; E_2 &amp; E_{n-1} &amp;  &amp; 1 &amp;  &amp;  &amp; \\<br>D_1 &amp; D_2 &amp; D_{n-1} &amp;  &amp;  &amp; R &amp;  &amp; \\<br>\end{bmatrix}_{(n+1)*(n+1)}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><br>m = <span class="hljs-number">512</span><br>s = <span class="hljs-number">32</span><br>n = <span class="hljs-number">32</span><br>q=<span class="hljs-number">11306299241774950053269547103284637414407835125777245204069367567691021928864773207548731051592853515206232365901169778048084146520829032339328263913558053</span><br>A=[<span class="hljs-number">3322008555255129336821309701482996933045379792432532251579564581211072677403244970423357912298444457457306659801200188166569132560659008356952740599371688</span>, <span class="hljs-number">8276764260264858811845211578415023343942634613522088631021199433066924291049858607045960690574035761370394263154981351728494309737901121703288822616367266</span>, <span class="hljs-number">9872291736922974456420418463601129094227231979218385985149661132792467621940722580745327835405374826293791332815176458750548942757024017382881517284991646</span>, <span class="hljs-number">4021521745142535813153669961146457406640791935844796005344073886289668464885011415887755787903927824762833158130615018326666118383128627535623639046817799</span>, <span class="hljs-number">24569151076141700493541155834378165089870615699969211988778938492838766214386066952596557490584021813819164202001474086538804476667616708172536787956586</span>, <span class="hljs-number">3218501156520848572861458831123822689702035242514803505049101779996231750875036344564322600086861361414609201214822262908428091097382781770850929067404210</span>, <span class="hljs-number">3563405987398375076327633444036492163004958714828685846202818610320439306396912425420391070117069875583786819323173342951172594046652017297552813501557159</span>, <span class="hljs-number">4914709045693863038598225124534515048993310770286105070725513667435983789847547225180024824321458761262390817487861675595466513538901373422149236133926354</span>, <span class="hljs-number">10800566112999947911006702454427389510409658644419749067440812458744391509925306994806187389406032718319773665587324010542068486131582672363925769248595266</span>, <span class="hljs-number">623364920052209790798128731089194813138909691039137935275037339503622126325928773037501254722851684318024014108149525215083265733712809162344553998427324</span>, <span class="hljs-number">4918421097628430613801265525870561041230011029818851291086862970508621529074497601678774921285912745589840510459677522074887576152015356984592589649844431</span>, <span class="hljs-number">7445733357215847370070696136653689748718028080364812263947785747353258936968978183471549706166364243148972154215055224857918834937707555053246184822095602</span>, <span class="hljs-number">9333534755049225627530284249388438694002602645047933865453159836796667198966058177988500184073454386184080934727537200575457598976121667373801441395932440</span>, <span class="hljs-number">5010854803179970445838791575321127911278311635230076639023411571148488903400610121248617307773872612743228998892986200202713496570375447255258630932158822</span>, <span class="hljs-number">6000645068462569819648461070140557521144801013490106632356836325002546400871463957228581143954591005398533252218429970486115490535584071786260818773166324</span>, <span class="hljs-number">8007260909124669381862034901556111245780505987082990804380814797200322228942432673939944693062470178256867366602331612363176408356304641672459456517978560</span>, <span class="hljs-number">10179739175373883376929532026389135792129233730601278687507041429438945598523995700184622359660605910932803141785598758326254886448481046307666042835829725</span>, <span class="hljs-number">8390072767717395701926289779433055672863880336031837009119103448675232362942223633129328309118158273835961567436591234922783953373319767835877266849545292</span>, <span class="hljs-number">7875011911562967874676113680693929230283866841475641162854665293111344467709424408623198370942797099964625447512797138192853009126888853283526034411007513</span>, <span class="hljs-number">5293772811020012501020124775214770193234655210319343058648675411115210453680753070042821835082619634341500680892323002118953557746116918093661769464642068</span>, <span class="hljs-number">2613797279426774540306461931319193657999892129844832159658771717387120246795689678231275371499556522396061591882431426310841974713419974045883021613987705</span>, <span class="hljs-number">9658126012133217804126630005236073513485215390812977974660029053522665282550965040288256074945246850744694519543358777252929661561636241161575937061521711</span>, <span class="hljs-number">2982535220844977621775139406357528876019349385634811795480230677982345697183586203669094998039995683973939721644887543907494963824968042199353945120367505</span>, <span class="hljs-number">107289984878191849357180490850397539311037762262082755398160292401340078782643246498566039415279868796667596686125847400130898160017838981308638814854641</span>, <span class="hljs-number">120993130590874228473811314869823704699012435303134640953201808807618070048912918046616664677916248813062043597607873728870402493717351447905456920806865</span>, <span class="hljs-number">2253040652771796284266254261719805768102740653097446325869783812201171144150768875885963729324915714812719138247784194752636928267712344736198611708630089</span>, <span class="hljs-number">8650007272154283057350664311505887535841268767424545016901418989555620869091145651216448723200240914143882774616678968725523914310965356875681207295242434</span>, <span class="hljs-number">9628747829107584650014156079928108801687158029086221730883999749044532846489666115473993005442192859171931882795973774131309900021287319059216105939670757</span>, <span class="hljs-number">10846936951522093706092027908131679912432689712451920718439096706435533926996215766191967052667966065917006691565771695772798711202812180782901250249613072</span>, <span class="hljs-number">1606865651227988736664127021678689299989045439998336603562232908863405778474520915170766771811336319655792746590981740617823564813573118410064976081989237</span>, <span class="hljs-number">6239063657591721097735049409610872941214078699330136826592958549212481802973973104374548555184907929255031570525343007518434357690480429981016781110249612</span>, <span class="hljs-number">1855365916387114620581029939707053701062476745235578683558063796604744448050278138954359506922875967537567359575662394297579958372107484276360920567730458</span>]<br>b=[<span class="hljs-number">2150646508</span>, <span class="hljs-number">1512876052</span>, <span class="hljs-number">2420557546</span>, <span class="hljs-number">2504482055</span>, <span class="hljs-number">892924885</span>, <span class="hljs-number">213721693</span>, <span class="hljs-number">2708081441</span>, <span class="hljs-number">1242578136</span>, <span class="hljs-number">717552493</span>, <span class="hljs-number">3210536920</span>, <span class="hljs-number">2868728798</span>, <span class="hljs-number">1873446451</span>, <span class="hljs-number">645647556</span>, <span class="hljs-number">2863150833</span>, <span class="hljs-number">2481560171</span>, <span class="hljs-number">2518043272</span>, <span class="hljs-number">3183116112</span>, <span class="hljs-number">3032464437</span>, <span class="hljs-number">934713925</span>, <span class="hljs-number">470165267</span>, <span class="hljs-number">1104983992</span>, <span class="hljs-number">194502564</span>, <span class="hljs-number">1621769687</span>, <span class="hljs-number">3844589346</span>, <span class="hljs-number">21450588</span>, <span class="hljs-number">2520267465</span>, <span class="hljs-number">2516176644</span>, <span class="hljs-number">3290591307</span>, <span class="hljs-number">3605562914</span>, <span class="hljs-number">140915309</span>, <span class="hljs-number">3690380156</span>, <span class="hljs-number">3646976628</span>]<br>T = <span class="hljs-number">2</span>^s+<span class="hljs-number">1</span><br>Ti = T.inverse_mod(q)<br><span class="hljs-keyword">for</span> choice <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    A0 = A[choice]<br>    S = <span class="hljs-number">2</span>^(m-<span class="hljs-number">1</span>)<br>    b0 = b[choice]<br>    b = [x  <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> b]<br>    A0i = inverse(A[choice],q)<br>    Mt = matrix(ZZ, n+<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>):<br>        Mt[i, i]  = -q<br>        Mt[-<span class="hljs-number">2</span>, i] = A0i*A[i+<span class="hljs-number">1</span>] % q<br>        Mt[-<span class="hljs-number">1</span>, i] = A0i*Ti*(A[i+<span class="hljs-number">1</span>]*b0 - A0*b[i+<span class="hljs-number">1</span>]) % q<br>    Mt[-<span class="hljs-number">2</span>, -<span class="hljs-number">2</span>] = <span class="hljs-number">1</span><br>    R = <span class="hljs-number">2</span>^(m-<span class="hljs-number">19</span>)<br>    Mt[-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>] = R<br>    L = Mt.BKZ(block_size=Mt.rank())<br>    <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> L:<br>        <span class="hljs-keyword">if</span> l[-<span class="hljs-number">1</span>] == R:<br>            B0 = l[-<span class="hljs-number">2</span>]<br>            x0 = (T*B0+b0) * A0i % q<br>            <span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(x0)))<br></code></pre></td></tr></table></figure><h3 id="matrix-equation"><a href="#matrix-equation" class="headerlink" title="matrix_equation"></a><strong>matrix_equation</strong></h3><p>简单的格构造，其实本该想到的，但是笔者一意孤行认为是丢番图方程…</p><p>卡了一会，当然最后还是做出来了。</p><p>简单说说。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> p,q,r<br>k1=getPrime(<span class="hljs-number">256</span>)<br>k2=getPrime(<span class="hljs-number">256</span>)<br>temp=p*<span class="hljs-number">2</span>**<span class="hljs-number">256</span>+q*k1+r*k2<br>hint=<span class="hljs-built_in">len</span>(<span class="hljs-built_in">bin</span>(temp)[<span class="hljs-number">2</span>:])<br>flag=<span class="hljs-string">&#x27;hgame&#123;&#x27;</span>+hashlib.sha256(<span class="hljs-built_in">str</span>(p+q+r).encode()).hexdigest()+<span class="hljs-string">&#x27;&#125;&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;hint=<span class="hljs-subst">&#123;hint&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;k1=<span class="hljs-subst">&#123;k1&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;k2=<span class="hljs-subst">&#123;k2&#125;</span>&#x27;</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">83</span><br><span class="hljs-string">k1=73715329877215340145951238343247156282165705396074786483256699817651255709671</span><br><span class="hljs-string">k2=61361970662269869738270328523897765408443907198313632410068454223717824276837</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>题面很简单，实际上也应该联想到要构造矩阵去做。</p><p>目标是构造矩阵M使得（p,q,r）*M&#x3D;(temp,q,r)，并且(temp,q,r)应为最短向量。</p><p>故可构造<br>$$<br>B&#x3D;\begin{bmatrix}2^{256} &amp; 0 &amp; 0 \\<br>k_1 &amp; 1 &amp; 0  \\<br>k_2 &amp; 0 &amp; 1 \\<br>\end{bmatrix}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve_pqr</span>(<span class="hljs-params">k1,k2</span>):<br>M = matrix(ZZ, [[<span class="hljs-number">2</span>^<span class="hljs-number">256</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],<br>[k1,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],<br>[k2,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]])<br>Msub = M.LLL()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">bin</span>(Msub[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>])))<br>v = M.solve_left(Msub[<span class="hljs-number">0</span>])<br>p, q,r = v[<span class="hljs-number">0</span>], v[<span class="hljs-number">1</span>],v[<span class="hljs-number">2</span>]<br><span class="hljs-keyword">return</span> p, q,r<br>k1=<span class="hljs-number">7371532987721534014595123834324715628216570539607478648325669981765125570967</span><br><span class="hljs-number">1</span><br>k2=<span class="hljs-number">6136197066226986973827032852389776540844390719831363241006845422371782427683</span><br><span class="hljs-number">7</span><br>p,q,r=solve_pqr(k1,k2)<br><span class="hljs-built_in">print</span>(p,q,r)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
      <tag>Web</tag>
      
      <tag>Misc</tag>
      
      <tag>Hgame</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-Hgame-week2-wp-crypto</title>
    <link href="/2024/02/25/2024-Hgame-week2-wp-crypto/"/>
    <url>/2024/02/25/2024-Hgame-week2-wp-crypto/</url>
    
    <content type="html"><![CDATA[<h1 id="2024-Hgame-week2-wp-crypto"><a href="#2024-Hgame-week2-wp-crypto" class="headerlink" title="2024-Hgame-week2-wp-crypto"></a>2024-Hgame-week2-wp-crypto</h1><p>奇怪的图片plus很有意思。</p><h3 id="midRSA"><a href="#midRSA" class="headerlink" title="midRSA"></a><strong>midRSA</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br>m=bytes_to_long(flag)<br>p=getPrime(<span class="hljs-number">1024</span>)<br>q=getPrime(<span class="hljs-number">1024</span>)<br>e=<span class="hljs-number">5</span><br>n=p*q<br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br>m0=m&gt;&gt;<span class="hljs-number">128</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n=<span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c=<span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;m0=<span class="hljs-subst">&#123;m0&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">n=27814334728135671995890378154778822687713875269624843122353458059697288888640572922486287556431241786461159513236128914176680497775619694684903498070577307810263677280294114135929708745988406963307279767028969515305895207028282193547356414827419008393701158467818535109517213088920890236300281646288761697842280633285355376389468360033584102258243058885174812018295460196515483819254913183079496947309574392848378504246991546781252139861876509894476420525317251695953355755164789878602945615879965709871975770823484418665634050103852564819575756950047691205355599004786541600213204423145854859214897431430282333052121</span><br><span class="hljs-string">c=456221314115867088638207203034494636244706611111621723577848729096069230067958132663018625661447131501758684502639383208332844681939698124459188571813527149772292464139530736717619741704945926075632064072125361516435631121845753186559297993355270779818057702973783391589851159114029310296551701456748698914231344835187917559305440269560613326893204748127999254902102919605370363889581136724164096879573173870280806620454087466970358998654736755257023225078147018537101</span><br><span class="hljs-string">m0=9999900281003357773420310681169330823266532533803905637</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br></code></pre></td></tr></table></figure><p>一眼coppersmith，没什么好说的，真要说这里也装不下（</p><p>直接上脚本了</p><p>sagemath是个好东西</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><br><br>n=<span class="hljs-number">27814334728135671995890378154778822687713875269624843122353458059697288888640572922486287556431241786461159513236128914176680497775619694684903498070577307810263677280294114135929708745988406963307279767028969515305895207028282193547356414827419008393701158467818535109517213088920890236300281646288761697842280633285355376389468360033584102258243058885174812018295460196515483819254913183079496947309574392848378504246991546781252139861876509894476420525317251695953355755164789878602945615879965709871975770823484418665634050103852564819575756950047691205355599004786541600213204423145854859214897431430282333052121</span><br>c=<span class="hljs-number">456221314115867088638207203034494636244706611111621723577848729096069230067958132663018625661447131501758684502639383208332844681939698124459188571813527149772292464139530736717619741704945926075632064072125361516435631121845753186559297993355270779818057702973783391589851159114029310296551701456748698914231344835187917559305440269560613326893204748127999254902102919605370363889581136724164096879573173870280806620454087466970358998654736755257023225078147018537101</span><br>m0=<span class="hljs-number">9999900281003357773420310681169330823266532533803905637</span><br>m = m0&lt;&lt;<span class="hljs-number">128</span><br><br>PR.&lt;x&gt; = PolynomialRing(Zmod(n))<br>f = (m + x)^<span class="hljs-number">5</span> - c<br>f = f.monic()<br>roots = f.small_roots(X = <span class="hljs-number">2</span>^<span class="hljs-number">128</span>,beta = <span class="hljs-number">0.4</span>)<br><br>m = m + <span class="hljs-built_in">int</span>(roots[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><br></code></pre></td></tr></table></figure><h3 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag,e<br>m=bytes_to_long(flag)<br>p=getPrime(<span class="hljs-number">64</span>)<br>q=getPrime(<span class="hljs-number">256</span>)<br>n=p**<span class="hljs-number">4</span>*q<br>k=getPrime(<span class="hljs-number">16</span>)<br>gift=<span class="hljs-built_in">pow</span>(e+<span class="hljs-number">114514</span>+p**k,<span class="hljs-number">0x10001</span>,p)<br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;p=<span class="hljs-subst">&#123;p&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;q=<span class="hljs-subst">&#123;q&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c=<span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;gift=<span class="hljs-subst">&#123;gift&#125;</span>&#x27;</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">p=14213355454944773291</span><br><span class="hljs-string">q=61843562051620700386348551175371930486064978441159200765618339743764001033297</span><br><span class="hljs-string">c=105002138722466946495936638656038214000043475751639025085255113965088749272461906892586616250264922348192496597986452786281151156436229574065193965422841</span><br><span class="hljs-string">gift=9751789326354522940</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br></code></pre></td></tr></table></figure><p>这一题我是爆破出的e，但实际上稍微想一想，用逆元是完全可以做的。</p><p>但是从时间角度考虑的话，用爆破也无可厚非，但是关键的是要想到如果e大到没法爆破该怎么办，所以还是学一学为好。</p><h5 id=""><a href="#" class="headerlink" title=""></a></h5><p>众所周知$e$和$p$互素，那么有<br>$$<br>e^{p-1} \equiv 1 \quad(\bmod p)<br>$$<br>那么就有一种可能使得<br>$$<br>e^{65537x} \equiv e \quad(\bmod p)<br>$$<br>此时$65537x&#x3D;1+k(p-1)$</p><p>这个形式很接近逆元的形式 转换一下 $65537x&#x3D;1(\bmod p-1)$</p><p>65537对$p-1$求逆元就可以了</p><p>（题解里面为什么会对phi求逆元呢，虽然也是对的但是不明白思路</p><p>然后就是一个域下开高次根，比较模板</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br>p=<span class="hljs-number">14213355454944773291</span><br>q=<span class="hljs-number">61843562051620700386348551175371930486064978441159200765618339743764001033297</span><br>c=<span class="hljs-number">105002138722466946495936638656038214000043475751639025085255113965088749272461906892586616250264922348192496597986452786281151156436229574065193965422841</span><br>phi=p^<span class="hljs-number">3</span>*(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>gift=<span class="hljs-number">9751789326354522940</span><br>d1=inverse(<span class="hljs-number">0x10001</span>,p-<span class="hljs-number">1</span>)<br>e=<span class="hljs-built_in">pow</span>(gift,d1,p)-<span class="hljs-number">114514</span><br>n=p^<span class="hljs-number">4</span>*q<br>K=Zmod(n)<br>x=K(c).nth_root(e,<span class="hljs-built_in">all</span>=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(x):<br>m=long_to_bytes(<span class="hljs-built_in">int</span>(i))<br><span class="hljs-keyword">if</span> <span class="hljs-string">b&quot;hgame&quot;</span> <span class="hljs-keyword">in</span> m:<br><span class="hljs-built_in">print</span>(m)<br><span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h3 id="Backpack"><a href="#Backpack" class="headerlink" title="Backpack"></a>Backpack</h3><p>一个构造LLL的背包密码题，比较模板，不多赘述</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> hashlib<br><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>c = <span class="hljs-number">1202548196826013899006527314947</span><br>a = [<span class="hljs-number">74763079510261699126345525979</span>, <span class="hljs-number">51725049470068950810478487507</span>, <span class="hljs-number">47190309269514609005045330671</span>, <span class="hljs-number">64955989640650139818348214927</span>, <span class="hljs-number">68559937238623623619114065917</span>, <span class="hljs-number">72311339170112185401496867001</span>, <span class="hljs-number">70817336064254781640273354039</span>, <span class="hljs-number">70538108826539785774361605309</span>, <span class="hljs-number">43782530942481865621293381023</span>, <span class="hljs-number">58234328186578036291057066237</span>, <span class="hljs-number">68808271265478858570126916949</span>, <span class="hljs-number">61660200470938153836045483887</span>, <span class="hljs-number">63270726981851544620359231307</span>, <span class="hljs-number">42904776486697691669639929229</span>, <span class="hljs-number">41545637201787531637427603339</span>, <span class="hljs-number">74012839055649891397172870891</span>, <span class="hljs-number">56943794795641260674953676827</span>, <span class="hljs-number">51737391902187759188078687453</span>, <span class="hljs-number">49264368999561659986182883907</span>, <span class="hljs-number">60044221237387104054597861973</span>, <span class="hljs-number">63847046350260520761043687817</span>, <span class="hljs-number">62128146699582180779013983561</span>, <span class="hljs-number">65109313423212852647930299981</span>, <span class="hljs-number">66825635869831731092684039351</span>, <span class="hljs-number">67763265147791272083780752327</span>, <span class="hljs-number">61167844083999179669702601647</span>, <span class="hljs-number">55116015927868756859007961943</span>, <span class="hljs-number">52344488518055672082280377551</span>, <span class="hljs-number">52375877891942312320031803919</span>, <span class="hljs-number">69659035941564119291640404791</span>, <span class="hljs-number">52563282085178646767814382889</span>, <span class="hljs-number">56810627312286420494109192029</span>, <span class="hljs-number">49755877799006889063882566549</span>, <span class="hljs-number">43858901672451756754474845193</span>, <span class="hljs-number">67923743615154983291145624523</span>, <span class="hljs-number">51689455514728547423995162637</span>, <span class="hljs-number">67480131151707155672527583321</span>, <span class="hljs-number">59396212248330580072184648071</span>, <span class="hljs-number">63410528875220489799475249207</span>, <span class="hljs-number">48011409288550880229280578149</span>, <span class="hljs-number">62561969260391132956818285937</span>, <span class="hljs-number">44826158664283779410330615971</span>, <span class="hljs-number">70446218759976239947751162051</span>, <span class="hljs-number">56509847379836600033501942537</span>, <span class="hljs-number">50154287971179831355068443153</span>, <span class="hljs-number">49060507116095861174971467149</span>, <span class="hljs-number">54236848294299624632160521071</span>, <span class="hljs-number">64186626428974976108467196869</span>]<br>n = <span class="hljs-built_in">len</span>(a)<br>L = Matrix(ZZ, n+<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    L[i,i] = <span class="hljs-number">2</span><br>    L[i,-<span class="hljs-number">1</span>] = a[i]<br>    L[-<span class="hljs-number">1</span>,i] = <span class="hljs-number">1</span><br>L[-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>] = c<br><br>res = L.LLL()<br>a = <span class="hljs-built_in">list</span>(res[<span class="hljs-number">0</span>])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    <span class="hljs-keyword">if</span> a[i] == -<span class="hljs-number">1</span>:<br>        a[i] = <span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(a)<br><br><br>a = <span class="hljs-number">0b111101000010110101010001010011000111000100100001</span><br>n = <span class="hljs-number">0</span><br>alist = [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<br>anum=[<span class="hljs-number">74763079510261699126345525979</span>, <span class="hljs-number">51725049470068950810478487507</span>, <span class="hljs-number">47190309269514609005045330671</span>, <span class="hljs-number">64955989640650139818348214927</span>, <span class="hljs-number">68559937238623623619114065917</span>, <span class="hljs-number">72311339170112185401496867001</span>, <span class="hljs-number">70817336064254781640273354039</span>, <span class="hljs-number">70538108826539785774361605309</span>, <span class="hljs-number">43782530942481865621293381023</span>, <span class="hljs-number">58234328186578036291057066237</span>, <span class="hljs-number">68808271265478858570126916949</span>, <span class="hljs-number">61660200470938153836045483887</span>, <span class="hljs-number">63270726981851544620359231307</span>, <span class="hljs-number">42904776486697691669639929229</span>, <span class="hljs-number">41545637201787531637427603339</span>, <span class="hljs-number">74012839055649891397172870891</span>, <span class="hljs-number">56943794795641260674953676827</span>, <span class="hljs-number">51737391902187759188078687453</span>, <span class="hljs-number">49264368999561659986182883907</span>, <span class="hljs-number">60044221237387104054597861973</span>, <span class="hljs-number">63847046350260520761043687817</span>, <span class="hljs-number">62128146699582180779013983561</span>, <span class="hljs-number">65109313423212852647930299981</span>, <span class="hljs-number">66825635869831731092684039351</span>, <span class="hljs-number">67763265147791272083780752327</span>, <span class="hljs-number">61167844083999179669702601647</span>, <span class="hljs-number">55116015927868756859007961943</span>, <span class="hljs-number">52344488518055672082280377551</span>, <span class="hljs-number">52375877891942312320031803919</span>, <span class="hljs-number">69659035941564119291640404791</span>, <span class="hljs-number">52563282085178646767814382889</span>, <span class="hljs-number">56810627312286420494109192029</span>, <span class="hljs-number">49755877799006889063882566549</span>, <span class="hljs-number">43858901672451756754474845193</span>, <span class="hljs-number">67923743615154983291145624523</span>, <span class="hljs-number">51689455514728547423995162637</span>, <span class="hljs-number">67480131151707155672527583321</span>, <span class="hljs-number">59396212248330580072184648071</span>, <span class="hljs-number">63410528875220489799475249207</span>, <span class="hljs-number">48011409288550880229280578149</span>, <span class="hljs-number">62561969260391132956818285937</span>, <span class="hljs-number">44826158664283779410330615971</span>, <span class="hljs-number">70446218759976239947751162051</span>, <span class="hljs-number">56509847379836600033501942537</span>, <span class="hljs-number">50154287971179831355068443153</span>, <span class="hljs-number">49060507116095861174971467149</span>, <span class="hljs-number">54236848294299624632160521071</span>, <span class="hljs-number">64186626428974976108467196869</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">48</span>):<br>    n+=alist[i]*anum[i]<br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(a))<br>flag=<span class="hljs-string">&#x27;hgame&#123;&#x27;</span>+hashlib.sha256(<span class="hljs-built_in">str</span>(a).encode()).hexdigest()+<span class="hljs-string">&#x27;&#125;&#x27;</span><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>#但是我就是想问为什么这么做啊？</p><p>详见《格理论与密码学》5.3.4 基于格的背包密码学分析，笔者水平有限 T-T</p><h3 id="奇怪的图片plus"><a href="#奇怪的图片plus" class="headerlink" title="奇怪的图片plus"></a>奇怪的图片plus</h3><p>这也是hgame2024四周以来做出人数最少的密码题</p><p>题目太长，抓不到重点，笔者也是反反复复看了四天才发现破解方法，其实没有什么技术上的难度，只不过是思路不好把握。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#client.py</span><br><span class="hljs-keyword">import</span> websocket <span class="hljs-comment"># pip install websocket-client</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image <span class="hljs-comment"># pip install pillow</span><br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">import</span> threading<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">image_to_bytes</span>(<span class="hljs-params">image</span>):<br>    width, height = image.size<br>    pixel_bytes = []<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>            pixel = image.getpixel((x, y))<br>            pixel_bytes.extend(struct.pack(<span class="hljs-string">&#x27;BBB&#x27;</span>, *pixel))<br>    image_bytes = <span class="hljs-built_in">bytes</span>(pixel_bytes)<br>    <span class="hljs-keyword">return</span> image_bytes<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_input</span>(<span class="hljs-params">ws</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            message = <span class="hljs-built_in">input</span>()<br>            <span class="hljs-keyword">if</span> message.lower() == <span class="hljs-string">&#x27;exit&#x27;</span>:<br>                ws.close()<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">elif</span> message.lower() == <span class="hljs-string">&#x27;help&#x27;</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;send_img: send_img &lt;path_to_img_1&gt; &lt;path_to_img_2&gt;&quot;</span>)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;check: check&quot;</span>)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;help: help&quot;</span>)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;exit: exit&quot;</span>)<br>            <span class="hljs-keyword">elif</span> message[:<span class="hljs-number">8</span>] == <span class="hljs-string">&#x27;send_img&#x27;</span>:<br>                <span class="hljs-keyword">try</span>:<br>                    pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;\s(.*?)\s(.*?)$&#x27;</span>)<br>                    <span class="hljs-keyword">match</span> = pattern.search(message)<br>                    <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>:<br>                        path_1 = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>)<br>                        path_2 = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>)<br>                        image_1 = Image.<span class="hljs-built_in">open</span>(path_1)<br>                        image_2 = Image.<span class="hljs-built_in">open</span>(path_2)<br>                        ws.send_binary(<span class="hljs-string">b&quot;B1&quot;</span> + image_1.width.to_bytes(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;big&quot;</span>) + image_1.height.to_bytes(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;big&quot;</span>) + image_to_bytes(image_1))<br>                        ws.send_binary(<span class="hljs-string">b&quot;B2&quot;</span> + image_2.width.to_bytes(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;big&quot;</span>) + image_2.height.to_bytes(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;big&quot;</span>) + image_to_bytes(image_2))<br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-keyword">raise</span> FileNotFoundError(<span class="hljs-string">&quot;Command format error&quot;</span>)<br>                <span class="hljs-keyword">except</span> FileNotFoundError <span class="hljs-keyword">as</span> err:<br>                    <span class="hljs-built_in">print</span>(err)<br>            <span class="hljs-keyword">elif</span> message == <span class="hljs-string">&#x27;check&#x27;</span>:<br>                ws.send_binary(<span class="hljs-string">b&quot;B3&quot;</span>)<br>    <span class="hljs-keyword">except</span> websocket.WebSocketException <span class="hljs-keyword">as</span> err:<br>        <span class="hljs-built_in">print</span>(err)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_recv</span>(<span class="hljs-params">ws</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            msg = ws.recv()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Msg from server: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(msg))<br>    <span class="hljs-keyword">except</span> websocket.WebSocketException <span class="hljs-keyword">as</span> err:<br>        <span class="hljs-built_in">print</span>(err)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># uri = &quot;ws://localhost:10002&quot;</span><br>    uri = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;input uri: &quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;type &#x27;help&#x27; to get help&quot;</span>)<br>    ws = websocket.create_connection(uri)<br>    input_thread = threading.Thread(target=handle_input, args=(ws,), daemon=<span class="hljs-literal">True</span>)<br>    recv_thread = threading.Thread(target=handle_recv, args=(ws,), daemon=<span class="hljs-literal">True</span>)<br>    recv_thread.start()<br>    input_thread.start()<br>    recv_thread.join()<br>    input_thread.join()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#encryption.py</span><br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, ImageFont, ImageDraw<br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">import</span> random<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">image_to_bytes</span>(<span class="hljs-params">image</span>):<br>    width, height = image.size<br>    pixel_bytes = []<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>            pixel = image.getpixel((x, y))<br>            pixel_bytes.extend(struct.pack(<span class="hljs-string">&#x27;BBB&#x27;</span>, *pixel))<br>    image_bytes = <span class="hljs-built_in">bytes</span>(pixel_bytes)<br>    <span class="hljs-keyword">return</span> image_bytes<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bytes_to_image</span>(<span class="hljs-params">image_bytes, width, height</span>):<br>    pixel_bytes = <span class="hljs-built_in">list</span>(image_bytes)<br>    reconstructed_image = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>, (width, height))<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>            start = (y * width + x) * <span class="hljs-number">3</span><br>            pixel = struct.unpack(<span class="hljs-string">&#x27;BBB&#x27;</span>, <span class="hljs-built_in">bytes</span>(pixel_bytes[start:start + <span class="hljs-number">3</span>]))<br>            reconstructed_image.putpixel((x, y), pixel)<br>    <span class="hljs-keyword">return</span> reconstructed_image<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">draw_text</span>(<span class="hljs-params">image, width, height, token</span>):<br>    font_size = <span class="hljs-number">20</span><br>    font = ImageFont.truetype(<span class="hljs-string">&quot;arial.ttf&quot;</span>, font_size)<br>    text_color = (<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>)<br>    x = <span class="hljs-number">0</span><br>    y = (height // <span class="hljs-number">2</span>) - <span class="hljs-number">10</span><br>    draw = ImageDraw.Draw(image)<br>    draw.text((x, y), token, font=font, fill=text_color)<br>    pixels = image.load()<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>            <span class="hljs-keyword">if</span> pixels[x, y] != (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>):<br>                pixels[x, y] = (random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>), random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>), random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>))<br>    <span class="hljs-keyword">return</span> image<br><br><br>flag = <span class="hljs-string">&quot;hgame&#123;fake_flag&#125;&quot;</span><br>flag_image = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>, (<span class="hljs-number">200</span>, <span class="hljs-number">150</span>), <span class="hljs-string">&quot;black&quot;</span>)<br>flag_image = draw_text(flag_image, <span class="hljs-number">200</span>, <span class="hljs-number">150</span>, flag[<span class="hljs-number">6</span>:-<span class="hljs-number">1</span>])<br>key = os.urandom(<span class="hljs-number">16</span>) <span class="hljs-comment"># gift</span><br>iv = os.urandom(<span class="hljs-number">16</span>)<br>F = AES.new(key=key, mode=AES.MODE_OFB, iv=iv)<br>m = pad(image_to_bytes(flag_image), F.block_size)<br>c = F.encrypt(m)<br>encrypted_image = bytes_to_image(c, <span class="hljs-number">200</span>, <span class="hljs-number">150</span>)<br>encrypted_image.save(<span class="hljs-string">&quot;encrypted_flag.png&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#server.py</span><br><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> websockets<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><br><br>gift = <span class="hljs-string">b&#x27;&#x27;</span>.<span class="hljs-built_in">hex</span>() <span class="hljs-comment"># hide here</span><br>pos_list = [] <span class="hljs-comment"># hide here</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bytes_to_image</span>(<span class="hljs-params">image_bytes, width, height</span>):<br>    pixel_bytes = <span class="hljs-built_in">list</span>(image_bytes)<br>    reconstructed_image = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>, (width, height))<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>            start = (y * width + x) * <span class="hljs-number">3</span><br>            pixel = struct.unpack(<span class="hljs-string">&#x27;BBB&#x27;</span>, <span class="hljs-built_in">bytes</span>(pixel_bytes[start:start + <span class="hljs-number">3</span>]))<br>            reconstructed_image.putpixel((x, y), pixel)<br>    <span class="hljs-keyword">return</span> reconstructed_image<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor_images</span>(<span class="hljs-params">image1, image2</span>):<br>    <span class="hljs-keyword">if</span> image1.size != image2.size:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Images must have the same dimensions&quot;</span>)<br>    xor_image = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>, image1.size)<br>    pixels1 = image1.load()<br>    pixels2 = image2.load()<br>    xor_pixels = xor_image.load()<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.size[<span class="hljs-number">0</span>]):<br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.size[<span class="hljs-number">1</span>]):<br>            r1, g1, b1 = pixels1[x, y]<br>            r2, g2, b2 = pixels2[x, y]<br>            xor_pixels[x, y] = (r1 ^ r2, g1 ^ g2, b1 ^ b2)<br>    <span class="hljs-keyword">return</span> xor_image<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_pixels</span>(<span class="hljs-params">image, positions</span>):<br>    pixels = image.load()<br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image.size[<span class="hljs-number">0</span>]):<br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image.size[<span class="hljs-number">1</span>]):<br>            <span class="hljs-keyword">if</span> (x, y) <span class="hljs-keyword">in</span> positions:<br>                <span class="hljs-keyword">if</span> pixels[x, y] != (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>):<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> pixels[x, y] == (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>):<br>                    count += <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">if</span> count == <span class="hljs-number">10</span>:<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_client</span>(<span class="hljs-params">websocket</span>):<br>    <span class="hljs-keyword">await</span> websocket.send(<span class="hljs-string">&quot;Pls send two images that meet the following conditions&quot;</span>)<br>    <span class="hljs-keyword">await</span> websocket.send(<span class="hljs-string">&quot;The black pixels in &#x27;xor_images(image_1, image_2)&#x27; should match those in &#x27;target&#x27;&quot;</span>)<br>    <span class="hljs-keyword">await</span> websocket.send(<span class="hljs-string">&quot;Note: The server has scaling function during validation! XD&quot;</span>)<br>    image_1, image_2 = <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br>    image_1_w, image_1_h, image_2_w, image_2_h = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">for</span> message_raw <span class="hljs-keyword">in</span> websocket:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> message_raw[:<span class="hljs-number">2</span>] == <span class="hljs-string">b&quot;B1&quot;</span>:<br>                image_1_w = <span class="hljs-built_in">int</span>.from_bytes(message_raw[<span class="hljs-number">2</span>:<span class="hljs-number">6</span>], <span class="hljs-string">&quot;big&quot;</span>)<br>                image_1_h = <span class="hljs-built_in">int</span>.from_bytes(message_raw[<span class="hljs-number">6</span>:<span class="hljs-number">10</span>], <span class="hljs-string">&quot;big&quot;</span>)<br>                image_1 = message_raw[<span class="hljs-number">6</span>:]<br>                <span class="hljs-keyword">await</span> websocket.send(<span class="hljs-string">&quot;Image_1 received&quot;</span>)<br>            <span class="hljs-keyword">elif</span> message_raw[:<span class="hljs-number">2</span>] == <span class="hljs-string">b&quot;B2&quot;</span>:<br>                image_2_w = <span class="hljs-built_in">int</span>.from_bytes(message_raw[<span class="hljs-number">2</span>:<span class="hljs-number">6</span>], <span class="hljs-string">&quot;big&quot;</span>)<br>                image_2_h = <span class="hljs-built_in">int</span>.from_bytes(message_raw[<span class="hljs-number">6</span>:<span class="hljs-number">10</span>], <span class="hljs-string">&quot;big&quot;</span>)<br>                image_2 = message_raw[<span class="hljs-number">6</span>:]<br>                <span class="hljs-keyword">await</span> websocket.send(<span class="hljs-string">&quot;Image_2 received&quot;</span>)<br>            <span class="hljs-keyword">elif</span> message_raw[:<span class="hljs-number">2</span>] == <span class="hljs-string">b&quot;B3&quot;</span>:<br>                <span class="hljs-keyword">if</span> image_1 <span class="hljs-keyword">and</span> image_2:<br>                    F = AES.new(key=os.urandom(<span class="hljs-number">16</span>), mode=AES.MODE_ECB)<br>                    image_1_encrypted = bytes_to_image(F.encrypt(pad(image_1, F.block_size)), image_1_w, image_1_h)<br>                    image_2_encrypted = bytes_to_image(F.encrypt(pad(image_2, F.block_size)), image_2_w, image_2_h)<br>                    xor_image = xor_images(image_1_encrypted, image_2_encrypted)<br>                    xor_image = xor_image.resize((<span class="hljs-number">16</span>, <span class="hljs-number">9</span>), Image.NEAREST)<br>                    xor_image.show()<br>                    <span class="hljs-keyword">if</span> check_pixels(xor_image, pos_list):<br>                        <span class="hljs-keyword">await</span> websocket.send(<span class="hljs-string">&quot;Here is your gift: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(gift))<br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-keyword">await</span> websocket.send(<span class="hljs-string">&quot;Verification failed&quot;</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">await</span> websocket.send(<span class="hljs-string">&quot;Pls send two images first!!&quot;</span>)<br>        <span class="hljs-keyword">except</span> ValueError <span class="hljs-keyword">as</span> err:<br>            <span class="hljs-keyword">await</span> websocket.send(err)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    server = <span class="hljs-keyword">await</span> websockets.serve(handle_client, <span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">10002</span>)<br>    <span class="hljs-keyword">await</span> server.wait_closed()<br><br><br>asyncio.run(main())<br><br></code></pre></td></tr></table></figure><p>到底要让我们干什么呢？</p><p>上传两张图片给服务器，服务器会先AES-ECB加密两张图片，然后异或两张加密图片(指异或图片的像素)，最后把得到的图片恢复成16*9，如果这张图片中的黑色像素和target.png完全对应，那么就会给你一个在encryption.py中用到的key，最后用这个key去破解flag。</p><p>突破点是什么？</p><p>其实看来看去，没有什么地方不严谨，最有问题的地方就是用了ecb分块，那就试试从ecb分块入手。</p><p>如果是ecb分块的话，那就意味着原始图片中相同的块加密的结果一定相同，它采用16字节分块，也就意味着每5个像素又一个字节为一组。</p><p>如果是异或图片，那最后的异或结果其实只能是黑色，其他颜色都是不可控的，这也在题目中有所提示，只要求黑色像素对应。</p><p>仔细揣摩一番我们会发现，若想让位置不同但颜⾊相同的像素在加密后都得到相同的结果，我们就要把一个像素扩大为至少六个像素(16个字节)，所以只要上传扩大到800*9的纯黑色图片和同样扩大之后的target.png，经过服务器的resize()，就可以拿到key。</p><p>（贴个官方解吧，我的脚本不见了）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, ImageDraw<br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor</span>(<span class="hljs-params">a, b</span>):<br>result = <span class="hljs-built_in">bytes</span>(x ^ y <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a, b))<br><span class="hljs-keyword">return</span> result<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor_images</span>(<span class="hljs-params">image1, image2</span>):<br><span class="hljs-keyword">if</span> image1.size != image2.size:<br><span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Images must have the same dimensions.&quot;</span>)<br>    xor_image = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>, image1.size)<br>    pixels1 = image1.load()<br>    pixels2 = image2.load()<br>    xor_pixels = xor_image.load()<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.size[<span class="hljs-number">0</span>]):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.size[<span class="hljs-number">1</span>]):<br>    r1, g1, b1 = pixels1[x, y]<br>    r2, g2, b2 = pixels2[x, y]<br>    xor_pixels[x, y] = (r1 ^ r2, g1 ^ g2, b1 ^ b2)<br>    <span class="hljs-keyword">return</span> xor_image<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">image_to_bytes</span>(<span class="hljs-params">image</span>):<br>    width, height = image.size<br>    pixel_bytes = []<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>    pixel = image.getpixel((x, y))<br>    pixel_bytes.extend(struct.pack(<span class="hljs-string">&#x27;BBB&#x27;</span>, *pixel))<br>    image_bytes = <span class="hljs-built_in">bytes</span>(pixel_bytes)<br>    <span class="hljs-keyword">return</span> image_bytes<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bytes_to_image</span>(<span class="hljs-params">image_bytes, width, height</span>):<br>pixel_bytes = <span class="hljs-built_in">list</span>(image_bytes)<br>reconstructed_image = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>, (width, height))<br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>start = (y * width + x) * <span class="hljs-number">3</span><br>pixel = struct.unpack(<span class="hljs-string">&#x27;BBB&#x27;</span>, <span class="hljs-built_in">bytes</span>(pixel_bytes[start:start + <span class="hljs-number">3</span>]))<br>reconstructed_image.putpixel((x, y), pixel)<br><span class="hljs-keyword">return</span> reconstructed_image<br><span class="hljs-comment"># black pixels in target.png</span><br>pos_list = [(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">5</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">6</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">7</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">1</span>),<br>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">5</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">6</span>), (<span class="hljs-number">4</span>,<br><span class="hljs-number">7</span>), (<span class="hljs-number">6</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">6</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">6</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">6</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">6</span>, <span class="hljs-number">5</span>), (<span class="hljs-number">6</span>, <span class="hljs-number">6</span>), (<span class="hljs-number">6</span>, <span class="hljs-number">7</span>), (<span class="hljs-number">7</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">7</span>, <span class="hljs-number">4</span>),<br>(<span class="hljs-number">7</span>, <span class="hljs-number">7</span>), (<span class="hljs-number">8</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">8</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">8</span>, <span class="hljs-number">7</span>), (<span class="hljs-number">9</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">9</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">9</span>, <span class="hljs-number">7</span>), (<span class="hljs-number">11</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">11</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">11</span>,<br><span class="hljs-number">7</span>), (<span class="hljs-number">12</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">12</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">12</span>, <span class="hljs-number">7</span>), (<span class="hljs-number">13</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">13</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">13</span>, <span class="hljs-number">7</span>), (<span class="hljs-number">14</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">14</span>, <span class="hljs-number">5</span>),<br>(<span class="hljs-number">14</span>, <span class="hljs-number">6</span>)]<br>image_1 = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>, (<span class="hljs-number">16</span>, <span class="hljs-number">9</span>), <span class="hljs-string">&quot;black&quot;</span>)<br>image_2 = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>, (<span class="hljs-number">16</span>, <span class="hljs-number">9</span>), <span class="hljs-string">&quot;white&quot;</span>)<br>draw_1 = ImageDraw.Draw(image_1)<br>draw_2 = ImageDraw.Draw(image_2)<br><span class="hljs-keyword">for</span> pos <span class="hljs-keyword">in</span> pos_list:<br>draw_1.point(pos, (<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>))<br>draw_2.point(pos, (<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>))<br>image_1 = image_1.resize((<span class="hljs-number">48</span> * <span class="hljs-number">16</span>, <span class="hljs-number">48</span> * <span class="hljs-number">9</span>), Image.NEAREST)<br>image_2 = image_2.resize((<span class="hljs-number">48</span> * <span class="hljs-number">16</span>, <span class="hljs-number">48</span> * <span class="hljs-number">9</span>), Image.NEAREST)<br>image_1.save(<span class="hljs-string">&quot;image_1.png&quot;</span>)<br>image_2.save(<span class="hljs-string">&quot;image_2.png&quot;</span>)<br></code></pre></td></tr></table></figure><p>Msg from server: Here is your gift: 8693346e81fa05d8817fd2550455cdf6</p><p>第二步就相对简单很多</p><p><img src="/pic/10.png" alt="img"></p><p>由ofb模式我们发现，我们已知部分明文，那么将明文前16字节和密文前16字节异或就是加密一次的iv向量，且key已知，我们就有办法解密出原始的iv向量。</p><p>还是上官方解，，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor</span>(<span class="hljs-params">a, b</span>):<br>    result = <span class="hljs-built_in">bytes</span>(x ^ y <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a, b))<br>    <span class="hljs-keyword">return</span> result<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">image_to_bytes</span>(<span class="hljs-params">image</span>):<br>    width, height = image.size<br>    pixel_bytes = []<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>    pixel = image.getpixel((x, y))<br>    pixel_bytes.extend(struct.pack(<span class="hljs-string">&#x27;BBB&#x27;</span>, *pixel))<br>    image_bytes = <span class="hljs-built_in">bytes</span>(pixel_bytes)<br>    <span class="hljs-keyword">return</span> image_bytes<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bytes_to_image</span>(<span class="hljs-params">image_bytes, width, height</span>):<br>    pixel_bytes = <span class="hljs-built_in">list</span>(image_bytes)<br>    reconstructed_image = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>, (width, height))<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>    start = (y * width + x) * <span class="hljs-number">3</span><br>    pixel = struct.unpack(<span class="hljs-string">&#x27;BBB&#x27;</span>, <span class="hljs-built_in">bytes</span>(pixel_bytes[start:start + <span class="hljs-number">3</span>]))<br>    reconstructed_image.putpixel((x, y), pixel)<br>    <span class="hljs-keyword">return</span> reconstructed_image<br>key = <span class="hljs-string">b&#x27;\x86\x934n\x81\xfa\x05\xd8\x81\x7f\xd2U\x04U\xcd\xf6&#x27;</span> <span class="hljs-comment"># gift</span><br>encrypted_image = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;encrypted_flag.png&quot;</span>)<br>c = image_to_bytes(encrypted_image)<br>iv_ = xor(c[:<span class="hljs-number">16</span>], <span class="hljs-string">b&quot;\x00&quot;</span> * <span class="hljs-number">16</span>)<br>F = AES.new(key=key, mode=AES.MODE_OFB, iv=iv_)<br>m_ = F.decrypt(c[<span class="hljs-number">16</span>:])<br>bytes_to_image((<span class="hljs-string">b&quot;\x00&quot;</span> * <span class="hljs-number">16</span>) + m_, <span class="hljs-number">200</span>, <span class="hljs-number">150</span>).show()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
      <tag>Web</tag>
      
      <tag>Misc</tag>
      
      <tag>Hgame</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-Hgame-week1-wp-crypto</title>
    <link href="/2024/02/25/2024-Hgame-week1-wp-crypto/"/>
    <url>/2024/02/25/2024-Hgame-week1-wp-crypto/</url>
    
    <content type="html"><![CDATA[<h1 id="2024-Hgame-week1-wp-crypto"><a href="#2024-Hgame-week1-wp-crypto" class="headerlink" title="2024-Hgame-week1-wp-crypto"></a>2024-Hgame-week1-wp-crypto</h1><p>简单写写。</p><h3 id="ezRSA"><a href="#ezRSA" class="headerlink" title="ezRSA"></a>ezRSA</h3><p>题目描述：一个简单的RSA</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br>m=bytes_to_long(flag)<br>p=getPrime(<span class="hljs-number">1024</span>)<br>q=getPrime(<span class="hljs-number">1024</span>)<br>n=p*q<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>e=<span class="hljs-number">0x10001</span><br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br>leak1=<span class="hljs-built_in">pow</span>(p,q,n)<br>leak2=<span class="hljs-built_in">pow</span>(q,p,n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;leak1=<span class="hljs-subst">&#123;leak1&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;leak2=<span class="hljs-subst">&#123;leak2&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c=<span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">leak1=149127170073611271968182576751290331559018441805725310426095412837589227670757540743929865853650399839102838431507200744724939659463200158012469676979987696419050900842798225665861812331113632892438742724202916416060266581590169063867688299288985734104127632232175657352697898383441323477450658179727728908669</span><br><span class="hljs-string">leak2=116122992714670915381309916967490436489020001172880644167179915467021794892927977272080596641785569119134259037522388335198043152206150259103485574558816424740204736215551933482583941959994625356581201054534529395781744338631021423703171146456663432955843598548122593308782245220792018716508538497402576709461</span><br><span class="hljs-string">c=10529481867532520034258056773864074017027019578041866245400647840230251661652999709715919620810933437191661180003295923273655675729588558899592524235622728816065501918076120812236580344991140980991532347991252705288633014913479970610056845543523591324177567061948922552275235486615514913932125436543991642607028689762693617305246716492783116813070355512606971626645594961850567586340389705821314842096465631886812281289843132258131809773797777049358789182212570606252509790830994263132020094153646296793522975632191912463919898988349282284972919932761952603379733234575351624039162440021940592552768579639977713099971</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>$p$和$q$互素，所以由费马小定理<br>$$<br>p^{q-1} \equiv 1 \quad(\bmod q)<br>$$<br>转化一下。<br>$$<br>p^{q} \equiv p \quad(\bmod pq)<br>$$<br>所以leak1&#x3D;p， leak2&#x3D;q.</p><p>比较简单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>leak1=<span class="hljs-number">1491271700736112719681825767512903315590184418057253104260954128375892276</span><br><span class="hljs-number">7075754074392986585365039983910283843150720074472493965946320015801246967697998</span><br><span class="hljs-number">7696419050900842798225665861812331113632892438742724202916416060266581590169063</span><br><span class="hljs-number">867688299288985734104127632232175657352697898383441323477450658179727728908669</span><br>leak2=<span class="hljs-number">1161229927146709153813099169674904364890200011728806441671799154670217948</span><br><span class="hljs-number">9292797727208059664178556911913425903752238833519804315220615025910348557455881</span><br><span class="hljs-number">6424740204736215551933482583941959994625356581201054534529395781744338631021423</span><br><span class="hljs-number">703171146456663432955843598548122593308782245220792018716508538497402576709461</span><br>c=<span class="hljs-number">10529481867532520034258056773864074017027019578041866245400647840230251661652</span><br><span class="hljs-number">9997097159196208109334371916611800032959232736556757295885588995925242356227288</span><br><span class="hljs-number">1606550191807612081223658034499114098099153234799125270528863301491347997061005</span><br><span class="hljs-number">6845543523591324177567061948922552275235486615514913932125436543991642607028689</span><br><span class="hljs-number">7626936173052467164927831168130703555126069716266455949618505675863403897058213</span><br><span class="hljs-number">1484209646563188681228128984313225813180977379777704935878918221257060625250979</span><br>0830994263132020094153646296793522975632191912463919898988349282284972919932761<br><span class="hljs-number">952603379733234575351624039162440021940592552768579639977713099971</span><br>n=leak1*leak2<br>phi=(leak1-<span class="hljs-number">1</span>)*(leak2-<span class="hljs-number">1</span>)<br>d=inverse(<span class="hljs-number">0x10001</span>,phi)<br>flag=long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,n))<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h3 id="ezMath"><a href="#ezMath" class="headerlink" title="ezMath"></a>ezMath</h3><p>题目描述：一个简单的数学题</p><p>pell方程与连分数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> random,string<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag,y,x<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pad</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x+<span class="hljs-string">b&#x27;\x00&#x27;</span>*(<span class="hljs-number">16</span>-<span class="hljs-built_in">len</span>(x)%<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">KEY</span>):<br>    cipher= AES.new(KEY,AES.MODE_ECB)<br>    encrypted =cipher.encrypt(flag)<br>    <span class="hljs-keyword">return</span> encrypted<br>D = <span class="hljs-number">114514</span><br><span class="hljs-keyword">assert</span> x**<span class="hljs-number">2</span> - D * y**<span class="hljs-number">2</span> == <span class="hljs-number">1</span><br>flag=pad(flag)<br>key=pad(long_to_bytes(y))[:<span class="hljs-number">16</span>]<br>enc=encrypt(key)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;enc=<span class="hljs-subst">&#123;enc&#125;</span>&#x27;</span>)<br><span class="hljs-comment">#enc=b&quot;\xce\xf1\x94\x84\xe9m\x88\x04\xcb\x9ad\x9e\x08b\xbf\x8b\xd3\r\xe2\x81\x17g\x9c\xd7\x10\x19\x1a\xa6\xc3\x9d\xde\xe7\xe0h\xed/\x00\x95tz)1\\\t8:\xb1,U\xfe\xdec\xf2h\xab`\xe5&#x27;\x93\xf8\xde\xb2\x9a\x9a&quot;</span><br></code></pre></td></tr></table></figure><p>引用一下oiwiki。</p><p><a href="https://oi-wiki.org/math/number-theory/pell-equation/">Pell 方程 - OI Wiki (oi-wiki.org)</a></p><p>定理：记 $x^{2}-D y^{2}&#x3D;s$。如果有$|s|&lt;\sqrt{D}$，则$\frac{x}{y}$ 一定是$\sqrt{D}$的渐进分数。</p><p>证明：分情况讨论。</p><p>当$s&gt;0$时，根据，$x^{2}-D y^{2}&gt;0$，有$x&gt;y\sqrt{D}$。并且有<br>$$<br>\begin{aligned}\left|\frac xy-\sqrt{D}\right|&amp;&#x3D;\frac s{y(x+y\sqrt{D})}&lt;\frac s{2y^2\sqrt{D}}&lt;\frac1{2y^2}\end{aligned}<br>$$<br>此时根据勒让德判别法，$\frac{x}{y}$是$\sqrt{D}$的渐进分数。</p><p>#怎么判别的？</p><p><img src="/pic/8.png" alt="img"></p><p>摘自《公钥密码学的数学基础》。</p><p>所以直接在sagemath跑连分数即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br>enc=<span class="hljs-string">b&quot;\xce\xf1\x94\x84\xe9m\x88\x04\xcb\x9ad\x9e\x08b\xbf\x8b\xd3\r\xe2\x81\x17</span><br><span class="hljs-string">g\x9c\xd7\x10\x19\x1a\xa6\xc3\x9d\xde\xe7\xe0h\xed/\x00\x95tz)1\\\t8:\xb1,U\xfe</span><br><span class="hljs-string">\xdec\xf2h\xab`\xe5&#x27;\x93\xf8\xde\xb2\x9a\x9a&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve_pell</span>(<span class="hljs-params">N, num = <span class="hljs-number">100</span></span>):<br>c = continued_fraction(sqrt(N))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>y = c.denominator(i)<br>x = c.numerator(i)<br><span class="hljs-keyword">if</span> x^<span class="hljs-number">2</span> - N * y^<span class="hljs-number">2</span> == <span class="hljs-number">1</span>:<br><span class="hljs-keyword">return</span> x, y<br><span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pad</span>(<span class="hljs-params">x</span>):<br><span class="hljs-keyword">return</span> x+<span class="hljs-string">b&#x27;\x00&#x27;</span>*((<span class="hljs-number">16</span>-<span class="hljs-built_in">len</span>(x))%<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">KEY</span>):<br>cipher= AES.new(KEY,AES.MODE_ECB)<br>flag =cipher.decrypt(enc)<br><span class="hljs-keyword">return</span> flag<br>N = <span class="hljs-number">114514</span><br>x,y=solve_pell(N)<br><span class="hljs-built_in">print</span>(x,y)<br>y=pad(long_to_bytes(y))[:<span class="hljs-number">16</span>]<br>flag=decrypt(y)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h3 id="ezPRNG"><a href="#ezPRNG" class="headerlink" title="ezPRNG"></a>ezPRNG</h3><p>题目描述：一个简单的随机数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">PRNG</span>(<span class="hljs-params">R,mask</span>):<br>    nextR = (R &lt;&lt; <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xffffffff</span><br>    i=(R&amp;mask)&amp;<span class="hljs-number">0xffffffff</span><br>    nextbit=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i!=<span class="hljs-number">0</span>:<br>        nextbit^=(i%<span class="hljs-number">2</span>)<br>        i=i//<span class="hljs-number">2</span><br>    nextR^=nextbit <br>    <span class="hljs-keyword">return</span> (nextR,nextbit)<br><br>R=<span class="hljs-built_in">str</span>(uuid.uuid4())<br>flag=<span class="hljs-string">&#x27;hgame&#123;&#x27;</span>+R+<span class="hljs-string">&#x27;&#125;&#x27;</span><br><span class="hljs-built_in">print</span>(flag)<br>R=R.replace(<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>Rlist=[<span class="hljs-built_in">int</span>(R[i*<span class="hljs-number">8</span>:i*<span class="hljs-number">8</span>+<span class="hljs-number">8</span>],<span class="hljs-number">16</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br><br>mask=<span class="hljs-number">0b10001001000010000100010010001001</span><br>output=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    R=Rlist[i]<br>    out=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>        (R,nextbit)=PRNG(R,mask)<br>        out+=<span class="hljs-built_in">str</span>(nextbit)<br>    output.append(out)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;output=<span class="hljs-subst">&#123;output&#125;</span>&#x27;</span>)<br><span class="hljs-comment">#output=[&#xx27;, &#xx27;, &#xx27;, &#xx27;]</span><br></code></pre></td></tr></table></figure><p><a href="https://www.anquanke.com/post/id/181811">深入分析CTF中的LFSR类题目（一）-安全客 - 安全资讯平台 (anquanke.com)</a></p><p>几乎是原题。</p><p>上面的链接其实讲的很清楚了hh，我就不东施效颦了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>output=[<span class="hljs-string">&#x27;1111110110111011110000101011010001000111111001111110100101000011110111111100010000111110110111100001001000101101011110111100010010100000011111101101110101011010111000000011110000100011101111011011000100101100110100101110001010001101101110000010001000111100101010010110110111101110011011001011111011010101011000011011000111011011111001101010111100101100110001011010010101110011101001100111000011110111000001101110000001111100000100000101111100010110111001110011010000011011110110011000001101011111111010110011010111010101001000010011110110011110110101011110111010011010010110111111010011101000110101111101111000110011111110010110000100100100101101010101110010101001101010101011110111010011101110000100101111010110101111110001111111110010000000001110011100100001011111110100111011000101001101001110010010001100011000001101000111010010000101101111101011000000101000001110001011001010010001000011000000100010010010010111010011111111011100100100100101111111001110000111110110001111001111100101001001100010&#x27;</span>, <span class="hljs-string">&#xx27;</span>, <span class="hljs-string">&#xx27;</span>, <span class="hljs-string">&#xx27;</span>]<br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    R = <span class="hljs-string">&#x27;&#x27;</span><br>    key=(output[j])[:<span class="hljs-number">32</span>]<br>    temp=key<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        out = <span class="hljs-string">&#x27;?&#x27;</span>+key[:<span class="hljs-number">31</span>]<br>        ans=<span class="hljs-built_in">int</span>(temp[-<span class="hljs-number">1</span>-i])^<span class="hljs-built_in">int</span>(out[-<span class="hljs-number">1</span>])^<span class="hljs-built_in">int</span>(out[-<span class="hljs-number">4</span>])^<span class="hljs-built_in">int</span>(out[-<span class="hljs-number">8</span>])^<span class="hljs-built_in">int</span>(out[-<span class="hljs-number">11</span>])^<span class="hljs-built_in">int</span>(out[-<span class="hljs-number">15</span>])^<span class="hljs-built_in">int</span>(out[-<span class="hljs-number">20</span>])^<span class="hljs-built_in">int</span>(out[-<span class="hljs-number">25</span>])^<span class="hljs-built_in">int</span>(out[-<span class="hljs-number">28</span>])<br>        R += <span class="hljs-built_in">str</span>(ans)<br>        key = <span class="hljs-built_in">str</span>(ans) + key[:<span class="hljs-number">31</span>]<br>    R = <span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(R[::-<span class="hljs-number">1</span>],<span class="hljs-number">2</span>),<span class="hljs-string">&#x27;x&#x27;</span>)<br>    flag+=R<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hgame&#123;&#x27;</span>+flag+<span class="hljs-string">&#x27;&#125;&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="奇怪的图片"><a href="#奇怪的图片" class="headerlink" title="奇怪的图片"></a>奇怪的图片</h3><p>这题挺有意思，包括后面那个奇怪的图片plus，我觉得都很好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, ImageDraw, ImageFont<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> secrets<br><br><br>flag = <span class="hljs-string">&quot;hgame&#123;fake_flag&#125;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_random_image</span>(<span class="hljs-params">width, height</span>):<br>    image = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>, (width, height), <span class="hljs-string">&quot;white&quot;</span>)<br>    pixels = image.load()<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>            red = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)<br>            green = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)<br>            blue = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)<br>            pixels[x, y] = (red, green, blue)<br>    <span class="hljs-keyword">return</span> image<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">draw_text</span>(<span class="hljs-params">image, width, height, token</span>):<br>    font_size = random.randint(<span class="hljs-number">16</span>, <span class="hljs-number">40</span>)<br>    font = ImageFont.truetype(<span class="hljs-string">&quot;arial.ttf&quot;</span>, font_size)<br>    text_color = (random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>), random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>), random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>))<br>    x = random.randint(<span class="hljs-number">0</span>, width - font_size * <span class="hljs-built_in">len</span>(token))<br>    y = random.randint(<span class="hljs-number">0</span>, height - font_size)<br>    draw = ImageDraw.Draw(image)<br>    draw.text((x, y), token, font=font, fill=text_color)<br>    <span class="hljs-keyword">return</span> image<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor_images</span>(<span class="hljs-params">image1, image2</span>):<br>    <span class="hljs-keyword">if</span> image1.size != image2.size:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Images must have the same dimensions.&quot;</span>)<br>    xor_image = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>, image1.size)<br>    pixels1 = image1.load()<br>    pixels2 = image2.load()<br>    xor_pixels = xor_image.load()<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.size[<span class="hljs-number">0</span>]):<br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.size[<span class="hljs-number">1</span>]):<br>            r1, g1, b1 = pixels1[x, y]<br>            r2, g2, b2 = pixels2[x, y]<br>            xor_pixels[x, y] = (r1 ^ r2, g1 ^ g2, b1 ^ b2)<br>    <span class="hljs-keyword">return</span> xor_image<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_unique_strings</span>(<span class="hljs-params">n, length</span>):<br>    unique_strings = <span class="hljs-built_in">set</span>()<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(unique_strings) &lt; n:<br>        random_string = secrets.token_hex(length // <span class="hljs-number">2</span>)<br>        unique_strings.add(random_string)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(unique_strings)<br><br><br>random_strings = generate_unique_strings(<span class="hljs-built_in">len</span>(flag), <span class="hljs-number">8</span>)<br><br><br>current_image = generate_random_image(<span class="hljs-number">120</span>, <span class="hljs-number">80</span>)<br>key_image = generate_random_image(<span class="hljs-number">120</span>, <span class="hljs-number">80</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">random_time</span>(<span class="hljs-params">image, name</span>):<br>    time.sleep(random.random())<br>    image.save(<span class="hljs-string">&quot;.\\png_out\\&#123;&#125;.png&quot;</span>.<span class="hljs-built_in">format</span>(name))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>    current_image = draw_text(current_image, <span class="hljs-number">120</span>, <span class="hljs-number">80</span>, flag[i])<br>    threading.Thread(target=random_time, args=(xor_images(current_image, key_image), random_strings[i])).start()<br><br></code></pre></td></tr></table></figure><p>大概意思就是</p><p>一张图片，写上一个字，和未知的图片异或，输出。</p><p>然后这张写上一个字的图片，再写上一个字，再和未知图片异或，输出。</p><p>以此类推。</p><p>所以想破解就把一张图片和其他所有图片异或，观察字母的增减即可得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, ImageDraw, ImageFont<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> secrets<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor_images</span>(<span class="hljs-params">image1, image2</span>):<span class="hljs-comment">#图片异或？</span><br>    <span class="hljs-keyword">if</span> image1.size != image2.size:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Images must have the same dimensions.&quot;</span>)<br>    xor_image = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>, image1.size)<br>    pixels1 = image1.load()<br>    pixels2 = image2.load()<br>    xor_pixels = xor_image.load()<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.size[<span class="hljs-number">0</span>]):<br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.size[<span class="hljs-number">1</span>]):<br>            r1, g1, b1 = pixels1[x, y]<br>            r2, g2, b2 = pixels2[x, y]<br>            xor_pixels[x, y] = (r1 ^ r2, g1 ^ g2, b1 ^ b2)<br>    <span class="hljs-keyword">return</span> xor_image<br><span class="hljs-built_in">list</span> = []<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;2.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;3.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;4.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;5.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;6.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;7.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;8.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;9.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;10.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;11.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;12.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;13.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;14.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;15.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;16.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;17.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;18.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;19.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;20.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;21.png&#x27;</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">21</span>):<br>    xor_images(<span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>],<span class="hljs-built_in">list</span>[i]).save(<span class="hljs-string">&quot;1+&quot;</span>+<span class="hljs-built_in">str</span>(i+<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;.png&quot;</span>)<br></code></pre></td></tr></table></figure><p>这段代码就是一张图片和其他所有图片异或。</p><p>大概效果</p><p><img src="/pic/9.png" alt="img"></p><p>然后找出顺序，前后彼此异或，就能看到flag了，可能是反的，应该看的出来吧（</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, ImageDraw, ImageFont<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> secrets<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor_images</span>(<span class="hljs-params">image1, image2</span>):<span class="hljs-comment">#图片异或？</span><br>    <span class="hljs-keyword">if</span> image1.size != image2.size:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Images must have the same dimensions.&quot;</span>)<br>    xor_image = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>, image1.size)<br>    pixels1 = image1.load()<br>    pixels2 = image2.load()<br>    xor_pixels = xor_image.load()<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.size[<span class="hljs-number">0</span>]):<br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.size[<span class="hljs-number">1</span>]):<br>            r1, g1, b1 = pixels1[x, y]<br>            r2, g2, b2 = pixels2[x, y]<br>            xor_pixels[x, y] = (r1 ^ r2, g1 ^ g2, b1 ^ b2)<br>    <span class="hljs-keyword">return</span> xor_image<br><span class="hljs-built_in">list</span> = []<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;2.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;3.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;4.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;5.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;6.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;7.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;8.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;9.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;10.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;11.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;12.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;13.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;14.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;15.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;16.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;17.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;18.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;19.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;20.png&#x27;</span>))<br><span class="hljs-built_in">list</span>.append(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;21.png&#x27;</span>))<br>numlist = [<span class="hljs-number">14</span>,<span class="hljs-number">11</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">8</span>,<span class="hljs-number">17</span>,<span class="hljs-number">5</span>,<span class="hljs-number">18</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>,<span class="hljs-number">16</span>,<span class="hljs-number">13</span>,<span class="hljs-number">19</span>,<span class="hljs-number">12</span>,<span class="hljs-number">9</span>,<span class="hljs-number">21</span>,<span class="hljs-number">15</span>,<span class="hljs-number">20</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>    xor_images(<span class="hljs-built_in">list</span>[numlist[i]-<span class="hljs-number">1</span>],<span class="hljs-built_in">list</span>[numlist[i+<span class="hljs-number">1</span>]-<span class="hljs-number">1</span>]).save(<span class="hljs-built_in">str</span>(numlist[i])+<span class="hljs-string">&quot;+&quot;</span>+<span class="hljs-built_in">str</span>(numlist[i+<span class="hljs-number">1</span>])+<span class="hljs-string">&quot;.png&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
      <tag>Web</tag>
      
      <tag>Misc</tag>
      
      <tag>Hgame</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录</title>
    <link href="/2024/02/24/%E6%9C%80%E8%BF%91/"/>
    <url>/2024/02/24/%E6%9C%80%E8%BF%91/</url>
    
    <content type="html"><![CDATA[<h1 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h1><p>本篇放一点碎碎念吧，太久没更新了，本文置顶。</p><p>如果看到的小伙伴可以在下面点点评论，，这对我是莫大的鼓励</p><h4 id="2024-2-24"><a href="#2024-2-24" class="headerlink" title="2024&#x2F;2&#x2F;24"></a>2024&#x2F;2&#x2F;24</h4><p>尝试hexoplusplus未能成功，发现hpp的时间可能还超过了静态部署的时间，故放弃了。</p><p>假期前雄心壮志地想写博客，但是也没人看啊，加上我自己也很懒，就没有写。</p><p>决定在这两周内给博客上个评论的功能。</p><p>预期会在hgame week4后更新一篇hgame crypto writeup。</p><h4 id="2024-2-25"><a href="#2024-2-25" class="headerlink" title="2024&#x2F;2&#x2F;25"></a>2024&#x2F;2&#x2F;25</h4><p>简单上个twikoo</p><p>决定把hgame分成四篇 这样推送会好看一些（XD</p><p>拙劣模仿一下我很喜欢的一个密码手的博客</p><p>更新了2024-Hgame-week1-wp-crypto</p><p>最近要出道适中难度的题目，，</p><p>更新了2024-Hgame-week2-wp-crypto</p><p>更新了2024-Hgame-week3-wp-crypto</p><h4 id="2024-3-20"><a href="#2024-3-20" class="headerlink" title="2024&#x2F;3&#x2F;20"></a>2024&#x2F;3&#x2F;20</h4><p>哎 一个月过去了。。。</p><p>月底要去天津打铁三 这个月非常忙，，，</p><p>而且博客没什么人看，所以就不怎么更新了。。。</p><p>月初给招新赛出了题 差点双0解了。。。哈人</p><p>好像还打了cavd？两道纯纯的原题。</p><p>打了下vctf 很简单的两道密码题 不好评价了。简单写一下吧</p><p>hgame week4还没更新 更一下</p><p>也许应该开一个渗透专栏？但是我的渗透简直就是依托大粪。。。</p><p>天哪 我上个月居然一口气更新了三篇 我简直是生产队的驴。。。</p><p>我好像想起来我为什么不更新了 因为当时天璇招新的时候挪用了week4的题目（其实只是挪用了第一部分）所以当时就没有更新（加上当时hgame的题解也比较少就没有更新）后来就忘了这回事了</p><p>后续会端上nkctf和铁三 欢迎关注。</p><h4 id="2024-3-21"><a href="#2024-3-21" class="headerlink" title="2024&#x2F;3&#x2F;21"></a>2024&#x2F;3&#x2F;21</h4><p>更新了一篇美文 转自aidai</p>]]></content>
    
    
    
    <tags>
      
      <tag>live</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IEEE754协议之非数NaN——从一道活动题讲起</title>
    <link href="/2023/10/14/IEEE754%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%9D%9E%E6%95%B0NaN%E2%80%94%E2%80%94%E4%BB%8E%E4%B8%80%E9%81%93%E6%B4%BB%E5%8A%A8%E9%A2%98%E8%AE%B2%E8%B5%B7/"/>
    <url>/2023/10/14/IEEE754%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%9D%9E%E6%95%B0NaN%E2%80%94%E2%80%94%E4%BB%8E%E4%B8%80%E9%81%93%E6%B4%BB%E5%8A%A8%E9%A2%98%E8%AE%B2%E8%B5%B7/</url>
    
    <content type="html"><![CDATA[<h4 id="事情要从一道北邮百团大战的娱乐题讲起…"><a href="#事情要从一道北邮百团大战的娱乐题讲起…" class="headerlink" title="事情要从一道北邮百团大战的娱乐题讲起…."></a>事情要从一道北邮百团大战的娱乐题讲起….</h4><p><img src="/pic/1.png" alt="img"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> random<br>password = random.random()<br>val = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (val &gt; password) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> (val &lt; password):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome to my blog&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Access denied&quot;</span>)<br></code></pre></td></tr></table></figure><p>当时我心想，娱乐题而已，应该很简单吧，结果就是做了一个下午没想出来…</p><p>中途有过多种尝试…但是还是不行…</p><p>最后纯真学长告诉我去看ieee754，我这才幡然醒悟…</p><p>实在是符合我对百团活动脑筋急转弯的刻板印象，令人感叹。</p><p>引以为戒，另外网上对于NaN的资料比较零散，我的第一篇博客就献给ieee754吧。</p><p>作者水平有限，多多包涵。XD</p><h4 id="IEEE754是什么？"><a href="#IEEE754是什么？" class="headerlink" title="IEEE754是什么？"></a>IEEE754是什么？</h4><p>简而言之，IEEE754是一种用于二进制浮点数运算的标准，它定义了浮点数的表示方法、运算规则和格式。是美国电子和电气工程师协会（Institute of Electrical and Electronics Engineers，简称IEEE）制定的。</p><p>我们今天的主角NaN(not a number)非数，就来自于IEEE754。</p><p>IEEE 754标准定义了两种主要的浮点数格式：</p><ol><li>单精度（单精度浮点数）：使用32位二进制位表示一个浮点数，其中1位表示符号（正数或负数），8位表示指数（指数部分），剩下的23位表示尾数（尾数部分）。</li><li>双精度（双精度浮点数）：使用64位二进制位表示一个浮点数，其中1位表示符号，11位表示指数，剩下的52位表示尾数。</li></ol><p>关于IEEE754的移码，真值等详细规则，网上的大牛们已经写的很好了，我就不复制粘贴了…</p><p><a href="https://blog.csdn.net/weixin_47713503/article/details/108699001">clickme</a></p><h4 id="NaN是什么？"><a href="#NaN是什么？" class="headerlink" title="NaN是什么？"></a>NaN是什么？</h4><p>NaN是未定义或无法表示的数据类型的特定值。</p><p>例如0&#x2F;0通常无定义，就可以用NaN来表示。</p><p>实数域内负数平方根无解，负数对数结果复杂，反余弦&#x2F;正弦定义域小于-1或大于1，亦可用NaN表示。</p><p>正负无穷大，NaN参与计算时，计算结果常常用NaN来表示。</p><p>众所周知，两个实数之间只有小于，大于，等于三种可能关系，但是一旦一个操作数为NaN时，就必须引入所谓的<strong>无序</strong>关系。</p><p>下面给出NaN与任何浮点值，NaN，正负无穷的比较。</p><table><thead><tr><th align="center">比较</th><th align="left">NaN≥ x</th><th align="left">NaN ≤ <em>x</em></th><th>NaN &gt; <em>x</em></th><th>NaN &gt; <em>x</em></th><th>NaN &#x3D; <em>x</em></th><th>NaN ≠ <em>x</em></th></tr></thead><tbody><tr><td align="center">结果</td><td align="left">False</td><td align="left">False</td><td>False</td><td>False</td><td>False</td><td>True</td></tr></tbody></table><p>显然，这道脑筋急转弯就利用了NaN与任何数做大小比较都为False的特性。</p><p>同理，在IEEE754中，NaN也是唯一一个自身不等于自身的“数”，唯一一个不等于任何数的数，需注意，与常规数学定义不同的是，float“inf“（即无穷大）也等于自身。</p><p><strong>所以这题的答案即为NaN。</strong></p><p>一道知识面题，会的会，不会的不会，令人感叹。</p><p>下面给出INF（无穷大）的比较。</p><table><thead><tr><th align="center">比较</th><th>INF&gt;&#x3D;x(x≠INF)</th><th>INF&lt;&#x3D;x(x≠INF)</th><th>INF&gt;x(x≠INF)</th><th>INF&lt;x(x≠INF)</th><th>INF&#x3D;x(x≠INF)</th><th align="left">INF≠x(x≠INF)</th></tr></thead><tbody><tr><td align="center">结果</td><td>True</td><td>False</td><td>True</td><td>False</td><td>False</td><td align="left">True</td></tr><tr><td align="center">比较</td><td>INF&gt;&#x3D;INF</td><td>INF&lt;&#x3D;INF</td><td>INF&gt;INF</td><td>INF&lt;INF</td><td>INF&#x3D;INF</td><td align="left">INF≠INF</td></tr><tr><td align="center">结果</td><td>True</td><td>True</td><td>False</td><td>False</td><td>True</td><td align="left">False</td></tr></tbody></table><p><strong>持续写作，欢迎关注。</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
      <tag>Misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PYTHOK的writeup TSCTF-J 2023</title>
    <link href="/2023/09/25/PYTHOK%E7%9A%84writeup%20TSCTF-J%202023/"/>
    <url>/2023/09/25/PYTHOK%E7%9A%84writeup%20TSCTF-J%202023/</url>
    
    <content type="html"><![CDATA[<h1 id="PYTHOK的writeup-TSCTF-J-2023"><a href="#PYTHOK的writeup-TSCTF-J-2023" class="headerlink" title="PYTHOK的writeup TSCTF-J 2023"></a>PYTHOK的writeup TSCTF-J 2023</h1><p>本篇wp包括但不限于：</p><p>很菜很菜的密码技术 很守规矩的misc&#x2F;web 绞尽脑汁都想不出来的abstract 等等等等</p><p>感谢各位crypto大佬的狠狠鞭策 </p><p>明天还要上课实在没有时间 粗略写写wp 还望各位佬见谅qwq</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h4 id="尊嘟假嘟"><a href="#尊嘟假嘟" class="headerlink" title="尊嘟假嘟"></a>尊嘟假嘟</h4><p>听题目所给mp3音频，推测应为摩斯密码</p><p>丢进au看频谱图!<img src="/pic/6.png" alt="img"></p><p>打出摩斯密码转译</p><h4 id="异世相遇"><a href="#异世相遇" class="headerlink" title="异世相遇"></a>异世相遇</h4><h6 id=""><a href="#" class="headerlink" title=""></a></h6><p>看图知ifs国金中心 原神</p><p>搜索关键词得该活动地点位于长沙 角色为提那里 科莱（不玩原神真的知道吗</p><h4 id="白夜"><a href="#白夜" class="headerlink" title="白夜"></a>白夜</h4><p>等24小时（虔诚</p><p>似乎有什么修改器？但我不会（</p><h4 id="Violet"><a href="#Violet" class="headerlink" title="Violet"></a>Violet</h4><p>由<a href="https://www.cnblogs.com/xihui/p/11712662.html">hint</a>知其为纠错码</p><p>1到25换算为二进制 为1的就是对应的纠错码</p><p>比如23对应16+4+2+1即为10111说明16 4 2 1即为其纠错码</p><p>搓代码</p><p>但是不会写脚本 所以就手搓了100个…</p><h4 id="get-the-file-on-blockchain"><a href="#get-the-file-on-blockchain" class="headerlink" title="get the file on blockchain"></a>get the file on blockchain</h4><p>ipfs题 新东西的应用</p><p>将所给cid转码为base58</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base58<br>base58.b58encode_int(<span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;1220eb82ecca07c85628a9e6a56a76d6d2c18c93998a727a95c332ca09148a27cccb&quot;</span>, <span class="hljs-number">16</span>))<br></code></pre></td></tr></table></figure><p>运行结果为b’QmeBzJtRrENPMbsXmueBpA6KB9wgsioRPwLF3WVMdHZRz2’</p><p>丢进ipfs（正常的好像工作不了不知道为啥。。。</p><p><img src="/pic/2.png" alt="img"></p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h4 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h4><p>赶时间取巧了 第一个没做</p><p>最后一个为e与phi不互质的情况 取e的因数223与phin求逆元再乘3得d</p><p>倒数第三个为<a href="https://blog.csdn.net/weixin_45369385/article/details/109208109">给定dp情况</a> </p><p>倒数第二个为读代码知e较小且给定多组nc 低加密指数攻击（太懒了就不放代码了</p><h3 id="morethanonce"><a href="#morethanonce" class="headerlink" title="morethanonce"></a>morethanonce</h3><p>一个异或题 先打空格和给定密文异或得首字母必为“C” 推测五个元音，直到异或结果均不为乱码</p><p>得其为CO</p><p>然后单词之间常有空格 补全单词或者用空格异或可解出</p><h3 id="4k-1"><a href="#4k-1" class="headerlink" title="4k+1"></a>4k+1</h3><p>似乎是某种算法？由费马平方和定理知 在某个数是质数的情况下 其为4k+1是其能分解为两数平方和的充要条件 其实应该丢进factordb因式分解的… 但是我试了个网站。。。<img src="/pic/3.png" alt="img">找到pq得解</p><h3 id="Mathematics"><a href="#Mathematics" class="headerlink" title="Mathematics"></a>Mathematics</h3><p>给定ne方程</p><p>消去e 得<img src="/pic/7.png" alt="img"></p><p>因式分解得pq</p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h4 id="十年之约"><a href="#十年之约" class="headerlink" title="十年之约"></a>十年之约</h4><p>当然是手打的了（想方法花的时间可能更多</p><h4 id="must-be-bot"><a href="#must-be-bot" class="headerlink" title="must be bot"></a>must be bot</h4><p>提交第一次后发现post格式</p><p>敲代码提供post文本（需要用到eval函数</p><p>运行八次（因为不会写脚本</p><p><img src="/pic/4.png" alt="img"></p><p><img src="/pic/5.png" alt="img"></p><h2 id="REVERSE-PWN"><a href="#REVERSE-PWN" class="headerlink" title="REVERSE&amp;PWN"></a>REVERSE&amp;PWN</h2><p>笑死完全不会做</p><h3 id="ABSTRACT"><a href="#ABSTRACT" class="headerlink" title="ABSTRACT"></a>ABSTRACT</h3><p>抽象到窒息</p><h4 id="music"><a href="#music" class="headerlink" title="music"></a>music</h4><p>yjzzlzj, cxczlmy 北邮校歌</p><p>严谨在这里铸就 抽象从这里萌芽</p><h4 id="music-revenge"><a href="#music-revenge" class="headerlink" title="music_revenge"></a>music_revenge</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sxnsylmdhx</span><br></code></pre></td></tr></table></figure><p>搜索李诞 歌</p><p>得毛不易歌曲若有缘由最后一句 实现你所有浪漫的幻想</p><h4 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h4><p>人生得意须尽欢莫使金樽空对月</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">😆💲📈🎉<br>😭🍺  🌙<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
      <tag>Web</tag>
      
      <tag>Misc</tag>
      
      <tag>TSCTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
